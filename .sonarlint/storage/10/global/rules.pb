
ˇ
-grvy:org.codenarc.rule.basic.ClassForNameRuleÕ
grvy(org.codenarc.rule.basic.ClassForNameRuleClass For Name"MINOR*grvy2ClassForName:Ô<p>Using <code>Class.forName(...)</code> is a common way to add dynamic behavior to a system. However, using this method can cause resource leaks because the classes can be pinned in memory for long periods of time. If you're forced to do dynamic class loading then use ClassLoader.loadClass instead. All variations of the <code>Class.forName(...)</code> method suffer from the same problem. </p>
<p>For more information see these links: </p>
<p>* <a>http://blog.bjhargrave.com/2007/09/classforname-caches-defined-class-in.html</a> </p>
<p>* <a>http://www.osgi.org/blog/2011/05/what-you-should-know-about-class.html</a> </p>
 Example of violations: </p>
<pre>
    Class.forName('SomeClassName')
    Class.forName(aClassName, true, aClassLoader)
</pre>
∞
0grvy:org.codenarc.rule.basic.DuplicateMapKeyRule˚
grvy+org.codenarc.rule.basic.DuplicateMapKeyRuleDuplicate Map Key"MINOR*grvy2DuplicateMapKey:î<p>A <Map> literal is created with duplicated key. The map entry will be overwritten. </p>
<p>Example of violations: </p>
<pre>
    def var1 = [a:1, a:2, b:3]        //violation
    def var2 = [1:1, 1:2, 2:3]        //violation
    def var3 = ["a":1, "a":2, "b":3]  //violation

    // these are OK
    def var4 = [a:1, b:1, c:1]
    def var5 = [1:1, 2:1, 3:1]
    def var6 = ["a":1, "b":1, "c":1]
</pre>
˚
2grvy:org.codenarc.rule.basic.DuplicateSetValueRuleƒ
grvy-org.codenarc.rule.basic.DuplicateSetValueRuleDuplicate Set Value"MINOR*grvy2DuplicateSetValue:◊<p>A <Set> literal is created with duplicate constant value. A set cannot contain two elements with the same value. </p>
<p>Example of violations: </p>
<pre>
    def a = [1, 2, 2, 4] as Set
    def b = [1, 2, 2, 4] as HashSet
    def c = [1, 2, 2, 4] as SortedSet
    def d = [1, 2, 2, 4] as FooSet
    def e = ['1', '2', '2', '4'] as Set
    def f = ['1', '2', '2', '4'] as HashSet
    def g = ['1', '2', '2', '4'] as SortedSet
    def h = ['1', '2', '2', '4'] as FooSet

    // these are OK
    def a = [1, 2, 3, 4] as Set
    def b = ['1', '2', '3', '4'] as Set
    def c = [1, '1'] as Set
</pre>
ª
/grvy:org.codenarc.rule.basic.EmptyElseBlockRuleá
grvy*org.codenarc.rule.basic.EmptyElseBlockRuleEmpty Else Block"MINOR*grvy2EmptyElseBlock:£<p>Checks for empty <else> blocks. Empty <else> blocks are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        if (x==23) {
            println 'ok'
        } else {
            // empty
        }
    }
</pre>
Ø
2grvy:org.codenarc.rule.basic.EmptyForStatementRule¯
grvy-org.codenarc.rule.basic.EmptyForStatementRuleEmpty For Statement"MINOR*grvy2EmptyForStatement:ã<p>Checks for empty <for> blocks. Empty <for> statements are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        for (int i=0; i < 23; i++) {
            // empty
        }
    }
</pre>
ù
1grvy:org.codenarc.rule.basic.EmptyIfStatementRuleÁ
grvy,org.codenarc.rule.basic.EmptyIfStatementRuleEmpty If Statement"MINOR*grvy2EmptyIfStatement:˝<p>Checks for empty <if> statements. Empty <if> statements are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        if (x==23) {
            // empty
        }
    }
</pre>
ˆ
;grvy:org.codenarc.rule.basic.EmptySynchronizedStatementRule∂
grvy6org.codenarc.rule.basic.EmptySynchronizedStatementRuleEmpty Synchronized Statement"MINOR*grvy2EmptySynchronizedStatement:Æ<p>Checks for empty <synchronized> statements. Empty <synchronized> statements are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    class MyClass {
        def myMethod() {
            synchronized(lock) {
            }
        }
    }
</pre>
≈
.grvy:org.codenarc.rule.basic.EmptyTryBlockRuleí
grvy)org.codenarc.rule.basic.EmptyTryBlockRuleEmpty Try Block"MINOR*grvy2EmptyTryBlock:±<p>Checks for empty <try> blocks. Empty <try> blocks are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        try {
            // empty
        } catch(MyException e) {
            e.printStackTrace()
        }
    }
</pre>
µ
4grvy:org.codenarc.rule.basic.EmptyWhileStatementRule¸
grvy/org.codenarc.rule.basic.EmptyWhileStatementRuleEmpty While Statement"MINOR*grvy2EmptyWhileStatement:â<p>Checks for empty <while> statements. Empty <while> statements are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        while (!stopped) {
            // empty
        }
    }
</pre>
∑
9grvy:org.codenarc.rule.basic.ForLoopShouldBeWhileLoopRule˘
grvy4org.codenarc.rule.basic.ForLoopShouldBeWhileLoopRuleFor Loop Should Be While Loop"MAJOR*grvy2ForLoopShouldBeWhileLoop:Ù<p>A <code>for</code> loop without an init and update statement can be simplified to a <code>while</code> loop. </p>
<p>Example of violations: </p>
<pre>
    int i = 0;
    for(; i < 5;) {     // Violation
        println i++
    }

    // These are OK
    for(i in [1,2])         // OK
       println i

    for(int i = 0; i<5;)    // OK
        println i++

    int i = 0;
    for(; i < 5; i++)       // OK
        println i

    for (Plan p : plans) {  // OK
        println "Plan=$p"
    }
</pre>
‹
2grvy:org.codenarc.rule.basic.IntegerGetIntegerRule•
grvy-org.codenarc.rule.basic.IntegerGetIntegerRuleInteger Get Integer"MINOR*grvy2IntegerGetInteger:∏<p>This rule catches usages of java.lang.Integer.getInteger(String, ...) which reads an Integer from the System properties. It is often mistakenly used to attempt to read user input or parse a String into an Integer. It is a poor piece of API to use; replace it with System.properties['prop']. </p>
<p>Example of violations: </p>
<pre>
    // violations
    Integer.getInteger(value)
    Integer.getInteger(value, radix)

    // zero or more than 2 parameters is OK, must be different method
    Integer.getInteger()
    Integer.getInteger(value, radix, locale)
</pre>
†
7grvy:org.codenarc.rule.basic.MultipleUnaryOperatorsRule‰
grvy2org.codenarc.rule.basic.MultipleUnaryOperatorsRuleMultiple Unary Operators"MINOR*grvy2MultipleUnaryOperators:Ë<p>Checks for multiple consecutive unary operators. These are confusing, and are likely typos and bugs. </p>
<p>Example of violations: </p>
<pre>
    int z = ~~2             // violation
    boolean b = !!true      // violation
    boolean c = !!!false    // 2 violations
    int j = -~7             // violation
    int k = +~8             // violation
</pre>
¨
0grvy:org.codenarc.rule.basic.RemoveAllOnSelfRule˜
grvy+org.codenarc.rule.basic.RemoveAllOnSelfRuleRemove All On Self"MINOR*grvy2RemoveAllOnSelf:è<p>Don't use <code>removeAll</code> to clear a collection. If you want to remove all elements from a collection <code>c</code>, use <code>c.clear</code>, not <code>c.removeAll(c)</code>. Calling <code>c.removeAll(c)</code> to clear a collection is less clear, susceptible to errors from typos, less efficient and for some collections, might throw a <code>ConcurrentModificationException</code>. </p>
Õ
/grvy:org.codenarc.rule.concurrency.BusyWaitRuleô
grvy*org.codenarc.rule.concurrency.BusyWaitRule	Busy Wait"MINOR*grvy2BusyWait:¬<p>Busy waiting (forcing a <code>Thread.sleep()</code> while waiting on a condition) should be avoided. Prefer using the gate and barrier objects in the <code>java.util.concurrent</code> package. </p>
<p>Example of violations: </p>
<pre>
    while (x) { Thread.sleep(1000) }
    while (x) { Thread.sleep(1000) { /* interruption handler */} }
    for (int x = 10; x; x--) {
        sleep(1000)     // sleep is added to Object in Groovy
    }

    // here is the proper way to wait:
    countDownLatch.await()

    // this is weird code to write, but does not cause a violation
    for (def x : collections) {
        sleep(1000)
    }

    while (x) {
        // you should use a lock here, but technically you are
        // not just busy waiting because you are doing other work
        doSomething()
        sleep(1000)
    }
</pre>
…
Jgrvy:org.codenarc.rule.concurrency.InconsistentPropertySynchronizationRule˙
grvyEorg.codenarc.rule.concurrency.InconsistentPropertySynchronizationRule%Inconsistent Property Synchronization"MINOR*grvy2#InconsistentPropertySynchronization:—<p>Class contains similarly-named get and set methods where the set method is synchronized and the get method is not, or the get method is synchronized and the set method is not. This may result in incorrect behavior at runtime, as callers of the get and set methods will not necessarily see a consistent state for the object. The get and set method should both be synchronized or neither should be synchronized. </p>
<p>Example of violations: </p>
<pre>
    class Person {
        String name
        Date birthday
        boolean deceased
        boolean parent
        int weight

        synchronized setName(String name) {
            this.name = name
        }
        // violation, get method should be synchronized
        String getName() {
            name
        }

        // violation, set method should be synchronized
        void setBirthday(Date birthday) {
            this.birthday = birthday
        }

        synchronized String getBirthday() {
            birthday
        }

        // violation, set method should be synchronized
        void setDeceased(boolean deceased) {
            this.deceased = deceased
        }

        synchronized boolean isDeceased() {
            deceased
        }

        synchronized void setParent(boolean parent) {
            this.parent = parent
        }

        // violation, get method should be synchronized
        boolean isParent() {
            parent
        }

        // violation get method should be synchronized
        @groovy.transform.Synchronized
        void setWeight(int value) {
            weight = value
        }
    }
</pre>
‹
9grvy:org.codenarc.rule.concurrency.StaticMatcherFieldRuleû
grvy4org.codenarc.rule.concurrency.StaticMatcherFieldRuleStatic Matcher Field"MINOR*grvy2StaticMatcherField:®<p>Matcher objects should not be used as static fields. Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. </p>
<p>Example of violations: </p>
<pre>
    // two violations
    class MyClass {
      static Matcher matcher1
      static java.util.regex.Matcher matcher2
    }

    // these usages are OK
    class MyCorrectClass {
      private Matcher matcher1
      static ThreadLocal<Matcher> matcher2
    }
</pre>
‚
Bgrvy:org.codenarc.rule.concurrency.StaticSimpleDateFormatFieldRuleõ
grvy=org.codenarc.rule.concurrency.StaticSimpleDateFormatFieldRuleStatic Simple Date Format Field"MINOR*grvy2StaticSimpleDateFormatField:à<p><code>SimpleDateFormat</code> objects should not be used as <code>static</code> fields. SimpleDateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random <code>ArrayIndexOutOfBoundsException</code> or <code>IndexOutOfBoundsException</code> in <code>sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate()</code>. You may also experience serialization problems. Using an instance field or a <code>ThreadLocal</code> is recommended. </p>
<p>For more information on this see Sun Bug #6231579 and Sun Bug #6178997. </p>
<p>Examples: </p>
<pre>
    // Violations
    class MyClass {
        static SimpleDateFormat dateFormat1
        static java.text.SimpleDateFormat dateFormat2

        static final DATE1 = new SimpleDateFormat()
        static final DATE2 = new SimpleDateFormat('MM/dd')
        static final DATE3 = new SimpleDateFormat('MM/dd', DateFormatSymbols.instance)
        static date4 = new SimpleDateFormat('MM/dd', Locale.FRANCE)
        static date5 = new java.text.SimpleDateFormat('MM/dd')
    }

    // These usages are OK
    class MyCorrectClass {
        private SimpleDateFormat calendar1
        static ThreadLocal<SimpleDateFormat> calendar2
    }
</pre>
œ%
Cgrvy:org.codenarc.rule.concurrency.SynchronizedOnBoxedPrimitiveRuleá%
grvy>org.codenarc.rule.concurrency.SynchronizedOnBoxedPrimitiveRuleSynchronized On Boxed Primitive"MINOR*grvy2SynchronizedOnBoxedPrimitive:Ú#<p>The code synchronizes on a boxed primitive constant, such as an Integer. Since Integer objects can be cached and shared, this code could be synchronizing on the same object as other, unrelated code, leading to unresponsiveness and possible deadlock. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        Byte byte1 = 100
        Short short1 = 1
        Double double1 = 1
        Integer integer1 = 1
        Long long1 = 1
        Float float1 = 1
        Character char1 = 1

        byte byte2 = getValue()
        short short2 = getValue()
        double double2 = getValue()
        int integer2 = getValue()
        long long2 = getValue()
        float float2 = getValue()
        char char2 = getValue()

        def byte3 = new Byte((byte)100)
        def short3 = new Short((short)1)
        def double3 = new Double((double)1)
        def integer3 = new Integer(1)
        def long3 = new Long(1)
        def float3 = new Float(1)
        def char3 = new Character((char)'1')

        def byte4 = 1 as byte
        def short4 = 1 as short
        def double4 = 1 as double
        def integer4 = 1 as int
        def long4 = 1 as long
        def float4 = 1 as float
        def char4 = 1 as char

        def byte5 = 1 as Byte
        def short5 = 1 as Short
        def double5 = 1 as Double
        def integer5 = 1 as Integer
        def long5 = 1 as Long
        def float5 = 1 as Float
        def char5 = 1 as Character

        def byte6 = (byte)1
        def short6 = (short)1
        def double6 = (double)1
        def integer6 = (int)1
        def long6 = (long)1
        def float6 = (float)1
        def char6 = (char)1

        def method() {
            // all of these synchronization blocks produce violations
            synchronized(byte1) {}
            synchronized(short1) {}
            synchronized(double1) {}
            synchronized(integer1) {}
            synchronized(long1) {}
            synchronized(float1) {}
            synchronized(char1) {}

            synchronized(byte2) {}
            synchronized(short2) {}
            synchronized(double2) {}
            synchronized(integer2) {}
            synchronized(long2) {}
            synchronized(float2) {}
            synchronized(char2) {}

            synchronized(byte3) {}
            synchronized(short3) {}
            synchronized(double3) {}
            synchronized(integer3) {}
            synchronized(long3) {}
            synchronized(float3) {}
            synchronized(char3) {}

            synchronized(byte4) {}
            synchronized(short4) {}
            synchronized(double4) {}
            synchronized(integer4) {}
            synchronized(long4) {}
            synchronized(float4) {}
            synchronized(char4) {}

            synchronized(byte5) {}
            synchronized(short5) {}
            synchronized(double5) {}
            synchronized(integer5) {}
            synchronized(long5) {}
            synchronized(float5) {}
            synchronized(char5) {}

            synchronized(byte6) {}
            synchronized(short6) {}
            synchronized(double6) {}
            synchronized(integer6) {}
            synchronized(long6) {}
            synchronized(float6) {}
            synchronized(char6) {}
        }
    }
</pre>
<pre>
    class MyClass {

        final String lock = false

        def method() {
            // violation
            synchronized(lock) { }
        }
    }

    class MyClass {

        final String lock = false

        class MyInnerClass {
            def method() {
                // violation
                synchronized(lock) { }
            }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = true

        def method() {
            // violation
            synchronized(lock) { }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = new Object[0] // correct idiom

        def method() {
            return new Runnable() {
                final def lock = false // shadows parent from inner class
                public void run() {
                    // violation
                    synchronized(stringLock) { }
                }
            }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = new Object[0] // correct idiom

        class MyInnerClass {

            final def lock = true // shadows parent from inner class
            def method() {
                // violation
                synchronized(stringLock) { }
            }
        }
    }
</pre>
À
Bgrvy:org.codenarc.rule.concurrency.SynchronizedOnReentrantLockRuleÑ
grvy=org.codenarc.rule.concurrency.SynchronizedOnReentrantLockRuleSynchronized On Reentrant Lock"MINOR*grvy2SynchronizedOnReentrantLock:Ú<p>Synchronizing on a ReentrantLock field is almost never the intended usage. A ReentrantLock should be obtained using the lock() method and released in a finally block using the unlock() method. </p>
<p>This rule take from Alex Miller's <a href="http://www.slideshare.net/alexmiller/java-concurrency-gotchas-3666977">Java Concurrency in Practice</a> slides. </p>
<p>Here is the proper usage of ReentrantLock: </p>
<pre>
    import java.util.concurrent.locks.ReentrantLock;
    final lock = new ReentrantLock();
    def method()  {
       //Trying to enter the critical section
       lock.lock(); // will wait until this thread gets the lock
       try {
          // critical section
       } finally {
          //releasing the lock so that other threads can get notifies
          lock.unlock();
       }
    }
</pre>
<pre>
    class MyClass {

        final ReentrantLock lock = new ReentrantLock()

        def method() {
            // violation
            synchronized(lock) { }
        }
    }

    class MyClass {

        final ReentrantLock lock = new ReentrantLock()

        class MyInnerClass {
            def method() {
                synchronized(lock) { }
            }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = new ReentrantLock()

        def method() {
            // violation
            synchronized(lock) { }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = new Object[0] // correct idiom

        def method() {
            return new Runnable() {
                final def lock = new ReentrantLock() // shadows parent from inner class
                public void run() {
                    // violation
                    synchronized(lock) { }
                }
            }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = new Object[0] // correct idiom

        class MyInnerClass {

            final def lock = new ReentrantLock() // shadows parent from inner class
            def method() {
                // violation
                synchronized(lock) { }
            }
        }
    }
</pre>
Î
Fgrvy:org.codenarc.rule.concurrency.ThisReferenceEscapesConstructorRule†
grvyAorg.codenarc.rule.concurrency.ThisReferenceEscapesConstructorRule"This Reference Escapes Constructor"MINOR*grvy2ThisReferenceEscapesConstructor:Ç<p>Reports constructors passing the 'this' reference to other methods. This equals exposing a half-baked objects and can lead to race conditions during initialization. For reference, see <a href="http://www.slideshare.net/alexmiller/java-concurrency-gotchas-3666977/38">Java Concurrency in Practice</a> by Alex Miller and <a href="http://www.ibm.com/developerworks/java/library/j-jtp0618/index.html">Java theory and practice: Safe construction techniques</a> by Brian Goetz. </p>
<p>Example of violations: </p>
<pre>
    class EventListener {
        EventListener(EventPublisher publisher) {
            publisher.register(this)            
            new WorkThread(publisher, this).start()
            new AnotherWorkThread(listener: this)
        }    
    }
</pre>
⁄
@grvy:org.codenarc.rule.concurrency.VolatileLongOrDoubleFieldRuleï
grvy;org.codenarc.rule.concurrency.VolatileLongOrDoubleFieldRuleVolatile Long Or Double Field"MINOR*grvy2VolatileLongOrDoubleField:à<p>This rule reports on <code>long</code> or <code>double</code> fields that are declared <code>volatile</code>. </p>
<p>Long or double fields should not be declared as <code>volatile</code>. Java specifies that reads and writes from such fields are atomic, but many JVM's have violated this specification. Unless you are certain of your JVM, it is better to synchronize access to such fields rather than declare them <code>volatile</code>. This rule flags fields marked <code>volatile</code> when their type is <code>double</code> or <code>long</code> or the name of their type is "Double" or "Long". </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
     def method() {
         private volatile double d
         private volatile long f
     }
</pre>
û

=grvy:org.codenarc.rule.concurrency.WaitOutsideOfWhileLoopRule‹	
grvy8org.codenarc.rule.concurrency.WaitOutsideOfWhileLoopRuleWait Outside Of While Loop"MINOR*grvy2WaitOutsideOfWhileLoop:ÿ<p>Calls to <code>Object.wait()</code> must be within a <code>while</code> loop. This ensures that the awaited condition has not already been satisfied by another thread before the <code>wait()</code> is invoked. It also ensures that the proper thread was resumed and guards against incorrect notification. See [1] and [3]. </p>
<p>As a more modern and flexible alternative, consider using the Java <concurrency utilities> instead of <code>wait()</code> and <code>notify()</code>. See discussion in <Effective Java> [2]. </p>
<p>Example of violation: </p>
<pre>
    class MyClass {
        private data

        void processData()
            synchronized(data) {
                if (!data.isReady()) {
                    data.wait()
                }
                data.calculateStatistics()
            }
        }
    }
</pre>
<pre>
    class MyClass {
        private data

        void processData()
            synchronized(data) {
                while (!data.isReady()) {
                    data.wait()
                }
                data.calculateStatistics()
            }
        }
    }
</pre>
ñ
9grvy:org.codenarc.rule.convention.HashtableIsObsoleteRuleÿ
grvy4org.codenarc.rule.convention.HashtableIsObsoleteRuleHashtable Is Obsolete"MINOR*grvy2HashtableIsObsolete:‡<p>Checks for references to the (<effectively>) obsolete <code>java.util.Hashtable</code> class. Use the <code>Java Collections Framework</code> classes instead, including <code>HashMap</code> or <code>ConcurrentHashMap</code>. See the JDK javadoc. </p>
<p>Example of violations: </p>
<pre>
    def myMap = new Hashtable()           // violation
</pre>
Ø
+grvy:org.codenarc.rule.convention.NoDefRuleˇ
grvy&org.codenarc.rule.convention.NoDefRuleNo Def"MAJOR*grvy2NoDef:≤<p> Do not allow using the <code>def</code> keyword in code. Use a specific type instead. </p>
<p><code>NOTE:</code> This rule applies to the text contents of a <file> rather than a specific <class>, so it does not support the <applyToClassNames> and <doNotApplyToClassNames> configuration properties. </p>
©
Dgrvy:org.codenarc.rule.design.AbstractClassWithoutAbstractMethodRule‡
grvy?org.codenarc.rule.design.AbstractClassWithoutAbstractMethodRule&Abstract Class Without Abstract Method"MINOR*grvy2"AbstractClassWithoutAbstractMethod:Ω<p>The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided prevent direct instantiation. </p>
<p>Example: </p>
<pre>
    public abstract class MyBaseClass {
        void method1() {  }
        void method2() {  }
        // consider using abstract methods or removing
        // the abstract modifier and adding protected constructors
    }
</pre>
<pre>
    abstract class MyClass extends AbstractParent {
        // OK because parent is named Abstract.*
    }
    abstract class MyClass extends BaseParent{
        // OK because parent is named Base.*
    }
</pre>
Ù
8grvy:org.codenarc.rule.design.ConstantsOnlyInterfaceRule∑
grvy3org.codenarc.rule.design.ConstantsOnlyInterfaceRuleConstants Only Interface"MINOR*grvy2ConstantsOnlyInterface:∫<p>An interface should be used only to model a behaviour of a class: using an interface as a container of constants is a poor usage pattern. Example: </p>
<pre>
    public interface ConstantsInterface {
        public static final int CONSTANT_1 = 0
        public static final String CONSTANT_2 = "1"
    }
</pre>
„
5grvy:org.codenarc.rule.design.PublicInstanceFieldRule©
grvy0org.codenarc.rule.design.PublicInstanceFieldRulePublic Instance Field"MINOR*grvy2PublicInstanceField:µ<p>Using public fields is considered to be a bad design. Use properties instead. </p>
<p>Example of violations: </p>
<pre>
    class Person {
        public String name
    }
</pre>
Ñ

3grvy:org.codenarc.rule.dry.DuplicateListLiteralRuleÃ	
grvy.org.codenarc.rule.dry.DuplicateListLiteralRuleDuplicate List Literal"MAJOR*grvy2DuplicateListLiteral:ÿ<p> This rule checks for duplicate <List> literals within the current class. This rule only checks for <List>s where values are all constants or literals. </p>
<p>Code containing duplicate <List> literals can usually be improved by declaring the <List> as a constant field. </p>
<p>By default, the rule does not analyze test files. This rule sets the default value of the <doNotApplyToFilesMatching> property to ignore file names ending in 'Test.groovy', 'Tests.groovy' or 'TestCase.groovy'. </p>
<p>Examples of violations: </p>
<pre>
      def var1 = [1, null, Boolean.FALSE, 'x', true]
      def var2 = [1, null, Boolean.FALSE, 'x', true]        // violation

      def var1 = [1, [3, 4]]
      def var2 = [1, [3,4]]     // violation

      def var1 = [123, [3, 4, [x:99], 5]]
      def var2 = [99, [3, 4, [x:99], 5]]        // violation [3, 4, [x:99], 5]
</pre>
<pre>
    def name
    def var1 = [name, 'b', 'c']
    def var2 = [name, 'b', 'c']   // not a violation; name is a variable

    def var1 = [1, 7+5]
    def var2 = [1, 7+5]      // not a violation; contains a non-constant/literal expression
</pre>
⁄
5grvy:org.codenarc.rule.dry.DuplicateStringLiteralRule†
grvy0org.codenarc.rule.dry.DuplicateStringLiteralRuleDuplicate String Literal"MINOR*grvy2DuplicateStringLiteral:¶<p> This rule checks for duplicate String literals within the current class. </p>
<p>Code containing duplicate <String> literals can usually be improved by declaring the <String> as a constant field. </p>
<p>By default, the rule does not analyze test files. This rule sets the default value of the <doNotApplyToFilesMatching> property to ignore file names ending in 'Test.groovy', 'Tests.groovy' or 'TestCase.groovy'. </p>
Œ
?grvy:org.codenarc.rule.exceptions.ExceptionExtendsThrowableRuleä
grvy:org.codenarc.rule.exceptions.ExceptionExtendsThrowableRuleException Extends Throwable"MINOR*grvy2ExceptionExtendsThrowable:Ä<p>Checks for classes that extend <code>Throwable</code>. Custom exception classes should subclass <code>Exception</code> or one of its descendants. </p>
<p>Example of violations: </p>
<pre>
    class MyException extends Throwable { }   // violation
</pre>
ä
8grvy:org.codenarc.rule.exceptions.SwallowThreadDeathRuleÕ
grvy3org.codenarc.rule.exceptions.SwallowThreadDeathRuleSwallow Thread Death"MINOR*grvy2SwallowThreadDeath:ÿ<p>Detects code that catches java.lang.ThreadDeath without re-throwing it.</p>
<p>Example of violations: </p>
<pre>
    try {
        def a = 0
    } catch (ThreadDeath td) {
        td.printStackTrace()
    }
</pre>
“
0grvy:org.codenarc.rule.exceptions.ThrowErrorRuleù
grvy+org.codenarc.rule.exceptions.ThrowErrorRuleThrow Error"MINOR*grvy2
ThrowError:¡<p>Checks for throwing an instance of <code>java.lang.Error</code>. This is not appropriate within normal application code. Throw an instance of a more specific exception subclass instead. </p>
Æ
4grvy:org.codenarc.rule.exceptions.ThrowThrowableRuleı
grvy/org.codenarc.rule.exceptions.ThrowThrowableRuleThrow Throwable"MINOR*grvy2ThrowThrowable:ç<p>Checks for throwing an instance of <code>java.lang.Throwable</code>. Throw an instance of a more specific exception subclass instead. </p>
Ω
4grvy:org.codenarc.rule.formatting.BracesForClassRuleÑ
grvy/org.codenarc.rule.formatting.BracesForClassRuleBraces For Class"MINOR*grvy2BracesForClass:õ<p>Checks the location of the opening brace (\{) for classes. By default, requires them on the same line, but the <code>sameLine</code> property can be set to false to override this. </p>
<p>NOTE: This rule ignores annotation types, e.g. <code>@interface MyAnnotation {}</code>. </p>
Ú
5grvy:org.codenarc.rule.formatting.BracesForMethodRule∏
grvy0org.codenarc.rule.formatting.BracesForMethodRuleBraces For Method"MINOR*grvy2BracesForMethod:Ã<p>Checks the location of the opening brace (\{) for constructors and methods. By default, requires them on the same line, but the <code>sameLine</code> property can be set to false to override this. </p>
π
3grvy:org.codenarc.rule.formatting.SpaceAfterForRuleÅ
grvy.org.codenarc.rule.formatting.SpaceAfterForRuleSpace After For"MAJOR*grvy2SpaceAfterFor:õ<p>Check that there is exactly one space (blank) after the <code>for</code> keyword and before the opening parenthesis. </p>
<p>Examples of violations: </p>
<pre>
    for(name in names) { }                  // violation
    for  (int i=0; i < 10; i++) { }         // violation
</pre>
ü
9grvy:org.codenarc.rule.formatting.SpaceAfterSemicolonRule·
grvy4org.codenarc.rule.formatting.SpaceAfterSemicolonRuleSpace After Semicolon"MAJOR*grvy2SpaceAfterSemicolon:j<p>Check that there is at least one space (blank) or whitespace following a semicolon that separates: </p>
Œ
=grvy:org.codenarc.rule.formatting.SpaceAroundClosureArrowRuleå
grvy8org.codenarc.rule.formatting.SpaceAroundClosureArrowRuleSpace Around Closure Arrow"MAJOR*grvy2SpaceAroundClosureArrow:á<p>Checks that there is at least one space (blank) or whitespace around each closure arrow (->) symbol. </p>
<p>Known limitations: </p>

9grvy:org.codenarc.rule.formatting.SpaceAroundOperatorRule≤
grvy4org.codenarc.rule.formatting.SpaceAroundOperatorRuleSpace Around Operator"MAJOR*grvy2SpaceAroundOperator:∫<p>Check that there is at least one space (blank) or whitespace around each binary operator, including: +, -, *, /, \>\>, \<\<, &&, ||, &, |, ?:, =, "as". </p>
<p>Do not check dot ('.') operator. Do not check unary operators (!, +, -, ++, --, ?.). Do not check array ('[') operator. </p>
<p>Known limitations: </p>
ö
=grvy:org.codenarc.rule.formatting.SpaceBeforeOpeningBraceRuleÿ
grvy8org.codenarc.rule.formatting.SpaceBeforeOpeningBraceRuleSpace Before Opening Brace"MAJOR*grvy2SpaceBeforeOpeningBrace:”<p>Check that there is at least one space (blank) or whitespace before each opening brace ("\{") for method/class/interface declarations, closure expressions and block statements. </p>
<p>Known limitations: </p>
¢
>grvy:org.codenarc.rule.generic.IllegalClassReferenceRule.fixedﬂ

grvy9org.codenarc.rule.generic.IllegalClassReferenceRule.fixedIllegal Class Reference"MINOR*grvy2IllegalClassReference:ﬁ	<p> Checks for reference to any of the classes configured in <code>classNames</code>. </p>
<p>Note that you can use the standard rule properties, such as <code>applyToClassNames</code>, <code>doNotApplyToFileNames</code> and <code>applyToFilesMatching</code> to only apply this rule to a subset of all classes/files. These rule properties are described in <a href="http://codenarc.sourceforge.net/codenarc-configuring-rules.html#Standard_Properties_for_Configuring_Rules"> Standard Properties for Configuring Rules</a>. </p>
<p>This rule can be useful for governance and enforcement of <architectural layering>. For instance, making sure that view or model classes, for instance, do not contain references to DAO classes (e.g., *Dao). </p>
<p>Here is an example configuration of this rule used to ensure that DAO classes are not referenced from within model classes: </p>
<pre>
    ruleset {
        description "Example CodeNarc Ruleset"

        // ...

        IllegalClassReference {
            name = 'DoNotReferenceDaoFromModelClasses'
            priority = 2
            classNames = '*Dao'
            applyToClassNames = 'com.example.model.*'
            description = 'Do not reference DAOs from model classes.'
        }
    }
</pre>
ç
6grvy:org.codenarc.rule.generic.IllegalStringRule.fixed“
grvy1org.codenarc.rule.generic.IllegalStringRule.fixedIllegal String"MINOR*grvy2IllegalString:Í<p>Checks for a specified illegal string within the source code. </p>
<p>A RuleSet can contain any number of instances of this rule, but each should be configured with a unique rule <name> and <string>, and (optionally) customized <violationMessage> and <priority>. </p>
<p><code>NOTE:</code> This rule applies to the text contents of an entire <file> rather than a specific <class>, so it does not support the <applyToClassNames> and <doNotApplyToClassNames> configuration properties. </p>
Ω
9grvy:org.codenarc.rule.grails.GrailsDomainHasToStringRuleˇ
grvy4org.codenarc.rule.grails.GrailsDomainHasToStringRuleGrails Domain Has To String"MINOR*grvy2GrailsDomainHasToString:˝<p>Checks that Grails domain classes redefine <code>toString()</code>. </p>
<p>Ignores classes annotated with <code>@ToString</code> or <code>@Canonical</code>. </p>
<p>This rule sets the default value of <code>applyToFilesMatching</code> to only match files under the 'grails-app/domain' folder. You can override this with a different regular expression value if appropriate. </p>
’
8grvy:org.codenarc.rule.grails.GrailsDuplicateMappingRuleò
grvy3org.codenarc.rule.grails.GrailsDuplicateMappingRuleGrails Duplicate Mapping"MINOR*grvy2GrailsDuplicateMapping:õ<p> Check for duplicate name in a Grails domain class mapping. Duplicate names/entries are legal, but can be confusing and error-prone. </p>
<p>NOTE: This rule does not check that the values of the entries are duplicated, only that there are two entries with the same name. </p>
<p>Example of violations: </p>
<pre>
    class Person {
        String firstName
        String lastName

        static mapping = {
            table 'people'
            firstName column: 'First_Name'
            lastName column: 'Last_Name'
            firstName column: 'First_Name'      // violation
            table 'people2'                     // violation
        }
    }
</pre>
â
6grvy:org.codenarc.rule.grails.GrailsMassAssignmentRuleŒ
grvy1org.codenarc.rule.grails.GrailsMassAssignmentRuleGrails Mass Assignment"MINOR*grvy2GrailsMassAssignment:◊<p>Untrusted input should not be allowed to set arbitrary object fields without restriction. </p>
<p>Example of violations: </p>
<pre>
   // Person would be a grails domain object
   def person = new Person(params)
   person.save()

   // or using .properties
   def person = Person.get(1)
   person.properties = params
   person.save()
</pre>
˚
?grvy:org.codenarc.rule.grails.GrailsServletContextReferenceRule∑
grvy:org.codenarc.rule.grails.GrailsServletContextReferenceRule Grails Servlet Context Reference"MINOR*grvy2GrailsServletContextReference:§<p>Rule that checks for references to the <code>servletContext</code> object from within Grails controller and taglib classes. </p>
<p>This rule is intended as a "governance" rule to enable monitoring and controlling access to the <code>servletContext</code> from within application source code. Storing objects in the <code>servletContext</code> may inhibit scalability and/or performance and should be carefully considered. Furthermore, access to the <code>servletContext</code> is not synchronized, so reading/writing objects from the <code>servletConext</code> must be manually synchronized, as described in <a href="http://www.amazon.com/Definitive-Grails-Second-Experts-Development/dp/1590599950"> The Definitive Guide to Grails (2nd edition)</a>. </p>
<p>Note that this rule does not check for direct access to the <code>servletContext</code> from within GSP (Groovy Server Pages) files. </p>
<p>Enabling this rule may make most sense in a team environment where team members exhibit a broad range of skill and experience levels. Appropriate <code>servletContext</code> access can be configured as exceptions to this rule by configuring either the <code>doNotApplyToFilenames</code> or <code>doNotApplyToFilesMatching</code> property of the rule. And, as always, it is easy to just <a href="http://codenarc.sourceforge.net/codenarc-configuring-rules.html#Turning_Off_A_Rule">turn off the rule</a> if it does not make sense it your environment. </p>
<p>This rule sets the default value of <code>applyToFilesMatching</code> to only match files under the 'grails-app/controllers' or 'grails-app/taglib' folders. You can override this with a different regular expression value if appropriate. </p>
˚
8grvy:org.codenarc.rule.grails.GrailsStatelessServiceRuleæ
grvy3org.codenarc.rule.grails.GrailsStatelessServiceRuleGrails Stateless Service"MINOR*grvy2GrailsStatelessService:¡<p>Checks for non-<code>final</code> fields on a Grails service class. Grails service classes are singletons by default, and so they should be reentrant. In most cases, this implies (or at least encourages) that they should be stateless. </p>
<p>This rule ignores (i.e., does not cause violations for) the following: </p>
•
;grvy:org.codenarc.rule.groovyism.AssignCollectionUniqueRuleÂ
grvy6org.codenarc.rule.groovyism.AssignCollectionUniqueRuleAssign Collection Unique"MINOR*grvy2AssignCollectionUnique:Â<p>The Collections.unique() method mutates the list and returns the list as a value. If you are assigning the result of unique() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs. This violation is triggered when a unique() method call appears as the right hand side of an assignment, or when it appears as the first method call in a series of chained method calls. </p>
<p>Example of violations: </p>
<pre>
  def a = myList.unique()
  def b = myList.unique() { it }
  def c = myList.unique().findAll { x < 1 }

</pre>
É
<grvy:org.codenarc.rule.groovyism.ExplicitCallToAndMethodRule¬
grvy7org.codenarc.rule.groovyism.ExplicitCallToAndMethodRuleExplicit Call To And Method"MINOR*grvy2ExplicitCallToAndMethod:Ω<p>This rule detects when the <code>and(Object)</code> method is called directly in code instead of using the <code>&</code> operator. A groovier way to express this: <code>a.and(b)</code> is this: <code>a & b</code>. This rule can be configured to ignore <code>this.and(Object)</code> using the <ignoreThisReference> property. It defaults to <true>, so even <code>and(x)</code> will not trigger a violation. The default is <true> because <code>and</code> appears commonly in Grails criteria. </p>
<p>This rule also ignores all calls to <code>super.and(Object)</code>. </p>
“
Bgrvy:org.codenarc.rule.groovyism.ExplicitCallToCompareToMethodRuleã
grvy=org.codenarc.rule.groovyism.ExplicitCallToCompareToMethodRule"Explicit Call To Compare To Method"MINOR*grvy2ExplicitCallToCompareToMethod:Û<p>This rule detects when the <code>compareTo(Object)</code> method is called directly in code instead of using the \<\=\>, \>, \>\=, \<, and \<\= operators. A groovier way to express this: <code>a.compareTo(b)</code> is this: <code>a \<\=\> b</code>, or using the other operators. Here are some other ways to write groovier code: </p>
<pre>
    a.compareTo(b) == 0               // can be replaced by: a == b
    a.compareTo(b)                    // can be replaced by: a <=> b
    a.compareTo(b) > 0                // can be replaced by: a > b
    a.compareTo(b) >= 0               // can be replaced by: a >= b
    a.compareTo(b) < 0                // can be replaced by: a < b
    a.compareTo(b) <= 0               // can be replaced by: a <= b
</pre>
Æ
?grvy:org.codenarc.rule.groovyism.ExplicitCallToEqualsMethodRuleÍ
grvy:org.codenarc.rule.groovyism.ExplicitCallToEqualsMethodRuleExplicit Call To Equals Method"MINOR*grvy2ExplicitCallToEqualsMethod:‹<p>This rule detects when the <code>equals(Object)</code> method is called directly in code instead of using the <code>==</code> or <code>!=</code> operator. A groovier way to express this: <code>a.equals(b)</code> is this: <code>a == b</code> and a groovier way to express : <code>!a.equals(b)</code> is: <code>a != b</code>. This rule can be configured to ignore <code>this.equals(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>equals(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.equals(Object)</code>. </p>
‹
Bgrvy:org.codenarc.rule.groovyism.ExplicitCallToLeftShiftMethodRuleï
grvy=org.codenarc.rule.groovyism.ExplicitCallToLeftShiftMethodRule"Explicit Call To Left Shift Method"MINOR*grvy2ExplicitCallToLeftShiftMethod:˝<p>This rule detects when the <code>leftShift(Object)</code> method is called directly in code instead of using the \<\< operator. A groovier way to express this: <code>a.leftShift(b)</code> is this: <code>a \<\< b</code>. This rule can be configured to ignore <code>this.leftShift(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>leftShift(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.leftShift(Object)</code>. </p>
—
Agrvy:org.codenarc.rule.groovyism.ExplicitHashMapInstantiationRuleã
grvy<org.codenarc.rule.groovyism.ExplicitHashMapInstantiationRuleExplicit Hash Map Instantiation"MINOR*grvy2ExplicitHashMapInstantiation:¯<p>This rule checks for explicit calls to the no-argument constructor of <code>HashMap</code>. In Groovy, it is best to replace <code>new HashMap()</code> with <code>[:]</code>, which creates (mostly) the same object. <code>[:]</code> is technically a LinkedHashMap but it is very rare that someone absolutely needs an instance of <code>HashMap</code> and not a subclass. </p>
¥
Agrvy:org.codenarc.rule.groovyism.ExplicitHashSetInstantiationRuleÓ
grvy<org.codenarc.rule.groovyism.ExplicitHashSetInstantiationRuleExplicit Hash Set Instantiation"MINOR*grvy2ExplicitHashSetInstantiation:€<p>This rule checks for explicit calls to the no-argument constructor of <code>HashSet</code>. In Groovy, it is best to replace <code>new HashSet()</code> with <code>[] as Set</code>, which creates the same object. </p>
©
?grvy:org.codenarc.rule.groovyism.ExplicitStackInstantiationRuleÂ
grvy:org.codenarc.rule.groovyism.ExplicitStackInstantiationRuleExplicit Stack Instantiation"MINOR*grvy2ExplicitStackInstantiation:Ÿ<p>This rule checks for explicit calls to the no-argument constructor of <code>Stack</code>. In Groovy, it is best to replace <code>new Stack()</code> with <code>[] as Stack</code>, which creates the same object. </p>
Æ
/grvy:org.codenarc.rule.imports.UnusedImportRule˙
grvy*org.codenarc.rule.imports.UnusedImportRuleUnused Import"MAJOR*grvy2UnusedImport:õ<p>Checks for <import> statements for classes that are never referenced within the source file. Also checks static imports. </p>
<p>Known limitations: </p>
‹
7grvy:org.codenarc.rule.jdbc.JdbcConnectionReferenceRule†
grvy2org.codenarc.rule.jdbc.JdbcConnectionReferenceRuleJdbc Connection Reference"MINOR*grvy2JdbcConnectionReference:¢<p>Checks for direct use of <code>java.sql.Connection</code>, which is discouraged and almost never necessary in application code. </p>
<p>For a more <Groovy> alternative, see <a>http://groovy.codehaus.org/Database+features</a> for information on the <code>Groovy Sql</code> abstraction layer for JDBC/SQL. </p>
<p>Note: If a violation is triggered from an <code>import</code> statement, then you may get multiple violations per import if there are multiple classes in the source file. In that case, the imports are processed once per class. </p>
¥
6grvy:org.codenarc.rule.jdbc.JdbcStatementReferenceRule˘
grvy1org.codenarc.rule.jdbc.JdbcStatementReferenceRuleJdbc Statement Reference"MINOR*grvy2JdbcStatementReference:˛<p>Checks for direct use of <code>java.sql.Statement</code>, <code>java.sql.PreparedStatement</code>, or <code>java.sql.CallableStatement</code>, which is not necessary if using the Groovy <code>Sql</code> facility or an ORM framework such as <Hibernate>. </p>
<p>See <a>http://groovy.codehaus.org/Database+features</a> for information on the <code>Groovy Sql</code> abstraction layer for JDBC/SQL. </p>
<p>Note: If a violation is triggered from an <code>import</code> statement, then you may get multiple violations per import if there are multiple classes in the source file. In that case, the imports are processed once per class. </p>
≤
0grvy:org.codenarc.rule.junit.CoupledTestCaseRule˝
grvy+org.codenarc.rule.junit.CoupledTestCaseRuleCoupled Test Case"MINOR*grvy2CoupledTestCase:ñ<p>This rule finds test cases that are coupled to other test cases, either by invoking static methods on another test case or by creating instances of another test case. If you require shared logic in test cases then extract that logic to a new class where it can properly be reused. Static references to methods on the current test class are ignored. </p>
<p>Example of violations: </p>
<pre>
    class MyTest extends GroovyTestCase {
        public void testMethod() {
            // violation, static method call to other test
            MyOtherTest.helperMethod()

            // violation, instantiation of another test class
            new MyOtherTest()

            // no violation; same class
            def input = MyTest.getResourceAsStream('sample.txt')
        }
    }
</pre>
Œ
7grvy:org.codenarc.rule.junit.JUnitAssertAlwaysFailsRuleí
grvy2org.codenarc.rule.junit.JUnitAssertAlwaysFailsRuleJUnit Assert Always Fails"MINOR*grvy2JUnitAssertAlwaysFails:ï<p>Rule that checks for JUnit <<<assert()>>> method calls with constant or literal arguments such that theassertion always fails. This includes: </p>
ÿ
8grvy:org.codenarc.rule.junit.JUnitFailWithoutMessageRuleõ
grvy3org.codenarc.rule.junit.JUnitFailWithoutMessageRuleJUnit Fail Without Message"MINOR*grvy2JUnitFailWithoutMessage:õ<p>This rule detects JUnit calling the <code>fail()</code> method without an argument. For better error reporting you should always provide a message. </p>
ë
1grvy:org.codenarc.rule.junit.JUnitPublicFieldRule€
grvy,org.codenarc.rule.junit.JUnitPublicFieldRuleJUnit Public Field"MAJOR*grvy2JUnitPublicField:Ò<p>Checks for public fields on a JUnit test class.  There is usually no reason to have a public field (even a constant) on a test class. </p>
<p>Fields within interfaces and fields annotated with @Rule are ignored. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
<p>Example of violations: </p>
<pre>
    import org.junit.Test
    class MyTestCase {
        public int count                        // violation
        public static final MAX_VALUE = 1000    // violation

        @Test
        void testMe() { }
    }
</pre>
…
5grvy:org.codenarc.rule.junit.JUnitSetUpCallsSuperRuleè
grvy0org.codenarc.rule.junit.JUnitSetUpCallsSuperRuleJUnit Set Up Calls Super"MINOR*grvy2JUnitSetUpCallsSuper:ó<p>Rule that checks that if the JUnit <code>setUp</code> method is defined, that it includes a call to <code>super.setUp()</code>. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
€
8grvy:org.codenarc.rule.junit.JUnitTearDownCallsSuperRuleû
grvy3org.codenarc.rule.junit.JUnitTearDownCallsSuperRuleJUnit Tear Down Calls Super"MINOR*grvy2JUnitTearDownCallsSuper:ù<p>Rule that checks that if the JUnit <code>tearDown</code> method is defined, that it includes a call to <code>super.tearDown()</code>. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
∑
=grvy:org.codenarc.rule.junit.JUnitTestMethodWithoutAssertRuleı
grvy8org.codenarc.rule.junit.JUnitTestMethodWithoutAssertRule JUnit Test Method Without Assert"MINOR*grvy2JUnitTestMethodWithoutAssert:Â
<p>This rule searches for test methods that do not contain assert statements. Either the test method is missing assert statements, which is an error, or the test method contains custom assert statements that do not follow a proper assert naming convention. Test methods are defined as public void methods that begin with the work test or have a @Test annotation. By default this rule applies to the default test class names, but this can be changed using the rule's applyToClassNames property. An assertion is defined as either using the <code>assert</code> keyword or invoking a method that starts with the work assert, like assertEquals, assertNull, or assertMyClassIsSimilar. Also, any method named <code>should.*</code> also counts as an assertion so that <code>shouldFail</code> methods do not trigger an assertion, any method that starts with <code>fail</code> counts as an assertion, and any method that starts with <code>verify</code> counts as an assertion. Since version 0.23 CodeNarc has support for JUnit's ExpectedException. </p>
<p>What counts as an assertion method can be overridden using the assertMethodPatterns property of the rule. The default value is this comma separated list of regular expressions: </p>
<pre>
    String assertMethodPatterns = 'assert.*,should.*,fail.*,verify.*,expect.*'
</pre>
<pre>
    'assert.*,should.*,fail.*,verify.*,ensure.*'
</pre>
‰
@grvy:org.codenarc.rule.junit.JUnitUnnecessaryThrowsExceptionRuleü
grvy;org.codenarc.rule.junit.JUnitUnnecessaryThrowsExceptionRule"JUnit Unnecessary Throws Exception"MAJOR*grvy2JUnitUnnecessaryThrowsException:á<p> Check for <code>throws</code> clauses on JUnit test methods. That is not necessary in Groovy. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
<p>Example of violations: </p>
<pre>
    @Test
    void shouldDoStuff() throws Exception { }           // violation

    @BeforeClass void initialize() throws Exception { } // violation
    @Before void setUp() throws RuntimeException { }    // violation
    @After void tearDown() throws Exception { }         // violation
    @AfterClass void cleanUp() throws Exception { }     // violation
    @Ignore void ignored() throws Exception { }         // violation

    class MyTest extends GroovyTestCase {
        void test1() throws Exception { }               // violation
        public void test2() throws IOException { }      // violation
    }

</pre>
∫
:grvy:org.codenarc.rule.junit.SpockIgnoreRestUsedRule.fixed˚
grvy5org.codenarc.rule.junit.SpockIgnoreRestUsedRule.fixedSpock Ignore Rest Used"MINOR*grvy2SpockIgnoreRestUsed:Å<p> If Spock's <code>@IgnoreRest</code> annotation appears on any method, all non-annotated test methods are not executed. This behaviour is almost always unintended. It's fine to use @IgnoreRest locally during development, but when committing code, it should be removed. </p>
<p>The <specificationClassNames> and <specificationSuperclassNames> properties determine which classes are considered Spock <Specification> classes. </p>
<p>Example of violations: </p>
<pre>
    public class MySpec extends spock.lang.Specification {
        @spock.lang.IgnoreRest
        def "my first feature"() {
            expect: false
        }

        def "my second feature"() {
            given: def a = 2

            when: a *= 2

            then: a == 4
        }
    }
</pre>
ì
0grvy:org.codenarc.rule.junit.UnnecessaryFailRuleﬁ
grvy+org.codenarc.rule.junit.UnnecessaryFailRuleUnnecessary Fail"MINOR*grvy2UnnecessaryFail:¯<p>In a unit test, catching an exception and immediately calling Assert.fail() is pointless and hides the stack trace. It is better to rethrow the exception or not catch the exception at all. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
<p>Example of violations: </p>
<pre>
    public void testSomething() {
        try {
            something()
        } catch (Exception e) {
            fail(e.message)
        }

        try {
            something()
        } catch (Exception e) {
            fail()
        }
    }
</pre>
î
Cgrvy:org.codenarc.rule.junit.UseAssertEqualsInsteadOfAssertTrueRuleÃ
grvy>org.codenarc.rule.junit.UseAssertEqualsInsteadOfAssertTrueRule(Use Assert Equals Instead Of Assert True"MAJOR*grvy2"UseAssertEqualsInsteadOfAssertTrue:®<p>This rule detects JUnit assertions in object equality. These assertions should be made by more specific methods, like <code>assertEquals</code>. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
„

Cgrvy:org.codenarc.rule.junit.UseAssertTrueInsteadOfAssertEqualsRuleõ

grvy>org.codenarc.rule.junit.UseAssertTrueInsteadOfAssertEqualsRule(Use Assert True Instead Of Assert Equals"MAJOR*grvy2"UseAssertTrueInsteadOfAssertEquals:˜<p>This rule detects JUnit calling <code>assertEquals</code> where the first parameter is a boolean. These assertions should be made by more specific methods, like <code>assertTrue</code> or <code>assertFalse</code>. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
 All of the following examples can be simplified to assertTrue or remove the true literal: </p>
<pre>
    assertEquals(true, foo())
    assertEquals("message", true, foo())
    assertEquals(foo(), true)
    assertEquals("message", foo(), true)
    assertEquals(false, foo())
    assertEquals("message", false, foo())
    assertEquals(foo(), false)
    assertEquals("message", foo(), false)

    assert true == foo()                    // violation only if checkAssertStatements == true
    assert foo() == true : "message"        // violation only if checkAssertStatements == true
    assert false == foo()                   // violation only if checkAssertStatements == true
    assert foo() == false : "message"       // violation only if checkAssertStatements == true
</pre>
¢
;grvy:org.codenarc.rule.logging.LoggerWithWrongModifiersRule‚
grvy6org.codenarc.rule.logging.LoggerWithWrongModifiersRuleLogger With Wrong Modifiers"MINOR*grvy2LoggerWithWrongModifiers:›<p>Logger objects should be declared private, static and final. </p>
<p>This rule has a property: <code>allowProtectedLogger</code>, which defaults to false. Set it to true if you believe subclasses should have access to a Logger in a parent class and that Logger should be declared protected or public. </p>
<p>This rule has a property: <code>allowNonStaticLogger</code>, which defaults to false. Set it to true if you believe a logger should be allowed to be non-static. </p>
¢
2grvy:org.codenarc.rule.logging.MultipleLoggersRuleÎ
grvy-org.codenarc.rule.logging.MultipleLoggersRuleMultiple Loggers"MINOR*grvy2MultipleLoggers:É<p>This rule catches classes that have more than one logger object defined. Typically, a class has zero or one logger objects. </p>
”
1grvy:org.codenarc.rule.logging.SystemErrPrintRuleù
grvy,org.codenarc.rule.logging.SystemErrPrintRuleSystem Err Print"MINOR*grvy2SystemErrPrint:∑<p>Checks for calls to <code>System.err.print()</code>, <code>System.err.println()</code> or <code>System.err.printf()</code>. Consider using a standard logging facility instead. </p>
Ò
;grvy:org.codenarc.rule.naming.ClassNameSameAsSuperclassRule±
grvy6org.codenarc.rule.naming.ClassNameSameAsSuperclassRuleClass Name Same As Superclass"MINOR*grvy2ClassNameSameAsSuperclass:©<p>Checks for any class that has an identical name to its superclass, other than the package. This can be very confusing. </p>
<p>Also see FindBugs NM_SAME_SIMPLE_NAME_AS_SUPERCLASS rule. </p>
<p>Example of violations: </p>
<pre>
    class MyClass extends other.MyClass         // violation
</pre>
≈
4grvy:org.codenarc.rule.naming.PropertyNameRule.fixedå
grvy/org.codenarc.rule.naming.PropertyNameRule.fixedProperty Name"MINOR*grvy2PropertyName:®<p>Verifies that the name of each property matches a regular expression. By default it checks that property names (other than <static final>) start with a lowercase letter and contains only letters or numbers. By default, <static final> property names start with an uppercase letter and contain only uppercase letters, numbers and underscores. </p>
<p><code>NOTE:</code> This rule checks only <properties> of a class, not regular <fields>. In Groovy, <properties> are fields declared with no access modifier (public, protected, private). For naming of regular <fields>, see <code>FieldNameRule</code>. </p>
<p>The order of precedence for the regular expression properties is: <code>staticFinalRegex</code>, <code>finalRegex</code>, <code>staticRegex</code> and finally <code>regex</code>. In other words, the first regex in that list matching the modifiers for the property is the one that is applied for the field name validation. </p>
¯
4grvy:org.codenarc.rule.naming.VariableNameRule.fixedø
grvy/org.codenarc.rule.naming.VariableNameRule.fixedVariable Name"MINOR*grvy2VariableName:€<p>Verifies that the name of each variable matches a regular expression. By default it checks that non-<code>final</code> variable names start with a lowercase letter and contains only letters or numbers. By default, <code>final</code> variable names start with an uppercase letter and contain only uppercase letters, numbers and underscores. </p>
∞
Hgrvy:org.codenarc.rule.security.NonFinalSubclassOfSensitiveInterfaceRule„
grvyCorg.codenarc.rule.security.NonFinalSubclassOfSensitiveInterfaceRule)Non Final Subclass Of Sensitive Interface"MINOR*grvy2$NonFinalSubclassOfSensitiveInterface:∑<p>The permissions classes such as <code>java.security.Permission</code> and <code>java.security.BasicPermission</code> are designed to be extended. Classes that derive from these permissions classes, however, must prohibit extension. This prohibition ensures that malicious subclasses cannot change the properties of the derived class. Classes that implement sensitive interfaces such as <code>java.security.PrivilegedAction</code> and <code>java.security.PrivilegedActionException</code> must also be declared <code>final</code> for analogous reasons. </p>
<p>For more information see: <a>https://www.securecoding.cert.org/confluence/display/java/SEC07-J.+Classes+that+derive+from+a+sensitive+class+or+implement+a+sensitive+interface+must+be+declared+final</a> </p>
<p>Example of violations: </p>
<pre>
    class MyPermission extends java.security.Permission {
        MyPermission(String name) { super(name) }
        boolean implies(Permission permission) { true }
        boolean equals(Object obj) { true }
        int hashCode() { 0 }
        String getActions() { "action" }
    }

    class MyBasicPermission extends BasicPermission {
        MyBasicPermission(String name) { super(name) }
    }

    class MyPrivilegedAction implements PrivilegedAction {
        Object run() { 0 }
    }

    class MyPrivilegedActionException extends PrivilegedActionException {
        MyPrivilegedActionException(Exception exception) { super(exception) }
    }
</pre>
º
/grvy:org.codenarc.rule.size.AbcMetricRule.fixedà
grvy*org.codenarc.rule.size.AbcMetricRule.fixed
Abc Metric"MINOR*grvy2	AbcMetric:Ø<p>Calculates the <ABC> size metric for methods/classes and checks against configured threshold values. </p>
<p>The <code>maxMethodAbcScore</code> property holds the threshold value for the ABC score for each method. If this value is non-zero, a method with an ABC score greater than this value is considered a violation. The value does not have to be an integer (e.g., 1.7 is allowed). </p>
<p>The <code>maxClassAverageMethodAbcScore</code> property holds the threshold value for the average ABC score for each class. If this value is non-zero, a class with an average ABC score value greater than this value is considered a violation. The value does not have to be an integer. </p>
<p>The <code>maxClassAbcScore</code> property holds the threshold value for the total ABC score value for each class. If this value is non-zero, a class with a total ABC score greater than this value is considered a violation. The value does not have to be an integer. </p>
<p>This rule treats "closure fields" as methods. If a class field is initialized to a Closure (ClosureExpression), then that Closure is analyzed and checked just like a method. </p>
 The <ABC> score is calculated as follows: The <ABC> metric measures size by counting the number of Assignments (A), Branches (B) and Conditions (C) and assigns a single numerical score calculated as: </p>
<p><code> |ABC| = sqrt((A*A)+(B*B)+(C*C)) </code> </p>
<p>The <ABC Metric> calculation rules for Groovy: </p>
Ó
0grvy:org.codenarc.rule.size.CrapMetricRule.fixedπ
grvy+org.codenarc.rule.size.CrapMetricRule.fixedCrap Metric"MINOR*grvy2
CrapMetric:›<p>Calculates the <a href="http://www.artima.com/weblogs/viewpost.jsp?thread=210575">C.R.A.P.</a> (Change Risk Anti-Patterns) metric score for methods/classes and checks against configured threshold values. </p>
<p>The <CRAP> metric score is based on the <cyclomatic complexity> and test coverage for individual methods. A method with a <CRAP> value greater than the <code>maxMethodCrapScore</code> property causes a violation. Likewise, a class that has an (average method) <CRAP> value greater than the <code>maxClassAverageMethodCrapScore</code> property causes a violation. </p>
<p><code>NOTE:</code> This rule requires the <code>GMetrics</code>[3] jar, version 0.5 (or later), on the classpath, as well as a <code>Cobertura</code>[4]-[6] XML coverage file. If either of these prerequisites is not available, this rule logs a warning messages and exits (i.e., does nothing). </p>
<p>The <code>maxMethodCrapScore</code> property holds the threshold value for the CRAP value for each method. If this value is non-zero, a method with a cyclomatic complexity value greater than this value is considered a violation. </p>
<p>The <code>maxClassAverageMethodCrapScore</code> property holds the threshold value for the average CRAP value for each class. If this value is non-zero, a class with an average cyclomatic complexity value greater than this value is considered a violation. </p>
<p>NOTE: This rule does NOT treat <closure fields> as methods (unlike some of the other size/complexity rules). </p>
ù
0grvy:org.codenarc.rule.size.NestedBlockDepthRuleË
grvy+org.codenarc.rule.size.NestedBlockDepthRuleNested Block Depth"MINOR*grvy2NestedBlockDepth:ˇ<p>Checks for blocks or closures nested more deeply than a configured maximum number. Blocks include <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, <code>try</code>, <code>catch</code>, <code>finally</code> and <code>synchronized</code> blocks/statements, as well as closures. </p>
<p>Methods calls, constructor calls, and property access through Builder objects are ignore. For instance, this code does not cause a violation: </p>
<pre>
    myBuilder.root {
        foo {
            bar {
                baz {
                    quix {
                        qux {
                            quaxz {
                            }
                        }
                    }
                }
            }
        }
    }
</pre>
ò
5grvy:org.codenarc.rule.unnecessary.AddEmptyStringRuleﬁ
grvy0org.codenarc.rule.unnecessary.AddEmptyStringRuleAdd Empty String"MINOR*grvy2AddEmptyString:Ù<p>Finds empty string literals which are being added. This is an inefficient way to convert any type to a String. </p>
<p>Examples: </p>
<pre>
    // do not add empty strings to things
    def a = '' + 123
    def b = method('' + property)

    // these examples are OK and do not trigger violations
    def c = 456.toString()
    def d = property?.toString() ?: ""
</pre>
´
Hgrvy:org.codenarc.rule.unnecessary.UnnecessaryDefInMethodDeclarationRuleﬁ
grvyCorg.codenarc.rule.unnecessary.UnnecessaryDefInMethodDeclarationRule%Unnecessary Def In Method Declaration"MAJOR*grvy2!UnnecessaryDefInMethodDeclaration:π<p>If a method has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private method() {}' is redundant and can be simplified to 'private method() {}'. </p>
<p>Examples of violations: </p>
<pre>
    // def and private is redundant
    def private method1() { return 4 }

    // def and protected is redundant
    def protected method2() { return 4 }

    // def and public is redundant
    def public method3() { return 4 }

    // def and static is redundant
    def static method4() { return 4 }

    // def and type is redundant
    def Object method5() { return 4 }

    class MyClass {
        def MyClass() {}    // def is redundant
    }
</pre>
ñ
Jgrvy:org.codenarc.rule.unnecessary.UnnecessaryDefInVariableDeclarationRule«
grvyEorg.codenarc.rule.unnecessary.UnnecessaryDefInVariableDeclarationRule'Unnecessary Def In Variable Declaration"MAJOR*grvy2#UnnecessaryDefInVariableDeclaration:ú<p>If a variable has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance 'def private n = 2' is redundant and can be simplified to 'private n = 2'. </p>
<p>Examples of violations: </p>
<pre>
    // def and private is redundant
    def private string1 = 'example'

    // def and protected is redundant
    def protected string2 = 'example'

    // def and public is redundant
    def public string3 = 'example'

    // def and static is redundant
    def static string4 = 'example'

    // def and final is redundant
    def final string5 = 'example'

    // def and a type is redundant
    def String string6 = 'example'
</pre>

8grvy:org.codenarc.rule.unnecessary.UnnecessaryGetterRule≥
grvy3org.codenarc.rule.unnecessary.UnnecessaryGetterRuleUnnecessary Getter"MAJOR*grvy2UnnecessaryGetter:¡<p>Checks for explicit calls to getter/accessor methods which can, for the most part, be replaced by property access. A getter is defined as a method call that matches <code>get[A-Z]</code> but not <code>getClass()</code> or <code>get[A-Z][A-Z]</code> such as <code>getURL()</code>. Getters do not take method arguments. </p>
<p>These bits of code produce violations: </p>
<pre>
    x.getProperty()
    x.getFirst()
    x.getFirstName()
    x.getA()
</pre>
<pre>
    x.property
    x.first
    x.firstName
    x.a
    x.getURL()
    x.getClass()
    x.getProperty('key')
</pre>
Ï
9grvy:org.codenarc.rule.unnecessary.UnnecessaryGStringRuleÆ
grvy4org.codenarc.rule.unnecessary.UnnecessaryGStringRuleUnnecessary G String"MAJOR*grvy2UnnecessaryGString:∏<p>String objects should be created with single quotes, and GString objects created with double quotes. Creating normal String objects with double quotes is confusing to readers. </p>
<p>Example of violations: </p>
<pre>
    def a = "I am a string"     // violation

    // violation
    def b = """
        I am a string
    """

    def c = "I am a ' string"       // OK

    def d = """I am a ' string"""   // OK

    def e = """I am a ' string"""   // OK

    def f = "I am a \$ string"  // OK

    // OK
    def g = """
        I am a \$ string
    """

    // OK
    def h = """
        I am a $string
    """

    def i = 'i am a string'
    def j = '''i am a
        string
    '''
</pre>
ç
=grvy:org.codenarc.rule.unnecessary.UnnecessaryIfStatementRuleÀ

grvy8org.codenarc.rule.unnecessary.UnnecessaryIfStatementRuleUnnecessary If Statement"MAJOR*grvy2UnnecessaryIfStatement:…	<p>Checks for unnecessary <code>if</code> statements. The entire <code>if</code> statement, or at least the <if> or <else> block, are considered unnecessary for the four scenarios described below. </p>
<p>(1) When the <if> and <else> blocks contain only an explicit return of <code>true</code> and <code>false</code> constants. These cases can be replaced by a simple <return> statement. Examples of violations include: </p>
<pre>
    if (someExpression)         // can be replaced by: return someExpression
        return true
    else
        return false

    if (someExpression) {       // can be replaced by: return !someExpression
        return false
    } else {
        return true
    }

    if (someExpression) {       // can be replaced by: return someExpression
        return Boolean.TRUE
    } else {
        return Boolean.FALSE
    }
</pre>
<pre>
    def myMethod() {
        doSomething()
        if (someExpression)
            true
        else false
    }
</pre>
<pre>
    def myMethod() {
        doSomething()
        if (expression1) {
            return true
        }
        return false
    }
</pre>
<pre>
    def myMethod() {
        if (someExpression) { 123 }
        doSomething()
    }
</pre>
Ø
Agrvy:org.codenarc.rule.unnecessary.UnnecessaryInstanceOfCheckRuleÈ
grvy<org.codenarc.rule.unnecessary.UnnecessaryInstanceOfCheckRuleUnnecessary Instance Of Check"MAJOR*grvy2UnnecessaryInstanceOfCheck:⁄<p>This rule finds instanceof checks that cannot possibly evaluate to true. For instance, checking that <code>(!variable instanceof String)</code> will never be true because the result of a not expression is always a boolean. </p>
<p>Example of violations: </p>
<pre>
    if (!variable instanceof String) { ... }    // always false
    def x = !variable instanceof String         // always false

    if (!variable instanceof Boolean) { ... }    // always true
    def x = !variable instanceof Boolean         // always true

    // this code is OK
    if (!(variable instanceof String)) { ... }
</pre>
¯
Igrvy:org.codenarc.rule.unnecessary.UnnecessaryInstantiationToGetClassRule™
grvyDorg.codenarc.rule.unnecessary.UnnecessaryInstantiationToGetClassRule&Unnecessary Instantiation To Get Class"MAJOR*grvy2"UnnecessaryInstantiationToGetClass:Ç<p>Avoid instantiating an object just to call getClass() on it; use the .class public member instead. </p>
<pre>
    public class Foo {
     // Replace this
     Class c = new String().getClass();

     // with this:
     Class c = String.class;
    }
</pre>
£
Fgrvy:org.codenarc.rule.unnecessary.UnnecessaryIntegerInstantiationRuleÿ
grvyAorg.codenarc.rule.unnecessary.UnnecessaryIntegerInstantiationRule!Unnecessary Integer Instantiation"MAJOR*grvy2UnnecessaryIntegerInstantiation:ª<p>It is unnecessary to instantiate <code>Integer</code> objects. Instead just use the literal with the 'I' identifier to force the type, such as <code>8I</code> or <code>42i</code>. </p>
î
Cgrvy:org.codenarc.rule.unnecessary.UnnecessaryLongInstantiationRuleÃ
grvy>org.codenarc.rule.unnecessary.UnnecessaryLongInstantiationRuleUnnecessary Long Instantiation"MAJOR*grvy2UnnecessaryLongInstantiation:∏<p>It is unnecessary to instantiate <code>Long</code> objects. Instead just use the literal with the 'L' identifier to force the type, such as <code>8L</code> or <code>42L</code>. </p>
ˆ
8grvy:org.codenarc.rule.unnecessary.UnnecessaryModOneRuleπ
grvy3org.codenarc.rule.unnecessary.UnnecessaryModOneRuleUnnecessary Mod One"MAJOR*grvy2UnnecessaryModOne:∆<p>Any expression mod 1 (exp % 1) is guaranteed to always return zero. This code is probably an error, and should be either (exp & 1) or (exp % 2). </p>
<p>Examples: </p>
<pre>
    if (exp % 1) {}         // violation
    if (method() % 1) {}    // violation

    if (exp & 1) {}     // ok
    if (exp % 2) {}     // ok
</pre>
‰
Kgrvy:org.codenarc.rule.unnecessary.UnnecessaryNullCheckBeforeInstanceOfRuleî
grvyForg.codenarc.rule.unnecessary.UnnecessaryNullCheckBeforeInstanceOfRule)Unnecessary Null Check Before Instance Of"MAJOR*grvy2$UnnecessaryNullCheckBeforeInstanceOf:Â<p>There is no need to check for null before an instanceof; the instanceof keyword returns false when given a null argument. </p>
<p>Example: </p>
<pre>
    if (x != null && x instanceof MyClass) {
        // should drop the "x != null" check
    }

    if (x instanceof MyClass && x != null) {
        // should drop the "x != null" check
    }

    // should drop the "x != null" check
    (x != null && x instanceof MyClass) ? foo : bar

    if (x != null && x instanceof MyClass && x.isValid()) {
        // this is OK and causes no violation because the x.isValid() requires a non null reference
    }
</pre>
Ü
?grvy:org.codenarc.rule.unnecessary.UnnecessaryReturnKeywordRule¬
grvy:org.codenarc.rule.unnecessary.UnnecessaryReturnKeywordRuleUnnecessary Return Keyword"MAJOR*grvy2UnnecessaryReturnKeyword:∫<p>In Groovy, the <code>return</code> keyword is often optional. If a statement is the last line in a method or closure then you do not need to have the <code>return</code> keyword. </p>
Ô
Hgrvy:org.codenarc.rule.unnecessary.UnnecessarySafeNavigationOperatorRule¢
grvyCorg.codenarc.rule.unnecessary.UnnecessarySafeNavigationOperatorRule$Unnecessary Safe Navigation Operator"MAJOR*grvy2!UnnecessarySafeNavigationOperator:˛<p> Check for the <safe navigation> operator (<code>?.</code>) applied to constants and literals, or <code>this</code> or <code>super</code>, or constructor calls, all of which can never be null. </p>
<p>Example of violations: </p>
<pre>
    def myMethod() {
        "abc"?.bytes            // violation
        [1,2]?.getSize()        // violation
        [abc:123]?.name         // violation
        [:]?.toString()         // violation
        123?.class              // violation
        123.45?.getClass()      // violation
        Boolean.FALSE?.class    // violation
        Boolean.TRUE?.class     // violation
        this?.class             // violation
        super?.getClass()       // violation
        new Long(100)?.class    // violation
    }
</pre>
¢

Cgrvy:org.codenarc.rule.unnecessary.UnnecessaryTernaryExpressionRule⁄	
grvy>org.codenarc.rule.unnecessary.UnnecessaryTernaryExpressionRuleUnnecessary Ternary Expression"MAJOR*grvy2UnnecessaryTernaryExpression:∆<p>Checks for ternary expressions where the conditional expression always evaluates to a boolean and the <true> and <false> expressions are merely returning <code>true</code> and <code>false</code> constants. These cases can be replaced by a simple boolean expression. Examples of violations include: </p>
<pre>
    x==99 ? true : false                    // can be replaced by: x==99
    x && y ? true : false                   // can be replaced by: x && y
    x||y ? false : true                     // can be replaced by: !(x||y)
    x >= 1 ? true: false                    // can be replaced by: x >= 1
    x < 99 ? Boolean.TRUE : Boolean.FALSE   // can be replaced by: x < 99
    !x ? true : false                       // can be replaced by: !x
</pre>
<pre>
    x ? '123' : '123'              // can be replaced by: '123'
    x ? null : null                // can be replaced by: null
    x ? 23 : 23                    // can be replaced by: 23
    x ? MAX_VALUE : MAX_VALUE      // can be replaced by: MAX_VALUE
    ready ? minValue : minValue    // can be replaced by: minValue
</pre>
«
-grvy:org.codenarc.rule.unused.UnusedArrayRuleï
grvy(org.codenarc.rule.unused.UnusedArrayRuleUnused Array"MINOR*grvy2UnusedArray:∫<p>Checks for array allocations that are not assigned or used, unless it is the last statement within a block (because it may be the intentional return value). Examples include: </p>
<pre>
    int myMethod() {
        new String[3]               // unused
        return -1
    }

    String[] myMethod() {
        new String[3]               // OK (last statement in block)
    }

    def closure = {
        doStuff()
        new Date[3]                 // unused
        doOtherStuff()
    }

    def closure = { new Date[3] }   // OK (last statement in block)
</pre>
ˆ
.grvy:org.codenarc.rule.unused.UnusedObjectRule√
grvy)org.codenarc.rule.unused.UnusedObjectRuleUnused Object"MINOR*grvy2UnusedObject:Â<p>Checks for object allocations that are not assigned or used, unless it is the last statement within a block (because it may be the intentional return value). Examples include: </p>
<p>By default, this rule does not analyze test files. This rule sets the default value of the <doNotApplyToFilesMatching> property to ignore file names ending in 'Test.groovy', 'Tests.groovy' or 'TestCase.groovy'. Invoking constructors without using the result is a common pattern in tests. </p>
<pre>
    int myMethod() {
        new BigDecimal("23.45")     // unused
        return -1
    }

    BigDecimal myMethod() {
        new BigDecimal("23.45")     // OK (last statement in block)
    }

    def closure = {
        doStuff()
        new Date()                  // unused
        doOtherStuff()
    }

    def closure = { new Date() }    // OK (last statement in block)
</pre>
Û
>grvy:org.codenarc.rule.unused.UnusedPrivateMethodParameterRule∞
grvy9org.codenarc.rule.unused.UnusedPrivateMethodParameterRuleUnused Private Method Parameter"MINOR*grvy2UnusedPrivateMethodParameter:†<p>Checks for parameters to private methods that are not referenced within the method body. Note that the <code>private</code> modifier is not currently "respected" by Groovy code (i.e., Groovy can access <code>private</code> members within other classes). </p>
<p>Known limitations: </p>
ñ
;grvy:org.codenarc.rule.generic.IllegalClassMemberRule.fixed÷
grvy6org.codenarc.rule.generic.IllegalClassMemberRule.fixedIllegal Class Member"MINOR*grvy2IllegalClassMember:ﬁ<p>Checks for classes containing fields/properties/methods matching configured illegal member modifiers or not matching any of the configured allowed member modifiers. </p>
<p>Modifiers for fields and methods include: </p>
ò
6grvy:org.codenarc.rule.formatting.SpaceAfterSwitchRule›
grvy1org.codenarc.rule.formatting.SpaceAfterSwitchRuleSpace After Switch"MAJOR*grvy2SpaceAfterSwitch:Ó<p>Check that there is exactly one space (blank) after the <code>switch</code> keyword and before the opening parenthesis. </p>
<p>Examples of violations: </p>
<pre>
    switch(x) {                                 // violation
        case 1: println 'one'
    }
    switch  (x) {                               // violation
        case 1: println 'one'
    }
</pre>
√
5grvy:org.codenarc.rule.formatting.SpaceAfterCatchRuleâ
grvy0org.codenarc.rule.formatting.SpaceAfterCatchRuleSpace After Catch"MAJOR*grvy2SpaceAfterCatch:ù<p>Check that there is exactly one space (blank) after the <code>catch</code> keyword and before the opening parenthesis. </p>
<p>Examples of violations: </p>
<pre>
    try { } catch(Exception e) { }          // violation
    try { } catch  (Exception e) { }        // violation
</pre>
£
<grvy:org.codenarc.rule.logging.LoggingSwallowsStacktraceRule‚
grvy7org.codenarc.rule.logging.LoggingSwallowsStacktraceRuleLogging Swallows Stacktrace"MINOR*grvy2LoggingSwallowsStacktrace:€<p>If you are logging an exception then the proper API is to call error(Object, Throwable), which will log the message and the exception stack trace. If you call error(Object) then the stacktrace may not be logged. </p>
ï
2grvy:org.codenarc.rule.dry.DuplicateMapLiteralRuleﬁ
grvy-org.codenarc.rule.dry.DuplicateMapLiteralRuleDuplicate Map Literal"MAJOR*grvy2DuplicateMapLiteral:Ì
<p> This rule checks for duplicate <Map> literals within the current class. This rule only checks for <Map>s where the keys and values are all constants or literals. </p>
<p>Code containing duplicate <Map> literals can usually be improved by declaring the <Map> as a constant field. </p>
<p>By default, the rule does not analyze test files. This rule sets the default value of the <doNotApplyToFilesMatching> property to ignore file names ending in 'Test.groovy', 'Tests.groovy' or 'TestCase.groovy'. </p>
<p>Examples of violations: </p>
<pre>
      def var1 = [a:1, b:null, c:Boolean.FALSE, d:'x', e:true]
      def var2 = [a:1, b:null, c:Boolean.FALSE, d:'x', e:true]      // violation

      def var1 = [a:1, b:[x:3,y:4]]
      def var2 = [a:1, b:[x:3,y:4]]     // violation

      def var1 = [a:1, b:[3,4]]
      def var2 = [a:1, b:[3,4]]     // violation

      def var1 = [null:1, 'b':2, (Boolean.FALSE):3, (4):4, (true):5]
      def var2 = [null:1, 'b':2, (Boolean.FALSE):3, (4):4, (true):5]    // violation
</pre>
<pre>
    def name
    def var1 = [(name):1, b:1, c:1]
    def var2 = [(name):1, b:1, c:1]   // not a violation; name is a variable

    def var1 = [a:1, b:['x', name]]
    def var2 = [a:1, b:['x', name]]   // not a violation; name is a variable

    def var1 = [a:7+5]
    def var2 = [a:7+5]      // not a violation; contains a non-constant/literal expression
</pre>
¸
9grvy:org.codenarc.rule.basic.EmptyInstanceInitializerRuleæ
grvy4org.codenarc.rule.basic.EmptyInstanceInitializerRuleEmpty Instance Initializer"MINOR*grvy2EmptyInstanceInitializer:º<p>An empty class instance initializer was found. It is safe to remove it. Example: </p>
<pre>
    class MyClass {
        { }     // empty instance initializer, not a closure
    }
</pre>
˜
@grvy:org.codenarc.rule.design.PrivateFieldCouldBeFinalRule.fixed≤
grvy;org.codenarc.rule.design.PrivateFieldCouldBeFinalRule.fixedPrivate Field Could Be Final"MAJOR*grvy2PrivateFieldCouldBeFinal:ß<p>This rule finds <code>private</code> fields that are only set within a <constructor> or <field initializer>. Such fields can safely be made <code>final</code>. </p>
µ
=grvy:org.codenarc.rule.groovyism.ExplicitCallToPlusMethodRuleÛ
grvy8org.codenarc.rule.groovyism.ExplicitCallToPlusMethodRuleExplicit Call To Plus Method"MINOR*grvy2ExplicitCallToPlusMethod:Î<p>This rule detects when the <code>plus(Object)</code> method is called directly in code instead of using the <code>+</code> operator. A groovier way to express this: <code>a.plus(b)</code> is this: <code>a + b</code>. This rule can be configured to ignore <code>this.plus(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>plus(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.plus(Object)</code>. </p>
«
3grvy:org.codenarc.rule.basic.ComparisonWithSelfRuleè
grvy.org.codenarc.rule.basic.ComparisonWithSelfRuleComparison With Self"MINOR*grvy2ComparisonWithSelf:ü<p>Checks for expressions where a <comparison operator> or <code>equals()</code> or <code>compareTo()</code> is used to compare a variable to itself, e.g.: <code>x == x, x != x, x \<=\> x, x \< x, x \>= x, x.equals(x) or x.compareTo(x)</code>, where <code>x</code> is a variable. </p>
<p>Here are examples of code that produces a violation: </p>
<pre>
    if (x == x) { }                 // violation
    if (x != x) { }                 // violation
    while (x < x) { }               // violation
    if (x <= x) { }                 // violation
    while (x > x) { }               // violation
    if (x >= x) { }                 // violation
    def c = (x <=> x) { }           // violation
    println isReady = x.equals(x)   // violation
    println x.compareTo(x)          // violation
</pre>
±
<grvy:org.codenarc.rule.unnecessary.UnnecessaryCatchBlockRule
grvy7org.codenarc.rule.unnecessary.UnnecessaryCatchBlockRuleUnnecessary Catch Block"MAJOR*grvy2UnnecessaryCatchBlock:Ò<p>Violations are triggered when a <catch> block does nothing but throw the original exception. In this scenario there is usually no need for a <catch> block, just let the exception be thrown from the original code. This condition frequently occurs when catching an exception for debugging purposes but then forgetting to take the <code>catch</code> statement out. </p>
Å	
1grvy:org.codenarc.rule.naming.FieldNameRule.fixedÀ
grvy,org.codenarc.rule.naming.FieldNameRule.fixed
Field Name"MINOR*grvy2	FieldName:<p>Verifies that the name of each field matches a regular expression. By default it checks that fields that are not <static final> have field names that start with a lowercase letter and contains only letters or numbers. By default, <static final> field names start with an uppercase letter and contain only uppercase letters, numbers and underscores. </p>
<p><code>NOTE:</code> This rule checks only regular <fields> of a class, not <properties>. In Groovy, <properties> are fields declared with no access modifier (public, protected, private). Thus, this rule only checks fields that specify an access modifier. For naming of <properties>, see <code>PropertyNameRule</code>. </p>
<p>The order of precedence for the regular expression properties is: <code>staticFinalRegex</code>, <code>finalRegex</code>, <code>staticRegex</code> and finally <code>regex</code>. In other words, the first regex in that list matching the modifiers for the field is the one that is applied for the field name validation. </p>
¿
>grvy:org.codenarc.rule.groovyism.ExplicitCallToPowerMethodRule˝
grvy9org.codenarc.rule.groovyism.ExplicitCallToPowerMethodRuleExplicit Call To Power Method"MINOR*grvy2ExplicitCallToPowerMethod:Ú<p>This rule detects when the <code>power(Object)</code> method is called directly in code instead of using the <code>**</code> operator. A groovier way to express this: <code>a.power(b)</code> is this: <code>a ** b</code>. This rule can be configured to ignore <code>this.power(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>power(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.power(Object)</code>. </p>
’
9grvy:org.codenarc.rule.convention.TernaryCouldBeElvisRuleó
grvy4org.codenarc.rule.convention.TernaryCouldBeElvisRuleTernary Could Be Elvis"MAJOR*grvy2TernaryCouldBeElvis:û<p>Checks for ternary expressions where the <boolean> and <true> expressions are the same. These can be simplified to an <Elvis> expression. </p>
<p>Example of violations: </p>
<pre>
    x ? x : false               // violation; can simplify to x ?: false

    foo() ? foo() : bar()       // violation; can simplify to foo() ?: bar()
    foo(1) ? foo(1) : 123       // violation; can simplify to foo(1) ?: 123

    (x == y) ? same : diff      // OK
    x ? y : z                   // OK
    x ? x + 1 : x + 2           // OK
    x ? 1 : 0                   // OK
    x ? !x : x                  // OK
    !x ? x : null               // OK

    foo() ? bar() : 123         // OK
    foo() ? foo(99) : 123       // OK
    foo(x) ? foo() : 123        // OK
    foo(1) ? foo(2) : 123       // OK
</pre>
°	
;grvy:org.codenarc.rule.unnecessary.UnnecessarySemicolonRule·
grvy6org.codenarc.rule.unnecessary.UnnecessarySemicolonRuleUnnecessary Semicolon"MAJOR*grvy2UnnecessarySemicolon:Ê<p>Semicolons as line terminators are not required in Groovy: remove them. Do not use a semicolon as a replacement for empty braces on for and while loops; this is a confusing practice. </p>
<p>The rule contains a String property called 'excludePattern'. Any source code line matching this pattern will not trigger a violation. The default value is '\\s?\\*.*|/\\*.*|.*//.*|.*\\*/.*' This is to filter out comments. Any source line that even looks like it is a comment is ignored. </p>
<p>\s?\*.*   ==  whitespace plus star character plus anything /\*.*    == any line that contains the /* sequence .*//.*   == any line that contains the // sequence .*\*/.*  == any line that contains the */ sequence </p>
<p>Example of violations: </p>
<pre>
    package my.company.server;  // violation

    import java.lang.String;    // violation

    println(value) ;             // violation

    for (def x : list);         // violation

    // this code is OK
    println(value); println (otherValue)
</pre>
“
;grvy:org.codenarc.rule.exceptions.ThrowRuntimeExceptionRuleí
grvy6org.codenarc.rule.exceptions.ThrowRuntimeExceptionRuleThrow Runtime Exception"MINOR*grvy2ThrowRuntimeException:î<p>Checks for throwing an instance of <code>java.lang.RuntimeException</code>. Throw an instance of a more specific exception subclass instead. </p>
Æ
4grvy:org.codenarc.rule.exceptions.ThrowExceptionRuleı
grvy/org.codenarc.rule.exceptions.ThrowExceptionRuleThrow Exception"MINOR*grvy2ThrowException:ç<p>Checks for throwing an instance of <code>java.lang.Exception</code>. Throw an instance of a more specific exception subclass instead. </p>
»
Tgrvy:org.codenarc.rule.serialization.SerializableClassMustDefineSerialVersionUIDRuleÔ
grvyOorg.codenarc.rule.serialization.SerializableClassMustDefineSerialVersionUIDRule1Serializable Class Must Define Serial Version UID"MINOR*grvy2+SerializableClassMustDefineSerialVersionUID:®<p>Classes that implement <code>Serializable</code> should define a <code>serialVersionUID</code>. Deserialization uses this number to ensure that a loaded class corresponds exactly to a serialized object. If you don't define serialVersionUID, the system will make one by hashing most of your class's features. Then if you change anything, the UID will change and Java won't let you reload old data. </p>
<p>An example of a missing serialVersionUID: </p>
<pre>
    class MyClass imlements Serializable {
        // missing serialVersionUID
    }
</pre>
Â
+grvy:org.codenarc.rule.basic.EmptyClassRuleµ
grvy&org.codenarc.rule.basic.EmptyClassRuleEmpty Class"MINOR*grvy2
EmptyClass:ﬁ<p>Reports classes without methods, fields or properties. Why would you need a class like this? </p>
<p>This rule ignores interfaces, enums, anonymous inner classes, subclasses (extends), and classes with annotations. </p>
ò	
1grvy:org.codenarc.rule.basic.EqualsOverloadedRule‚
grvy,org.codenarc.rule.basic.EqualsOverloadedRuleEquals Overloaded"MINOR*grvy2EqualsOverloaded:˘<p>The class has an <code>equals</code> method, but the parameter of the method is not of type <code>Object</code>. It is not overriding <code>equals</code> but instead overloading it. </p>
<p>Example of violations: </p>
<pre>
    class Object1 {
        //parameter should be Object not String
        boolean equals(String other) { true }
    }

    class Object2 {
        // Overloading equals() with 2 parameters is just mean
        boolean equals(Object other, String other2) { true }
    }

    class Object3 {
        // a no-arg equals()? What is this supposed to do?
        boolean equals() { true }
    }


    // all of these are OK and do not cause violations
    class Object4 {
        boolean equals(Object other) { true }
    }

    @SuppressWarnings('EqualsOverloaded')
    class Object5 {
        boolean equals(String other) { true }
    }

    class Object6 {
        boolean equals(java.lang.Object other) { true }
    }

    class Object7 {
        boolean equals(other) { true }
    }
</pre>
…
Xgrvy:org.codenarc.rule.formatting.ClosureStatementOnOpeningLineOfMultipleLineClosureRuleÏ
grvySorg.codenarc.rule.formatting.ClosureStatementOnOpeningLineOfMultipleLineClosureRule:Closure Statement On Opening Line Of Multiple Line Closure"MAJOR*grvy22ClosureStatementOnOpeningLineOfMultipleLineClosure:ë<p>Checks for closure logic on first line (after <code>-\</code</code>) for a multi-line closure. That breaks the symmetry of indentation (if the subsequent statements are indented normally), and that first statement can be easily missed when reading the code. </p>
<p>Example of violations: </p>
<pre>
    def closure = { name -> println name
        addToCounts()
        println ‚Äúdone‚Äù }
</pre>
ö
6grvy:org.codenarc.rule.junit.JUnitUnnecessarySetUpRuleﬂ
grvy1org.codenarc.rule.junit.JUnitUnnecessarySetUpRuleJUnit Unnecessary Set Up"MAJOR*grvy2JUnitUnnecessarySetUp:Â<p>Rule that checks checks for JUnit <code>setUp()</code> methods that contain only a call to <code>super.setUp()</code>. The method is then unnecessary. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
<p>Here is an example of a violation: </p>
<pre>
    class MyTest extends TestCase {
        void setUp() {              // violation
            super.setUp()
        }
    }
</pre>
´
<grvy:org.codenarc.rule.groovyism.ExplicitCallToDivMethodRuleÍ
grvy7org.codenarc.rule.groovyism.ExplicitCallToDivMethodRuleExplicit Call To Div Method"MINOR*grvy2ExplicitCallToDivMethod:Â<p>This rule detects when the <code>div(Object)</code> method is called directly in code instead of using the <code>/</code> operator. A groovier way to express this: <code>a.div(b)</code> is this: <code>a / b</code>. This rule can be configured to ignore <code>div.xor(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>div(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.div(Object)</code>. </p>
∏
9grvy:org.codenarc.rule.serialization.SerialVersionUIDRule˙
grvy4org.codenarc.rule.serialization.SerialVersionUIDRuleSerial Version UID"MINOR*grvy2SerialVersionUID:à<p> A <code>serialVersionUID</code> is normally intended to be used with Serialization. It needs to be of type <code>long</code>, <code>static</code>, and <code>final</code>. Also, it should be declared <code>private</code>. Providing no modifier creates a <Property> and Groovy generates a <getter>, which is probably not intended. </p>
<p>From API javadoc for <code>java.io.Serializable</code>: <It is also strongly advised that explicit serialVersionUID declarations use the private modifier where possible, since such declarations apply only to the immediately declaring class--serialVersionUID fields are not useful as inherited members.> </p>
ﬂ
7grvy:org.codenarc.rule.basic.DuplicateCaseStatementRule£
grvy2org.codenarc.rule.basic.DuplicateCaseStatementRuleDuplicate Case Statement"MINOR*grvy2DuplicateCaseStatement:ß<p>Check for duplicate <code>case</code> statements in a <code>switch</code> block, such as two equal integers or strings. Here are some examples of code that produces violations: </p>
<pre>
    switch( 0 ) {
        case 1: break;
        case 2: break;
        case 2: break;          // violation
    }
    
    switch( "test" ) {
        case "$a": break;
        case "$a": break;       // ok; only flags constant values (not GStrings)
        case "ab": break;
        case "ab": break;       // violation
        case "abc": break;
    }
</pre>
≠
,grvy:org.codenarc.rule.junit.ChainedTestRule¸
grvy'org.codenarc.rule.junit.ChainedTestRuleChained Test"MINOR*grvy2ChainedTest:¢<p>A test method that invokes another test method is a chained test; the methods are dependent on one another. Tests should be isolated, and not be dependent on one another. </p>
<p>Example of violations: </p>
<pre>
    class MyTest extends GroovyTestCase {
        public void testFoo() {

            // violations, calls test method on self
            5.times { testBar() }
            5.times { this.testBar() }

            // OK, no violation: one arg method is not actually a test method
            5.times { testBar(it) }
        }

        private static void assertSomething() {
            testBar() // violation, even if in helper method
            this.testBar() // violation, even if in helper method
        }

        public void testBar() {
            // ...
        }
    }
</pre>
¿
Bgrvy:org.codenarc.rule.formatting.MissingBlankLineAfterImportsRule˘
grvy=org.codenarc.rule.formatting.MissingBlankLineAfterImportsRule Missing Blank Line After Imports"MAJOR*grvy2MissingBlankLineAfterImports:‰<p>Makes sure there is a blank line after the imports of a source code file. </p>
<p>Example of violation: </p>
<pre>
    import org.apache.commons.lang.StringUtils
    class MyClass { }                       // violation
</pre>
‚
?grvy:org.codenarc.rule.convention.IfStatementCouldBeTernaryRuleû
grvy:org.codenarc.rule.convention.IfStatementCouldBeTernaryRuleIf Statement Could Be Ternary"MINOR*grvy2IfStatementCouldBeTernary:<p>Checks for: </p>
¨
8grvy:org.codenarc.rule.imports.ImportFromSunPackagesRuleÔ
grvy3org.codenarc.rule.imports.ImportFromSunPackagesRuleImport From Sun Packages"MINOR*grvy2ImportFromSunPackages:Û<p>Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change.</p>
<p>Example of violations: </p>
<pre>
    import sun.misc.foo
    import sun.misc.foo as Foo

    public class MyClass{}
</pre>
Ì
@grvy:org.codenarc.rule.unnecessary.UnnecessarySelfAssignmentRule®
grvy;org.codenarc.rule.unnecessary.UnnecessarySelfAssignmentRuleUnnecessary Self Assignment"MAJOR*grvy2UnnecessarySelfAssignment:ù<p>Method contains a pointless self-assignment to a variable or property. Either the code is pointless or the equals()/get() method has been overridden to have a side effect, which is a terrible way to code getters and violates the contract of equals(). </p>
<p>Examples: </p>
<pre>
    x = x               // violation
    def method(y) {
        y = y           // violation
    }
    a.b.c = a.b.c       // violation

    x = y               // acceptable
    a.b = a.zz          // acceptable
    a.b = a().b         // acceptable
</pre>
à
Cgrvy:org.codenarc.rule.unnecessary.UnnecessaryTransientModifierRule¿
grvy>org.codenarc.rule.unnecessary.UnnecessaryTransientModifierRuleUnnecessary Transient Modifier"MAJOR*grvy2UnnecessaryTransientModifier:¨<p>The field is marked as transient, but the class isn't Serializable, so marking it as transient has no effect. This may be leftover marking from a previous version of the code in which the class was transient, or it may indicate a misunderstanding of how serialization works. </p>
<p>Some Java frameworks change the semantics of the transient keyword. For instance, when using Terracotta the transient keyword may have slightly different semantics. You may need to turn this rule off depending on which Java frameworks are in use. </p>
 Examples: </p>
<pre>
    class MyClass {
        // class not serializable, violation occurs
        transient String property
    }

    class MySerializableClass implements Serializable {
        // OK, class is serializable
        transient String property
    }
</pre>
µ
Egrvy:org.codenarc.rule.junit.JUnitAssertEqualsConstantActualValueRuleÎ
grvy@org.codenarc.rule.junit.JUnitAssertEqualsConstantActualValueRule)JUnit Assert Equals Constant Actual Value"MINOR*grvy2$JUnitAssertEqualsConstantActualValue:¬<p>Reports usages of <code>org.junit.Assert.assertEquals([message,] expected, actual)</code> where the <code>actual</code> parameter is a constant or a literal. Most likely it was intended to be the <code>expected</code> value. </p>
<p>NOTE: This is a <a href="http://codenarc.sourceforge.net/codenarc-enhanced-classpath-rules.html">CodeNarc Enhanced Classpath Rule</a>. It requires <code>CodeNarc</code> to have the application classes being analyzed, as well as any referenced classes, on the classpath. </p>
<p>Example of violations: </p>
<pre>
    assertEquals(result, 2)
    assertEquals("Message", result, 2)
    assertEquals(result, 2.3d, 0.5d)
    assertEquals("Message", result, 2.3d, 0.5d)
</pre>
∂
<grvy:org.codenarc.rule.concurrency.NestedSynchronizationRuleı
grvy7org.codenarc.rule.concurrency.NestedSynchronizationRuleNested Synchronization"MINOR*grvy2NestedSynchronization:˜<p>This rule reports occurrences of nested <code>synchronized</code> statements. </p>
<p>Nested <code>synchronized</code> statements should be avoided. Nested <code>synchronized</code> statements are either useless (if the lock objects are identical) or prone to deadlock. </p>
<p>Note that a <closure> or an <anonymous inner class> carries its own context (scope). A <code>synchronized</code> statement within a <closure> or an <anonymous inner class> defined within an outer <code>synchronized</code> statement does not cause a violation (though nested <code>synchronized</code> statements within either of those will). </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        synchronized(this) {
            // do something ...
            synchronized(this) {
                // do something else ...
            }
        }
    }
</pre>
†
?grvy:org.codenarc.rule.convention.LongLiteralWithLowerCaseLRule‹
grvy:org.codenarc.rule.convention.LongLiteralWithLowerCaseLRuleLong Literal With Lower Case L"MINOR*grvy2LongLiteralWithLowerCaseL:œ<p>In Java and Groovy, you can specify long literals with the L or l character, for instance 55L or 24l. It is best practice to always use an uppercase L and never a lowercase l. This is because 11l rendered in some fonts may look like 111 instead of 11L. </p>
<p>Example of violations: </p>
<pre>
    def x = 1l
    def y = 55l
</pre>
î
7grvy:org.codenarc.rule.design.CloseWithoutCloseableRuleÿ
grvy2org.codenarc.rule.design.CloseWithoutCloseableRuleClose Without Closeable"MINOR*grvy2CloseWithoutCloseable:_<p>If a class defines a "void close()" then that class should implement java.io.Closeable. </p>
∏
;grvy:org.codenarc.rule.exceptions.ExceptionExtendsErrorRule¯
grvy6org.codenarc.rule.exceptions.ExceptionExtendsErrorRuleException Extends Error"MINOR*grvy2ExceptionExtendsError:˙<p>Errors are system exceptions. Do not extend them. </p>
<p>Examples: </p>
<pre>
    class MyError extends Error { }  // violation
    class MyError extends java.lang.Error { }  // violation

    class MyException extends Exception { }  // OK
</pre>
¸
+grvy:org.codenarc.rule.naming.ClassNameRuleÃ
grvy&org.codenarc.rule.naming.ClassNameRule
Class Name"MINOR*grvy2	ClassName:˜<p>Verifies that the name of a class matches a regular expression. By default it checks that the class name starts with an uppercase letter and is followed by zero or more word characters (letters, numbers or underscores) or dollar signs ($). </p>
Ë

Ggrvy:org.codenarc.rule.serialization.EnumCustomSerializationIgnoredRuleú

grvyBorg.codenarc.rule.serialization.EnumCustomSerializationIgnoredRule!Enum Custom Serialization Ignored"MINOR*grvy2EnumCustomSerializationIgnored:ˇ<p>Checks for enums that define <code>writeObject()</code> or <code>writeReplace()</code> methods, or declare <code>serialPersistentFields</code> or <code>serialVersionUID</code> fields, all of which are ignored for enums. </p>
<p>From the javadoc for <code>ObjectOutputStream</code>: </p>
<p><The process by which enum constants are serialized cannot be customized; any class-specific writeObject and writeReplace methods defined by enum types are ignored during serialization. Similarly, any serialPersistentFields or serialVersionUID field declarations are also ignored--all enum types have a fixed serialVersionUID of 0L.> </p>
<p>Example of violations: </p>
<pre>
    enum MyEnum {
        ONE, TWO, THREE
        private static final long serialVersionUID = 1234567L               // violation
        private static final ObjectStreamField[] serialPersistentFields =   // violation
            { new ObjectStreamField("name", String.class) }
        String name;

        Object writeReplace() throws ObjectStreamException { .. }      // violation
        private void writeObject(ObjectOutputStream stream) { .. }     // violation
    }
</pre>
’
2grvy:org.codenarc.rule.security.InsecureRandomRuleû
grvy-org.codenarc.rule.security.InsecureRandomRuleInsecure Random"MINOR*grvy2InsecureRandom:∏<p>Reports usages of <code>java.util.Random</code>, which can produce very predictable results. If two instances of Random are created with the same seed and sequence of method calls, they will generate the exact same results. Use <code>java.security.SecureRandom</code> instead, which provides a cryptographically strong random number generator. SecureRandom uses PRNG, which means they are using a deterministic algorithm to produce a pseudo-random number from a true random seed. SecureRandom produces non-deterministic output. </p>
<p>By default, this rule ignores test classes are ignored. </p>
<p>For more information see: <a>http://www.klocwork.com/products/documentation/current/Checkers:SV.RANDOM</a> </p>
<p>Example of violations: </p>
<pre>
     def r1 = new Random()
     def r2 = new java.util.Random()
     Math.random()
     java.lang.Math.random()

     // this is OK
     new java.security.SecureRandom()
     new SecureRandom()
</pre>
ı
7grvy:org.codenarc.rule.unused.UnusedMethodParameterRuleπ
grvy2org.codenarc.rule.unused.UnusedMethodParameterRuleUnused Method Parameter"MINOR*grvy2UnusedMethodParameter:ø<p>This rule finds instances of method parameters not being used. It does not analyze private methods (that is done by the UnusedPrivateMethodParameter rule) or methods marked @Override. </p>
¯
0grvy:org.codenarc.rule.basic.EmptyCatchBlockRule√
grvy+org.codenarc.rule.basic.EmptyCatchBlockRuleEmpty Catch Block"MINOR*grvy2EmptyCatchBlock:‹<p>Checks for empty <catch> blocks. In most cases, exceptions should not be caught and ignored (swallowed). </p>
<p>The rule has a property named <code>ignoreRegex</code> that defaults to the value 'ignore|ignored'. If the name of the exception matches this regex then no violations are produced. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        try {
            doSomething
        } catch(MyException e) {                //violation
            // should do something here
        }
    }

    def myMethod() {
        try {
            doSomething
        } catch(MyException ignored) {
            //no violations because the parameter name is ignored
        }
    }
</pre>
ı
Dgrvy:org.codenarc.rule.exceptions.CatchIndexOutOfBoundsExceptionRule¨
grvy?org.codenarc.rule.exceptions.CatchIndexOutOfBoundsExceptionRule#Catch Index Out Of Bounds Exception"MINOR*grvy2CatchIndexOutOfBoundsException:ê<p>Checks for catching a <code>IndexOutOfBoundsException</code>. Catching <code>IndexOutOfBoundsException</code> should be avoided in the first place by checking for a valid index before accessing an indexed element. Catching the exception may mask underlying errors. </p>
ÿ
5grvy:org.codenarc.rule.naming.ConfusingMethodNameRuleû
grvy0org.codenarc.rule.naming.ConfusingMethodNameRuleConfusing Method Name"MINOR*grvy2ConfusingMethodName:™<p>Checks for very confusing method names. The referenced methods have names that differ only by capitalization. This is very confusing because if the capitalization were identical then one of the methods would override the other. </p>
<p>Also, violations are triggered when methods and fields have very similar names. </p>
<pre>
    class MyClass {
        int total
        int total() {
            1
        }
    }
</pre>
§
9grvy:org.codenarc.rule.junit.JUnitPublicNonTestMethodRuleÊ
grvy4org.codenarc.rule.junit.JUnitPublicNonTestMethodRuleJUnit Public Non Test Method"MINOR*grvy2JUnitPublicNonTestMethod:‚<p>Rule that checks if a JUnit test class contains public methods other than standard test methods, JUnit framework methods or methods with JUnit annotations. </p>
<p>The following public methods are ignored by this rule: </p>
ö
=grvy:org.codenarc.rule.formatting.SpaceBeforeClosingBraceRuleÿ
grvy8org.codenarc.rule.formatting.SpaceBeforeClosingBraceRuleSpace Before Closing Brace"MAJOR*grvy2SpaceBeforeClosingBrace:”<p>Check that there is at least one space (blank) or whitespace before each closing brace ("\}") for method/class/interface declarations, closure expressions and block statements. </p>
<p>Known limitations: </p>
£
*grvy:org.codenarc.rule.logging.PrintlnRuleÙ
grvy%org.codenarc.rule.logging.PrintlnRulePrintln"MINOR*grvy2Println:•<p>Checks for calls to <code>this.print()</code>, <code>this.println()</code> or <code>this.printf()</code>. Consider using a standard logging facility instead. </p>
 
Cgrvy:org.codenarc.rule.junit.UseAssertNullInsteadOfAssertEqualsRuleÇ
grvy>org.codenarc.rule.junit.UseAssertNullInsteadOfAssertEqualsRule(Use Assert Null Instead Of Assert Equals"MAJOR*grvy2"UseAssertNullInsteadOfAssertEquals:ﬁ<p>This rule detects JUnit calling <code>assertEquals</code> where the first or second parameter is <code>null</code>. These assertion should be made against the <code>assertNull</code> method instead. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
Â
Cgrvy:org.codenarc.rule.groovyism.ExplicitCallToRightShiftMethodRuleù
grvy>org.codenarc.rule.groovyism.ExplicitCallToRightShiftMethodRule#Explicit Call To Right Shift Method"MINOR*grvy2ExplicitCallToRightShiftMethod:Ç<p>This rule detects when the <code>rightShift(Object)</code> method is called directly in code instead of using the \>\> operator. A groovier way to express this: <code>a.rightShift(b)</code> is this: <code>a \>\> b</code>. This rule can be configured to ignore <code>this.rightShift(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>rightShift(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.rightShift(Object)</code>. </p>
‘
:grvy:org.codenarc.rule.security.UnsafeArrayDeclarationRuleï
grvy5org.codenarc.rule.security.UnsafeArrayDeclarationRuleUnsafe Array Declaration"MINOR*grvy2UnsafeArrayDeclaration:ñ<p>Triggers a violation when an array is declared public, final, and static. </p>
<p>In most cases an array declared public, final and static is a bug. Because arrays are mutable objects, the final constraint requires that the array object itself be assigned only once, but makes no guarantees about the values of the array elements. Since the array is public, a malicious program can change the values stored in the array. In most situations the array should be made private. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        public static final String[] myArray = init()
        public static final def myArray = [] as String[]
    }
</pre>
ø
9grvy:org.codenarc.rule.basic.ComparisonOfTwoConstantsRuleÅ
grvy4org.codenarc.rule.basic.ComparisonOfTwoConstantsRuleComparison Of Two Constants"MINOR*grvy2ComparisonOfTwoConstants:˛<p>Checks for expressions where a <comparison operator> or <code>equals()</code> or <code>compareTo()</code> is used to compare two constants to each other or two literals that contain only constant values. </p>
<p>Here are examples of code that produces a violation: </p>
<pre>
    23 == 67                    // violation
    Boolean.FALSE != false      // violation
    23 < 88                     // violation
    0.17 <= 0.99                // violation
    "abc" > "ddd"               // violation
    [Boolean.FALSE] >= [27]     // violation
    [a:1] <=> [a:2]             // violation

    [1,2].equals([3,4])                                     // violation
    [a:123, b:true].equals(['a':222, b:Boolean.FALSE])      // violation

    [a:123, b:456].compareTo([a:222, b:567]                 // violation
    [a:false, b:true].compareTo(['a':34.5, b:Boolean.TRUE]  // violation
</pre>
„
4grvy:org.codenarc.rule.convention.InvertedIfElseRule™
grvy/org.codenarc.rule.convention.InvertedIfElseRuleInverted If Else"MAJOR*grvy2InvertedIfElse:¡<p>An inverted <if-else> statement is one in which there is a single <code>if</code> statement with a single <code>else</code> branch and the boolean test of the <code>if</code> is negated. For instance <code>if (!x) false else true</code>. It is usually clearer to write this as <code>if (x) true else false</code>. </p>
§
@grvy:org.codenarc.rule.unnecessary.UnnecessaryCollectionCallRuleﬂ
grvy;org.codenarc.rule.unnecessary.UnnecessaryCollectionCallRuleUnnecessary Collection Call"MAJOR*grvy2UnnecessaryCollectionCall:‘<p>Checks for useless calls to collections. For any collection <code>c</code>, calling <code>c.containsAll(c)</code> should always be <code>true</code>, and <code>c.retainAll(c)</code> should have no effect. </p>
±	
:grvy:org.codenarc.rule.size.CyclomaticComplexityRule.fixedÚ
grvy5org.codenarc.rule.size.CyclomaticComplexityRule.fixedCyclomatic Complexity"MINOR*grvy2CyclomaticComplexity:¯<p>Calculates the <Cyclomatic Complexity> for methods/classes and checks against configured threshold values. </p>
<p>The <code>maxMethodComplexity</code> property holds the threshold value for the cyclomatic complexity value for each method. If this value is non-zero, a method with a cyclomatic complexity value greater than this value is considered a violation. </p>
<p>The <code>maxClassAverageMethodComplexity</code> property holds the threshold value for the average cyclomatic complexity value for each class. If this value is non-zero, a class with an average cyclomatic complexity value greater than this value is considered a violation. </p>
<p>This rule treats "closure fields" as methods. If a class field is initialized to a Closure (ClosureExpression), then that Closure is analyzed and checked just like a method. </p>
 The <cyclomatic complexity> value is calculated as follows: </p>
<p><Start with a initial (default) value of one (1). Add one (1) for each occurrence of each of the following:> </p>
∫
2grvy:org.codenarc.rule.formatting.ClassJavadocRuleÉ
grvy-org.codenarc.rule.formatting.ClassJavadocRuleClass Javadoc"MINOR*grvy2ClassJavadoc:°<p>Makes sure each class and interface definition is preceded by javadoc. Enum definitions are not checked, due to strange behavior in the Groovy AST. By default, only the main class in a file is checked for Javadoc. The main class is defined as the class that has the same name as the source file, for instance MyClass is the main class in MyClass.groovy but the class MyOtherClass defined in the same source file is not the main class. To check all the classes in the file set the rule property <code>applyToNonMainClasses</code> to true. </p>
¶
2grvy:org.codenarc.rule.design.LocaleSetDefaultRuleÔ
grvy-org.codenarc.rule.design.LocaleSetDefaultRuleLocale Set Default"MINOR*grvy2LocaleSetDefault:Ñ<p>Checks for calls to <code>Locale.setDefault()</code>, or <code>Locale.default = Xxx</code>, which sets the Locale across the entire JVM. That can impact other applications on the same web server, for instance. </p>
<p>From the java.util.Locale javadoc for <code>setDefault</code>: should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine.> </p>
<p>Example of violations: </p>
<pre>
    Locale.setDefault(Locale.UK)                                // violation
    java.util.Locale.setDefault(Locale.FRANCE)                  // violation
    Locale.setDefault(Locale.Category.DISPLAY, Locale.JAPAN)    // violation

    Locale.default = Locale.UK                                  // violation
</pre>
Æ
8grvy:org.codenarc.rule.basic.BigDecimalInstantiationRuleÒ
grvy3org.codenarc.rule.basic.BigDecimalInstantiationRuleBig Decimal Instantiation"MINOR*grvy2BigDecimalInstantiation:Ú<p>Checks for calls to the <code>java.math.BigDecimal</code> constructors that take a <code>double</code> value as the first parameter. As described in the <code>BigDecimal</code> javadoc, the results from these constructors can be somewhat unpredictable, and their use is generally not recommended. This is because some numbers, such as 0.1, cannot be represented exactly as a <code>double</code>. </p>
<p>For instance, executing <code>println new BigDecimal(0.1)</code> prints out <code>0.1000000000000000055511151231257827021181583404541015625</code>. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def b1 = new BigDecimal(0.1)               // violation
    def b2 = new java.math.BigDecimal(23.45d)  // violation
</pre>
®
Agrvy:org.codenarc.rule.junit.UseAssertSameInsteadOfAssertTrueRule‚
grvy<org.codenarc.rule.junit.UseAssertSameInsteadOfAssertTrueRule&Use Assert Same Instead Of Assert True"MAJOR*grvy2 UseAssertSameInsteadOfAssertTrue:ƒ<p>This rule detects JUnit calling <code>assertTrue</code> or <code>assertFalse</code> where the first or second parameter is an <code>Object#is()</code> call testing for reference equality. These assertion should be made against the <code>assertSame</code> or <code>assertNotSame</code> method instead. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
≥
9grvy:org.codenarc.rule.junit.JUnitUnnecessaryTearDownRuleı
grvy4org.codenarc.rule.junit.JUnitUnnecessaryTearDownRuleJUnit Unnecessary Tear Down"MAJOR*grvy2JUnitUnnecessaryTearDown:Ú<p>Rule that checks checks for JUnit <code>tearDown()</code> methods that contain only a call to <code>super.tearDown()</code>. The method is then unnecessary. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
<p>Here is an example of a violation: </p>
<pre>
    class MyTest extends TestCase {
        void tearDown() {               // violation
            super.tearDown()
        }
    }
</pre>
Â
4grvy:org.codenarc.rule.exceptions.CatchExceptionRule¨
grvy/org.codenarc.rule.exceptions.CatchExceptionRuleCatch Exception"MINOR*grvy2CatchException:ƒ<p>Checks for catching a <code>Exception</code>. In most cases that is too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code. </p>
®
Cgrvy:org.codenarc.rule.groovyism.ExplicitArrayListInstantiationRule‡
grvy>org.codenarc.rule.groovyism.ExplicitArrayListInstantiationRule!Explicit Array List Instantiation"MINOR*grvy2ExplicitArrayListInstantiation:«<p>This rule checks for explicit calls to the no-argument constructor of <code>ArrayList</code>. In Groovy, it is best to write <code>new ArrayList() as []</code>, which creates the same object. </p>
Î
;grvy:org.codenarc.rule.convention.ParameterReassignmentRule´
grvy6org.codenarc.rule.convention.ParameterReassignmentRuleParameter Reassignment"MAJOR*grvy2ParameterReassignment:Æ<p>Checks for a method or closure parameter being reassigned to a new value within the body of the method/closure, which is a confusing and questionable practice. Use a temporary variable instead. </p>
<p>Example of violations: </p>
<pre>
    void myMethod(int a, String b) {
        println a
        b = 'new value'     // violation
    }

    def myClosure1 = { int a, b ->
        a = 123             // violation
    }
</pre>
´
5grvy:org.codenarc.rule.formatting.SpaceAfterWhileRuleÒ
grvy0org.codenarc.rule.formatting.SpaceAfterWhileRuleSpace After While"MAJOR*grvy2SpaceAfterWhile:Ö<p>Check that there is exactly one space (blank) after the <code>while</code> keyword and before the opening parenthesis. </p>
<p>Examples of violations: </p>
<pre>
    while(true) { }             // violation
    while  (true) { }           // violation
</pre>
≈
?grvy:org.codenarc.rule.design.SimpleDateFormatMissingLocaleRuleÅ
grvy:org.codenarc.rule.design.SimpleDateFormatMissingLocaleRule!Simple Date Format Missing Locale"MINOR*grvy2SimpleDateFormatMissingLocale:Ì<p>Be sure to specify a <code>Locale</code> when creating a new instance of <code>SimpleDateFormat</code>; the class is locale-sensitive. If you instantiate <code>SimpleDateFormat</code> without a <code>Locale</code> parameter, it will format the date and time according to the default <code>Locale</code>. Both the pattern and the <code>Locale</code> determine the format. For the same pattern, <code>SimpleDateFormat</code> may format a date and time differently if the Locale varies. </p>
<pre>
    // violation, missing locale
    new SimpleDateFormat('pattern')

    // OK, includes locale
    new SimpleDateFormat('pattern', Locale.US)

    // OK, includes a variable that perhaps is a locale
    new SimpleDateFormat('pattern', locale)
</pre>
ê
;grvy:org.codenarc.rule.concurrency.DoubleCheckedLockingRule–

grvy6org.codenarc.rule.concurrency.DoubleCheckedLockingRuleDouble Checked Locking"MINOR*grvy2DoubleCheckedLocking:‘	<p>This rule detects double checked locking, where a 'lock hint' is tested for null before initializing an object within a synchronized block. Double checked locking does not guarantee correctness and is an anti-pattern. </p>
<p>A full explanation of why double checked locking is broken in Java is available on Wikipedia: <a>http://en.wikipedia.org/wiki/Double-checked_locking</a> </p>
<p>Example of violations: </p>
<pre>
    if (object == null) {
        synchronized(this) {
            if (object == null) {
                // createObject() could be called twice depending
                // on the Thread Scheduler.
                object = createObject()
            }
        }
    }

    // there are several idioms to fix this problem.
    def result = object;
    if (result == null) {
        synchronized(this) {
            result = object;
            if (result == null)
                object = result = createObject()
        }
    }

    // and a better solution for a singleton:
    class myClass  {
        private static class ObjectHolder {
           public static Object object = createObject()
        }
        public static Object getObject() {
            return ObjectHolder.object;
        }
    }
</pre>
µ
Ggrvy:org.codenarc.rule.unnecessary.UnnecessaryDefInFieldDeclarationRuleÈ
grvyBorg.codenarc.rule.unnecessary.UnnecessaryDefInFieldDeclarationRule$Unnecessary Def In Field Declaration"MAJOR*grvy2 UnnecessaryDefInFieldDeclaration:«<p>If a field has a visibility modifier or a type declaration, then the def keyword is unneeded. For instance, 'static def constraints = {}' is redundant and can be simplified to 'static constraints = {}. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        // def is redundant
        static def constraints = {  }

        // def and private is redundant
        def private field1 = { }

        // def and protected is redundant
        def protected field2 = { }

        // def and public is redundant
        def public field3 = { }

        // def and static is redundant
        def static field4 = { }

        // def and type is redundant
        def Object field5 = { }
    }
</pre>
ô
=grvy:org.codenarc.rule.unnecessary.UnnecessaryCollectCallRule◊
grvy8org.codenarc.rule.unnecessary.UnnecessaryCollectCallRuleUnnecessary Collect Call"MAJOR*grvy2UnnecessaryCollectCall:’
<p>Some method calls to <code>Object.collect(Closure)</code> can be replaced with the spread operator. For instance, <code>list.collect { it.multiply(2) }</code> can be replaced by <code>list*.multiply(2)</code>. </p>
<p>Examples of violations include: </p>
<pre>
    assert [1, 2, 3].collect { it.multiply(2) }
    assert [1, 2, 3].collect { x -> x.multiply(2) }
    ["1", "2", "3"].collect { it.bytes }
</pre>
<pre>
    [1, 2, 3].collect { it * it }   // OK, closure parameter is referenced twice

    [1, 2, 3].mapMethod { it.multiply(5) } // OK, method call is not collect

    [1, 2, 3].collect(5) // OK, collect parameter is not a closure

    // OK, the closure is not a simple one line statement
    [1, 2, 3].collect { println it; it.multiply(5) }

    // OK, closure has too many arguments
    [1, 2, 3].collect { a, b -> a.multiply(b) }

    // OK, closure statement references parameter multiple times
    [1, 2, 3].collect { it.multiply(it) }

    // OK, it is referenced several times in the closure
    [1, 2, 3].collect { it.multiply(2).multiply(it) }
    ["1", "2", "3"].collect { it.bytes.foo(it) }

    // OK, chained methods are too complex to analyze at this point
    [1, 2, 3].collect { it.multiply(2).multiply(4) }

    // in general the above examples can be rewritten like this:
    [1, 2, 3]*.multiply(2)
    ["1", "2", "3"]*.bytes
</pre>
æ
7grvy:org.codenarc.rule.security.JavaIoPackageAccessRuleÇ
grvy2org.codenarc.rule.security.JavaIoPackageAccessRuleJava Io Package Access"MINOR*grvy2JavaIoPackageAccess:ã<p>This rule reports violations of the Enterprise JavaBeans specification by using the java.io package to access files or the file system. </p>
<p>The Enterprise JavaBeans specification requires that every bean provider follow a set of programming guidelines designed to ensure that the bean will be portable and behave consistently in any EJB container [1]. </p>
<p>In this case, the program violates the following EJB guideline: "An enterprise bean must not use the java.io package to attempt to access files and directories in the file system." </p>
<p>A requirement that the specification justifies in the following way: "The file system APIs are not well-suited for business components to access data. Business components should use a resource manager API, such as JDBC, to store data." </p>
<p>REFERENCES </p>
<p>[[1]] Standards Mapping - Common Weakness Enumeration - (CWE) CWE ID 576 </p>
<p>[[2]] The Enterprise JavaBeans 2.1 Specification Sun Microsystems </p>
 By default, this rule is not applied to tests and test cases. </p>
<p>Example of violations: </p>
<pre>
    FileSystem.getFileSystem()          // any method on FileSystem
    FileSystem.fileSystem.delete(aFile) // property access of FileSystem

    // shouldn't create files
    new File(name)
    new File(name, parent)

    // don't create file readers
    new FileReader(name)

    // don't create file output streams
    new FileOutputStream(name)
    new FileOutputStream(name, true)

    // don't create random access file
    new RandomAccessFile(name, parent)
</pre>
ﬂ
:grvy:org.codenarc.rule.jdbc.DirectConnectionManagementRule†
grvy5org.codenarc.rule.jdbc.DirectConnectionManagementRuleDirect Connection Management"MINOR*grvy2DirectConnectionManagement:ô<p>The J2EE standard requires that applications use the container's resource management facilities to obtain connections to resources. Every major web application container provides pooled database connection management as part of its resource management framework. Duplicating this functionality in an application is difficult and error prone, which is part of the reason it is forbidden under the J2EE standard. </p>
<p>For more information see: <a>https://www.fortify.com/vulncat/en/vulncat/java/j2ee_badpractices_getconnection.html</a> </p>
<p>Example of violations: </p>
<pre>
    DriverManager.getConnection()
    java.sql.DriverManager.getConnection()
</pre>
ë
5grvy:org.codenarc.rule.junit.JUnitStyleAssertionsRule◊
grvy0org.codenarc.rule.junit.JUnitStyleAssertionsRuleJUnit Style Assertions"MAJOR*grvy2JUnitStyleAssertions:·<p>This rule detects calling JUnit style assertions like <code>assertEquals</code>, <code>assertTrue</code>, <code>assertFalse</code>, <code>assertNull</code>, <code>assertNotNull</code>. Groovy 1.7 ships with a feature called the "power assert", which is an assert statement with better error reporting. This is preferable to the JUnit assertions. </p>
÷
<grvy:org.codenarc.rule.design.EmptyMethodInAbstractClassRuleï
grvy7org.codenarc.rule.design.EmptyMethodInAbstractClassRuleEmpty Method In Abstract Class"MINOR*grvy2EmptyMethodInAbstractClass:ä<p>An empty method in an abstract class should be abstract instead, as developer may rely on this empty implementation rather than code the appropriate one. </p>
<pre>
    abstract class MyClass {
        def couldBeAbstract_1() {
            return null  // Should be abstract method
        }

        void couldBeAbstract_2() {
            // Should be abstract method
        }
    }
</pre>
√
4grvy:org.codenarc.rule.groovyism.GStringAsMapKeyRuleä
grvy/org.codenarc.rule.groovyism.GStringAsMapKeyRuleG String As Map Key"MINOR*grvy2GStringAsMapKey:ù<p> A GString should not be used as a map key since its <hashcode> is not guaranteed to be stable. Consider calling <code>key.toString()</code>. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    Map map = ["${someRef}" : 'invalid' ]       // violation
</pre>
—
2grvy:org.codenarc.rule.imports.DuplicateImportRuleö
grvy-org.codenarc.rule.imports.DuplicateImportRuleDuplicate Import"MAJOR*grvy2DuplicateImport:3<p>Checks for a duplicate <import> statements. </p>
”
/grvy:org.codenarc.rule.design.NestedForLoopRuleü
grvy*org.codenarc.rule.design.NestedForLoopRuleNested For Loop"MAJOR*grvy2NestedForLoop:Ω<p>Reports classes with nested for loops. </p>
<p>Example of violations: </p>
<pre>
for (int i = 0; i < 100; ++i) {
    for (int j = 0; j < 100; ++j) { // violation
        println i + j
    }
}

for (int i = 0; i < 100; ++i) {
    for (int j = 0; j < 100; ++j) { // violation
        println i + j
    }
    for (int j = 0; j < 100; ++j) { // violation
        println i + j
    }
}

for (int i = 0; i < 100; ++i) {
    for (int j = 0; j < 100; ++j) { // violation
        for (int k = 0; k < 100; ++k) { // violation
            println i + j + k
        }
    }
}
</pre>
ﬁ
@grvy:org.codenarc.rule.concurrency.SystemRunFinalizersOnExitRuleô
grvy;org.codenarc.rule.concurrency.SystemRunFinalizersOnExitRuleSystem Run Finalizers On Exit"MINOR*grvy2SystemRunFinalizersOnExit:å<p>This rule reports uses of the <code>System.runFinalizersOnExit()</code> method. </p>
<p>Method calls to <code>System.runFinalizersOnExit()</code> should not be allowed. This method is inherently non-thread-safe, may result in data corruption, deadlock, and may affect parts of the program far removed from it's call point. It is deprecated, and it's use strongly discouraged. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def method() {
        System.runFinalizersOnExit(true)
    }
</pre>
Ù
8grvy:org.codenarc.rule.grails.GrailsSessionReferenceRule∑
grvy3org.codenarc.rule.grails.GrailsSessionReferenceRuleGrails Session Reference"MINOR*grvy2GrailsSessionReference:∫
<p> Rule that checks for references to the <code>session</code> object from within Grails controller and taglib classes. </p>
<p>This rule is intended as a "governance" rule to enable monitoring and controlling access to the <code>session</code> from within application source code. Storing objects in the <code>session</code> may inhibit scalability and/or performance and should be carefully considered. </p>
<p>Note that this rule does not check for direct access to the <code>session</code> from within GSP (Groovy Server Pages) files. </p>
<p>Enabling this rule may make most sense in a team environment where team members exhibit a broad range of skill and experience levels. Appropriate <code>session</code> access can be configured as exceptions to this rule by configuring either the <code>doNotApplyToFilenames</code> or <code>doNotApplyToFilesMatching</code> property of the rule. And, as always, it is easy to just <a href="http://codenarc.sourceforge.net/codenarc-configuring-rules.html#Turning_Off_A_Rule">turn off the rule</a> if it does not make sense it your environment. </p>
<p>This rule sets the default value of <code>applyToFilesMatching</code> to only match files under the 'grails-app/controllers' or 'grails-app/taglib' folders. You can override this with a different regular expression value if appropriate. </p>
ƒ
5grvy:org.codenarc.rule.naming.InterfaceNameRule.fixedä
grvy0org.codenarc.rule.naming.InterfaceNameRule.fixedInterface Name"MINOR*grvy2InterfaceName:£<p>Verifies that the name of an interface matches the regular expression specified in the <code>regex</code> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. </p>
µ
;grvy:org.codenarc.rule.concurrency.SynchronizedOnStringRuleı
grvy6org.codenarc.rule.concurrency.SynchronizedOnStringRuleSynchronized On String"MINOR*grvy2SynchronizedOnString:˘<p>Synchronization on a String field can lead to deadlock. Constant Strings are interned and shared across all other classes loaded by the JVM. Thus, this could is locking on something that other code might also be locking. This could result in very strange and hard to diagnose blocking and deadlock behavior. </p>
<p>See <a href="http://www.javalobby.org/java/forums/t96352.html and http://jira.codehaus.org/browse/JETTY-352">JETTY-352</a>. </p>
<p>Examples: </p>
<pre>
    class MyClass {

        final String stringLock = "stringLock"

        def method() {
            // violation
            synchronized(stringLock) { }
        }
    }

    class MyClass {

        final String stringLock = "stringLock"

        class MyInnerClass {
            def method() {
                synchronized(stringLock) { }
            }
        }
    }

    class MyClass {
        // implicit typing
        final def stringLock = "stringLock"

        def method() {
            // violation
            synchronized(stringLock) { }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = new Object[0] // correct idiom

        def method() {
            return new Runnable() {
                final def lock = "" // shadows parent from inner class
                public void run() {
                    // violation
                    synchronized(stringLock) { }
                }
            }
        }
    }

    class MyClass {
        // implicit typing
        final def lock = new Object[0] // correct idiom

        class MyInnerClass {

            final def lock = "" // shadows parent from inner class
            def method() {
                // violation
                synchronized(stringLock) { }
            }
        }
    }
</pre>
ó
2grvy:org.codenarc.rule.naming.MethodNameRule.fixed‡
grvy-org.codenarc.rule.naming.MethodNameRule.fixedMethod Name"MINOR*grvy2
MethodName:Ç<p>Verifies that the name of each method matches a regular expression. By default it checks that the method name starts with a lowercase letter. Implicit method names are ignored (i.e., 'main' and 'run' methods automatically created for Groovy scripts). </p>
∆
Ggrvy:org.codenarc.rule.exceptions.CatchIllegalMonitorStateExceptionRule˙
grvyBorg.codenarc.rule.exceptions.CatchIllegalMonitorStateExceptionRule%Catch Illegal Monitor State Exception"MINOR*grvy2!CatchIllegalMonitorStateException:÷<p>Dubious catching of IllegalMonitorStateException. IllegalMonitorStateException is generally only thrown in case of a design flaw in your code (calling wait or notify on an object you do not hold a lock on). </p>
€
2grvy:org.codenarc.rule.security.ObjectFinalizeRule§
grvy-org.codenarc.rule.security.ObjectFinalizeRuleObject Finalize"MINOR*grvy2ObjectFinalize:æ<p>The finalize() method should only be called by the JVM after the object has been garbage collected. </p>
<p>While the Java Language Specification allows an object's finalize() method to be called from outside the finalizer, doing so is usually a bad idea. For example, calling finalize() explicitly means that finalize() will be called more than once: the first time will be the explicit call and the last time will be the call that is made after the object is garbage collected. </p>
<p>References: Standards Mapping - Common Weakness Enumeration - (CWE) CWE ID 586 </p>
ÿ
7grvy:org.codenarc.rule.design.CloneableWithoutCloneRuleú
grvy2org.codenarc.rule.design.CloneableWithoutCloneRuleCloneable Without Clone"MINOR*grvy2CloneableWithoutClone:¢<p>Checks for classes that implement the <code>java.lang.Cloneable</code> interface without implementing the <code>clone()</code> method. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    class BadClass implements Cloneable {
        def someMethod()
    }
</pre>
ˇ
9grvy:org.codenarc.rule.concurrency.SynchronizedMethodRule¡
grvy4org.codenarc.rule.concurrency.SynchronizedMethodRuleSynchronized Method"MINOR*grvy2SynchronizedMethod:Ã<p>This rule reports uses of the <code>synchronized</code> keyword on methods. Synchronized methods are the same as synchronizing on 'this', which effectively make your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    synchronized def myMethod() {
        // do stuff ...
    }
</pre>
ä
3grvy:org.codenarc.rule.groovyism.UseCollectManyRule“
grvy.org.codenarc.rule.groovyism.UseCollectManyRuleUse Collect Many"MINOR*grvy2UseCollectMany:Í<p>In many case <code>collectMany()</code> yields the same result as <code>collect{}.flatten()</code>. It is easier to understand and more clearly conveys the intent. </p>
<p>Example of violations: </p>
<pre>
def l = [1, 2, 3, 4]

l.collect{ [it, it*2] }.flatten() // suboptimal

l.collectMany{ [it, it*2] }       // same functionality, better readability
</pre>
ú
7grvy:org.codenarc.rule.generic.StatelessClassRule.fixed‡
grvy2org.codenarc.rule.generic.StatelessClassRule.fixedStateless Class"MINOR*grvy2StatelessClass:ı<p>Checks for non-<code>final</code> fields on a class. The intent of this rule is to check a configured set of classes that should remain "stateless" and reentrant. One example might be Grails service classes which are singletons, by default, and so they should be reentrant. </p>
<p>This rule ignores <code>final</code> fields (either instance or static). Fields that are <code>static</code> and non-<code>final</code>, however, do cause a violation. </p>
<p>This rule also ignores all classes annotated with the <code>@Immutable</code> transformation. See <a href="http://groovy.codehaus.org/Immutable+transformation">http://groovy.codehaus.org/Immutable+transformation</a>. </p>
<p>This rule also ignores all fields annotated with the <code>@Inject</code> annotation. </p>
<p>You can configure this rule to ignore certain fields either by name or by type. This can be useful to ignore fields that hold references to (static) dependencies (such as DAOs or Service objects) or static configuration. </p>
<p>Note that you can use the standard rule properties, such as <code>applyToClassNames</code>, <code>doNotApplyToFileNames</code> and <code>applyToFilesMatching</code> to only apply this rule to a subset of all classes/files. These rule properties are described in <a href="http://codenarc.sourceforge.net/codenarc-configuring-rules.html#Standard_Properties_for_Configuring_Rules"> Standard Properties for Configuring Rules</a>. </p>
 [[1]]  The <code>ignoreFieldTypes</code> property matches the field type name as indicated in the field declaration, only including a full package specification IF it is included in the source code. For example, the field declaration <code>BigDecimal value</code> matches an <code>ignoreFieldTypes</code> value of <code>BigDecimal</code>, but not <code>java.lang.BigDecimal</code>. </p>
<p>[[2]]  There is one exception for the <code>ignoreFieldTypes</code> property: if the field is declared with a modifier/type of <code>def</code>, then the type resolves to <code>java.lang.Object</code>. </p>
<p>[[3]] At least one of the (standard) <code>applyToClassNames</code>, <code>applyToFileNames</code> or <code>applyToFilesMatching</code> properties must be set (i.e., not null or empty) or else this rule does nothing. In other words, you must configure this rule to apply to a specific set of classes or files. </p>
<p>[[4]] This rule will not catch violations of true <statelessness>/<reentrancy> if you define a <code>final</code> field whose value is itself mutable, e.g. a <code>final HashMap</code>. </p>
Ω
>grvy:org.codenarc.rule.groovyism.ExplicitCallToMinusMethodRule˙
grvy9org.codenarc.rule.groovyism.ExplicitCallToMinusMethodRuleExplicit Call To Minus Method"MINOR*grvy2ExplicitCallToMinusMethod:Ô<p>This rule detects when the <code>minus(Object)</code> method is called directly in code instead of using the <code>-</code> operator. A groovier way to express this: <code>a.minus(b)</code> is this: <code>a - b</code>. This rule can be configured to ignore <code>minus.xor(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>minus(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.minus(Object)</code>. </p>
ï
@grvy:org.codenarc.rule.generic.IllegalPackageReferenceRule.fixed–
grvy;org.codenarc.rule.generic.IllegalPackageReferenceRule.fixedIllegal Package Reference"MINOR*grvy2IllegalPackageReference:…
<p> Checks for reference to any of the packages configured in <code>packageNames</code>. </p>
<p>Note that you can use the standard rule properties, such as <code>applyToClassNames</code>, <code>doNotApplyToFileNames</code> and <code>applyToFilesMatching</code> to only apply this rule to a subset of all classes/files. These rule properties are described in <a href="http://codenarc.sourceforge.net/codenarc-configuring-rules.html#Standard_Properties_for_Configuring_Rules"> Standard Properties for Configuring Rules</a>. </p>
<p>This rule can be useful for governance and enforcement of <architectural layering>. For instance, making sure that view or model classes, for instance, do not contain references to JDBC-specific packages (e.g. java.sql and javax.sql). </p>
<p>Here is an example configuration of this rule used to ensure that JDBC packages/classes are only referenced within DAO classes: </p>
<pre>
    ruleset {
        description "Example CodeNarc Ruleset"

        // ...

        IllegalPackageReference {
            name = 'UseJdbcOnlyInDaoClasses'
            priority = 2
            packageNames = 'groovy.sql, java.sql, javax.sql'
            doNotApplyToClassNames = 'com.example.framework.dao.*, *Dao, *DaoImpl'
            description = 'Reference to JDBC packages should be restricted to DAO classes.'
        }
    }
</pre>
“
.grvy:org.codenarc.rule.junit.JUnitLostTestRuleü
grvy)org.codenarc.rule.junit.JUnitLostTestRuleJUnit Lost Test"MINOR*grvy2JUnitLostTest:æ<p>This rule checks for classes that import JUnit 4 classes and contain a <code>public</code>, instance, <code>void</code>, no-arg method named <test>* that is not annotated with the JUnit 4 <code>@Test</code> annotation. </p>
<p>Note: This rule should be disabled for Grails 2.x projects, since the Grails test framework can use AST Transformations to automatically annotate test methods. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
<p>Example of violations: </p>
<pre>
    import org.junit.Test

    class MyTestCase {
        void testMe() { }           // missing @Test annotation
    }
</pre>
ˆ
4grvy:org.codenarc.rule.exceptions.CatchThrowableRuleΩ
grvy/org.codenarc.rule.exceptions.CatchThrowableRuleCatch Throwable"MINOR*grvy2CatchThrowable:’<p>Checks for catching a <code>Throwable</code>. In most cases that is much too broad, and is also dangerous because it can catch exceptions such as <code>ThreadDeath</code> and <code>OutOfMemoryError</code>. </p>
Ã
8grvy:org.codenarc.rule.generic.IllegalSubclassRule.fixedè
grvy3org.codenarc.rule.generic.IllegalSubclassRule.fixedIllegal Subclass"MINOR*grvy2IllegalSubclass:°<p>Checks for classes that extend one of the specified set of illegal superclasses. </p>
<p>A RuleSet can contain any number of instances of this rule, but each should be configured with a unique rule <name> and <string>, and (optionally) customized <violationMessage> and <priority>. </p>
ˆ
4grvy:org.codenarc.rule.braces.ForStatementBracesRuleΩ
grvy/org.codenarc.rule.braces.ForStatementBracesRuleFor Statement Braces"MINOR*grvy2ForStatementBraces:M<p>Checks that <for> statements use braces, even for a single statement. </p>
Í
;grvy:org.codenarc.rule.groovyism.ExplicitCallToOrMethodRule™
grvy6org.codenarc.rule.groovyism.ExplicitCallToOrMethodRuleExplicit Call To Or Method"MINOR*grvy2ExplicitCallToOrMethod:®<p>This rule detects when the <code>or(Object)</code> method is called directly in code instead of using the <code>|</code> operator. A groovier way to express this: <code>a.or(b)</code> is this: <code>a | b</code>. This rule can be configured to ignore <code>this.or(Object)</code> using the <ignoreThisReference> property. It defaults to <true>, so even <code>or(x)</code> will not trigger a violation. This is the default because it is commonly used in Grails criteria. </p>
<p>This rule also ignores all calls to <code>super.or(Object)</code>. </p>
°
2grvy:org.codenarc.rule.concurrency.ThreadYieldRuleÍ
grvy-org.codenarc.rule.concurrency.ThreadYieldRuleThread Yield"MINOR*grvy2ThreadYield:ä<p>This rule reports uses of the <code>Thread.yield()</code> method. </p>
<p>Method calls to <code>Thread.yield()</code> should not be allowed. This method has no useful guaranteed semantics, and is often used by inexperienced programmers to mask race conditions. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
     def method() {
         Thread.yield()
     }
</pre>
˚
8grvy:org.codenarc.rule.formatting.TrailingWhitespaceRuleæ
grvy3org.codenarc.rule.formatting.TrailingWhitespaceRuleTrailing Whitespace"MAJOR*grvy2TrailingWhitespace:K<p>Checks that no lines of source code end with whitespace characters. </p>
î
5grvy:org.codenarc.rule.generic.IllegalRegexRule.fixed⁄
grvy0org.codenarc.rule.generic.IllegalRegexRule.fixedIllegal Regex"MAJOR*grvy2IllegalRegex:ı<p>Checks for a specified illegal regular expression within the source code. </p>
<p>A RuleSet can contain any number of instances of this rule, but each should be configured with a unique rule <name> and <regex>, and (optionally) customized <violationMessage> and <priority>. </p>
<p><code>NOTE:</code> This rule applies to the text contents of an entire <file> rather than a specific <class>, so it does not support the <applyToClassNames> and <doNotApplyToClassNames> configuration properties. </p>
”
1grvy:org.codenarc.rule.logging.SystemOutPrintRuleù
grvy,org.codenarc.rule.logging.SystemOutPrintRuleSystem Out Print"MINOR*grvy2SystemOutPrint:∑<p>Checks for calls to <code>System.out.print()</code>, <code>System.out.println()</code> or <code>System.out.printf()</code>. Consider using a standard logging facility instead. </p>
ü
8grvy:org.codenarc.rule.exceptions.ExceptionNotThrownRule‚
grvy3org.codenarc.rule.exceptions.ExceptionNotThrownRuleException Not Thrown"MINOR*grvy2ExceptionNotThrown:Ì<p> Checks for an exception constructor call without a <code>throw</code> as the last statement within a catch block. This rule treats any constructor call for a class named <xxx><code>Exception</code> as an exception constructor call. </p>
<p>Example of violations: </p>
<pre>
    void execute() {
        try { } catch(Exception e) { new Exception(e) }     // violation
    }

    try {
        doStuff()
    } catch(DaoException e) {
        log.warning("Ooops", e)
        new ServiceException(e)                             // violation
    } catch(Exception e) {
        new SystemException(e)                              // violation
    }

    try {
        doStuff()
    } catch(Exception e) { throw new DaoException(e) }      // ok
</pre>
Ò
3grvy:org.codenarc.rule.braces.IfStatementBracesRuleπ
grvy.org.codenarc.rule.braces.IfStatementBracesRuleIf Statement Braces"MINOR*grvy2IfStatementBraces:L<p>Checks that <if> statements use braces, even for a single statement. </p>
è
Igrvy:org.codenarc.rule.exceptions.CatchArrayIndexOutOfBoundsExceptionRule¡
grvyDorg.codenarc.rule.exceptions.CatchArrayIndexOutOfBoundsExceptionRule)Catch Array Index Out Of Bounds Exception"MINOR*grvy2#CatchArrayIndexOutOfBoundsException:ï<p>Checks for catching a <code>ArrayIndexOutOfBoundsException</code>. Catching <code>ArrayIndexOutOfBoundsException</code> should be avoided in the first place by checking the array size before accessing an array element. Catching the exception may mask underlying errors. </p>
ô

,grvy:org.codenarc.rule.design.InstanceofRuleË	
grvy'org.codenarc.rule.design.InstanceofRule
Instanceof"MINOR*grvy2
Instanceof:ë	<p>Checks for use of the <code>instanceof</code> operator. Prefer using <polymorphism> instead. </p>
<p>Use the <code>ignoreTypeNames</code> property to configure ignored type names (the class name specified as the right-hand expression of the <code>instanceof</code>). It defaults to ignoring <code>instanceof</code> checks against exception classes. </p>
<p>Here are a couple references that discuss the problems with using <code>instanceof</code> and the preference for using <polymorphism> instead: </p>
<p>* <a href="http://www.javapractices.com/topic/TopicAction.do?Id=31">Beware of instanceof operator</a> </p>
<p>* <a href="http://stackoverflow.com/questions/4192837/how-does-one-use-polymorphism-instead-of-instanceof-and-why">How does one use polymorphism instead of instanceof? (And why?)</a> </p>
<p>By default, the rule does not analyze test files. This rule sets the default value of the <doNotApplyToFilesMatching> property to ignore file names ending in 'Test.groovy', 'Tests.groovy' or 'TestCase.groovy'. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        boolean isRunnable = this instanceof Runnable       // violation
    }
</pre>
†
6grvy:org.codenarc.rule.generic.RequiredRegexRule.fixedÂ
grvy1org.codenarc.rule.generic.RequiredRegexRule.fixedRequired Regex"MAJOR*grvy2RequiredRegex:˝<p>Checks for a specified regular expression that must exist within the source code. </p>
<p>A RuleSet can contain any number of instances of this rule, but each should be configured with a unique rule <name> and <regex>, and (optionally) customized <violationMessage> and <priority>. </p>
<p><code>NOTE:</code> This rule applies to the text contents of an entire <file> rather than a specific <class>, so it does not support the <applyToClassNames> and <doNotApplyToClassNames> configuration properties. </p>
È
:grvy:org.codenarc.rule.logging.LoggerForDifferentClassRule™
grvy5org.codenarc.rule.logging.LoggerForDifferentClassRuleLogger For Different Class"MINOR*grvy2LoggerForDifferentClass:®<p>Checks for instantiating a logger for a class other than the current class. Checks for logger instantiations for <code>Log4J</code>, <code>SLF4J</code>, <code>Logback</code>, <code>Apache Commons Logging</code> and <code>Java Logging API (java.util.logging)</code>. </p>
<p>This rule contains a parameter <code>allowDerivedClasses</code>. When set, a logger may be created about this.getClass(). </p>
<p>Limitations: </p>
ƒ
Bgrvy:org.codenarc.rule.unnecessary.UnnecessaryOverridingMethodRule˝
grvy=org.codenarc.rule.unnecessary.UnnecessaryOverridingMethodRuleUnnecessary Overriding Method"MAJOR*grvy2UnnecessaryOverridingMethod:m<p>Checks for an overriding method that merely calls the same method defined in a superclass. Remove it. </p>
Ü
:grvy:org.codenarc.rule.unnecessary.UnnecessaryToStringRule«
grvy5org.codenarc.rule.unnecessary.UnnecessaryToStringRuleUnnecessary To String"MINOR*grvy2UnnecessaryToString:O<p>Checks for unnecessary calls to <code>toString()</code>. This includes: </p>
÷
3grvy:org.codenarc.rule.naming.FactoryMethodNameRuleû
grvy.org.codenarc.rule.naming.FactoryMethodNameRuleFactory Method Name"MINOR*grvy2FactoryMethodName:∞<p>A factory method is a method that creates objects, and they are typically named either buildFoo(), makeFoo(), or createFoo(). This rule enforces that only one naming convention is used. It defaults to allowing makeFoo(), but that can be changed using the property <code>regex</code>. The regex is a negative expression; it specifically bans methods named build* or create*. However, methods named build or build* receive some special treatment because of the popular Builder Pattern. If the 'build' method is in a class named *Builder then it does not cause a violation. </p>
<p>Builder methods are slightly different than factory methods. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {

        // violation. Factory methods should be named make()
        def create() {
        }

        // violation. Factory methods should be named make()
        def createSomething() {
        }

        // violation. Builder method not in class named *Builder
        def build() {
        }

        // violation. Builder method not in class named *Builder
        def buildSomething() {
        }

        // this is OK because it is called make
        def make() {
        }

        // this is also OK
        def makeSomething() {
        }

        // OK, overriding a parent
        @Override
        build() { }

    }

    class WidgetBuilder {

        // OK, the class name ends in Builder
        def build() {
        }
    }
</pre>
§
;grvy:org.codenarc.rule.formatting.ConsecutiveBlankLinesRule‰
grvy6org.codenarc.rule.formatting.ConsecutiveBlankLinesRuleConsecutive Blank Lines"MAJOR*grvy2ConsecutiveBlankLines:Ê<p>Makes sure there are no consecutive lines that are either blank or whitespace only. This reduces the need to scroll further than necessary when reading code, and increases the likelihood that a logical block of code will fit on one screen for easier comprehension. </p>
<p>Example of violation: </p>
<pre>
    def name


    def value



    def id
</pre>
è

Igrvy:org.codenarc.rule.unnecessary.UnnecessaryBigDecimalInstantiationRule¡	
grvyDorg.codenarc.rule.unnecessary.UnnecessaryBigDecimalInstantiationRule%Unnecessary Big Decimal Instantiation"MAJOR*grvy2"UnnecessaryBigDecimalInstantiation:ö<p>It is unnecessary to instantiate <code>BigDecimal</code> objects. Instead just use the decimal literal or the 'G' identifier to force the type, such as <code>123.45</code> or <code>123.45G</code>. </p>
<p>This rule does not produce violations when the parameter evaluates to an integer/long, e.g. <code>new BigDecimal(42)</code>, <code>new BigDecimal(42L)</code> or <code>new BigDecimal("42")</code>, because using the "G" suffix on an integer value produces a <code>BigInteger</code>, rather than a <code>BigDecimal</code>, e.g. <code>45G</code>. So that means there is no way to produce a <code>BigDecimal</code> with exactly that value using a literal. </p>
<p>This rule also does not produce violations when the parameter is a double, e.g. <code>new BigDecimal(12.3)</code>. That scenario is covered by the <a href="http://codenarc.sourceforge.net/codenarc-rules-basic.html#BigDecimalInstantiation">BigDecimalInstantiation</a> rule, because that produces an unpredictable (double) value (and so it is <unsafe>, rather than <unnecessary>). </p>
‡
6grvy:org.codenarc.rule.jdbc.JdbcResultSetReferenceRule•
grvy1org.codenarc.rule.jdbc.JdbcResultSetReferenceRuleJdbc Result Set Reference"MINOR*grvy2JdbcResultSetReference:©<p>Checks for direct use of <code>java.sql.ResultSet</code>, which is not necessary if using the Groovy <code>Sql</code> facility or an ORM framework such as <Hibernate>. </p>
<p>See <a>http://groovy.codehaus.org/Database+features</a> for information on the <code>Groovy Sql</code> abstraction layer for JDBC/SQL. </p>
<p>Note: If a violation is triggered from an <code>import</code> statement, then you may get multiple violations per import if there are multiple classes in the source file. In that case, the imports are processed once per class. </p>
Ã
0grvy:org.codenarc.rule.basic.BrokenNullCheckRuleó
grvy+org.codenarc.rule.basic.BrokenNullCheckRuleBroken Null Check"MINOR*grvy2BrokenNullCheck:∞<p>Looks for faulty checks for <null> that can cause a <code>NullPointerException</code>. </p>
<p>Examples: </p>
<pre>
    if (name != null || name.length > 0) { }            // violation
    if (name != null || name.length) { }                // violation
    while (record == null && record.id < 10) { }        // violation
    if (record == null && record.id && doStuff()) { }   // violation
    def isNotValid = record == null && record.id < 10   // violation
    return record == null && !record.id                 // violation

    if (name != null || name.size() > 0) { }            // violation
    if (string == null && string.equals("")) { }        // violation
    def isValid = name != null || name.size() > 0       // violation
    return name != null || !name.size()                 // violation
</pre>
Ï
?grvy:org.codenarc.rule.junit.UseAssertTrueInsteadOfNegationRule®
grvy:org.codenarc.rule.junit.UseAssertTrueInsteadOfNegationRule#Use Assert True Instead Of Negation"MINOR*grvy2UseAssertTrueInsteadOfNegation:ë<p>In unit tests, if a condition is expected to be true then there is no sense using <code>assertFalse</code> with the negation operator. For instance, <code>assertFalse(!condition)</code> can always be simplified to <code>assertTrue(condition)</code>. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
˛
Dgrvy:org.codenarc.rule.grails.GrailsDomainReservedSqlKeywordNameRuleµ
grvy?org.codenarc.rule.grails.GrailsDomainReservedSqlKeywordNameRule'Grails Domain Reserved Sql Keyword Name"MINOR*grvy2"GrailsDomainReservedSqlKeywordName:ë<p>Forbids usage of SQL reserved keywords as class or field names in Grails domain classes. Naming a domain class (or its field) with such a keyword causes SQL schema creation errors and/or redundant table/column name mappings. </p>
<p>Note: due to limited type information available during CodeNarc's operation, this rule will report fields of type <code>java.io.Serializable</code>, but not of its implementations. Please specify any implementations used as domain properties in <code>additionalHibernateBasicTypes</code>. </p>
Â
7grvy:org.codenarc.rule.concurrency.StaticConnectionRule©
grvy2org.codenarc.rule.concurrency.StaticConnectionRuleStatic Connection"MINOR*grvy2StaticConnection:∫<p>Creates violations when a <code>java.sql.Connection</code> object is used as a <code>static</code> field. Database connections stored in <code>static</code> fields will be shared between threads, which is unsafe and can lead to race conditions. </p>
<p>A transactional resource object such as database connection can only be associated with one transaction at a time. For this reason, a connection should not be shared between threads and should not be stored in a static field. See Section 4.2.3 of the <J2EE Specification> for more details. </p>
<p>References: </p>
î
;grvy:org.codenarc.rule.grails.GrailsDuplicateConstraintRule‘
grvy6org.codenarc.rule.grails.GrailsDuplicateConstraintRuleGrails Duplicate Constraint"MINOR*grvy2GrailsDuplicateConstraint:Œ<p> Check for duplicate name in a Grails domain class constraints. Duplicate names/entries are legal, but can be confusing and error-prone. </p>
<p>NOTE: This rule does not check that the values of the entries are duplicated, only that there are two entries with the same name. </p>
<p>Example of violations: </p>
<pre>
    class Person {
        String firstName
        String lastName

        static constraints = {
            firstName nullable:true
            lastName nullable:true, maxSize:30
            firstName nullable:false                // violation
        }
    }
</pre>
Ì
;grvy:org.codenarc.rule.unnecessary.UnnecessarySubstringRule≠
grvy6org.codenarc.rule.unnecessary.UnnecessarySubstringRuleUnnecessary Substring"MAJOR*grvy2UnnecessarySubstring:≤<p>This rule finds usages of <code>String.substring(int)</code> and <code>String.substring(int, int)</code> that can be replaced by use of the subscript operator. For instance, <code>var.substring(5)</code> can be replaced with <code>var[5..-1]</code>. </p>
<p>Note that the String.substring(beginIndex,endIndex) method specifies a range of beginIndex..endIndex-1, while Groovy's String subscript specifies an inclusive range. So, <code>"123456".substring(1, 5)</code> is equivalent to <code>"123456"[1..4]</code>. </p>
<p>Example of violations: </p>
<pre>
    myVar.substring(5)          // can use myVar[5..-1] instead
    myVar.substring(1, 5)       // can use myVar[1..4] instead
</pre>
‚
Dgrvy:org.codenarc.rule.design.AbstractClassWithPublicConstructorRuleô
grvy?org.codenarc.rule.design.AbstractClassWithPublicConstructorRule&Abstract Class With Public Constructor"MINOR*grvy2"AbstractClassWithPublicConstructor:ˆ<p>Checks for <code>abstract</code> classes that define a <code>public</code> constructor, which is useless and confusing. </p>
<p>The following code produces a violation: </p>
<pre>
    abstract class MyClass {
        MyClass() { }
    }
</pre>
¨
<grvy:org.codenarc.rule.groovyism.ExplicitCallToModMethodRuleÎ
grvy7org.codenarc.rule.groovyism.ExplicitCallToModMethodRuleExplicit Call To Mod Method"MINOR*grvy2ExplicitCallToModMethod:Ê<p>This rule detects when the <code>mod(Object)</code> method is called directly in code instead of using the <code>%</code> operator. A groovier way to express this: <code>a.mod(b)</code> is this: <code>a % b</code>. This rule can be configured to ignore <code>this.mod(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>mod(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.mod(Object)</code>. </p>
ﬁ
Bgrvy:org.codenarc.rule.exceptions.ConfusingClassNamedExceptionRuleó
grvy=org.codenarc.rule.exceptions.ConfusingClassNamedExceptionRuleConfusing Class Named Exception"MINOR*grvy2ConfusingClassNamedException:É<p>This class is not derived from another exception, but ends with 'Exception'. This will be confusing to users of this class. </p>
ë
5grvy:org.codenarc.rule.groovyism.UseCollectNestedRule◊
grvy0org.codenarc.rule.groovyism.UseCollectNestedRuleUse Collect Nested"MINOR*grvy2UseCollectNested:È<p>Instead of nested <code>collect{}</code> calls use <code>collectNested{}</code>. </p>
<p>Example of violations: </p>
<pre>
def list = [1, 2, [3, 4, 5, 6], [7]]

println list.collect { elem ->
    if (elem instanceof List)
        elem.collect {it *2} // violation
    else elem * 2
}

println list.collect([8]) {
    if (it instanceof List)
        it.collect {it *2} // violation
    else it * 2
}

println list.collectNested { it * 2 } // same functionality, better readability
</pre>
ª
7grvy:org.codenarc.rule.grails.GrailsDomainHasEqualsRuleˇ
grvy2org.codenarc.rule.grails.GrailsDomainHasEqualsRuleGrails Domain Has Equals"MINOR*grvy2GrailsDomainHasEquals:Ñ<p>Checks that Grails domain classes redefine <code>equals()</code>. </p>
<p>Ignores classes annotated with <code>@EqualsAndHashCode</code> or <code>@Canonical</code>. </p>
<p>This rule sets the default value of <code>applyToFilesMatching</code> to only match files under the 'grails-app/domain' folder. You can override this with a different regular expression value if appropriate. </p>
¥
2grvy:org.codenarc.rule.formatting.SpaceAfterIfRule˝
grvy-org.codenarc.rule.formatting.SpaceAfterIfRuleSpace After If"MAJOR*grvy2SpaceAfterIf:ö<p>Check that there is exactly one space (blank) after the <code>if</code> keyword and before the opening parenthesis. </p>
<p>Examples of violations: </p>
<pre>
    if(true) { }                            // violation
    if  (true) { }                          // violation
</pre>
⁄
5grvy:org.codenarc.rule.dry.DuplicateNumberLiteralRule†
grvy0org.codenarc.rule.dry.DuplicateNumberLiteralRuleDuplicate Number Literal"MINOR*grvy2DuplicateNumberLiteral:¶<p> This rule checks for duplicate number literals within the current class. </p>
<p>Code containing duplicate <Number> literals can usually be improved by declaring the <Number> as a constant field. </p>
<p>By default, the rule does not analyze test files. This rule sets the default value of the <doNotApplyToFilesMatching> property to ignore file names ending in 'Test.groovy', 'Tests.groovy' or 'TestCase.groovy'. </p>
ß
Fgrvy:org.codenarc.rule.unnecessary.UnnecessaryFinalOnPrivateMethodRule‹
grvyAorg.codenarc.rule.unnecessary.UnnecessaryFinalOnPrivateMethodRule#Unnecessary Final On Private Method"MAJOR*grvy2UnnecessaryFinalOnPrivateMethod:Ω<p>A private method is marked final. Private methods cannot be overridden, so marking it final is unnecessary. </p>
<p>Example of violations: </p>
<pre>
    private final method() {}
</pre>
∂
0grvy:org.codenarc.rule.formatting.LineLengthRuleÅ
grvy+org.codenarc.rule.formatting.LineLengthRuleLine Length"MINOR*grvy2
LineLength:•<p>Checks the maximum length for each line of source code. It checks for number of characters, so lines that include tabs may appear longer than the allowed number when viewing the file. The maximum line length can be configured by setting the length property, which defaults to 120. </p>
<p>NOTE: This rule does not support the @SuppressAnnotations annotation or the classname-based rule properties (applyToClassNames, doNotApplyToClassNames) to enable/disable the rule. If you want to specify or restrict where this rule is applied, you must use the file-based rule properties: applyToFileNames, doNotApplyToFileNames, applyToFilesMatching and doNotApplyToFilesMatching. </p>
Ë
4grvy:org.codenarc.rule.imports.NoWildcardImportsRuleØ
grvy/org.codenarc.rule.imports.NoWildcardImportsRuleNo Wildcard Imports"MAJOR*grvy2NoWildcardImports:¿<p>Wildcard imports, static or otherwise, should not be used. </p>
<p>Example of violations: </p>
<pre>
    import my.something.*
    import static foo.bar.*

    public class MyClass{}
</pre>
ô
8grvy:org.codenarc.rule.imports.ImportFromSamePackageRule‹
grvy3org.codenarc.rule.imports.ImportFromSamePackageRuleImport From Same Package"MAJOR*grvy2ImportFromSamePackage:a<p>Checks for an <import> of a class that is within the same package as the importing class. </p>
Ó
?grvy:org.codenarc.rule.serialization.SerialPersistentFieldsRule™
grvy:org.codenarc.rule.serialization.SerialPersistentFieldsRuleSerial Persistent Fields"MINOR*grvy2SerialPersistentFields:¶<p>To use a <code>Serializable</code> object's <code>serialPersistentFields</code> correctly, it must be declared <code>private</code>, <code>static</code>, and <code>final</code>. </p>
<p>The Java Object Serialization Specification allows developers to manually define <code>Serializable</code> fields for a class by specifying them in the <code>serialPersistentFields</code> array. This feature will only work if <code>serialPersistentFields</code> is declared as <code>private</code>, <code>static</code>, and <code>final</code>. Also, specific to Groovy, the field must be of type <code>ObjectStreamField[]</code>, and cannot be <code>Object</code>. </p>
<p>References: </p>
¨
?grvy:org.codenarc.rule.design.FinalClassWithProtectedMemberRuleË
grvy:org.codenarc.rule.design.FinalClassWithProtectedMemberRule!Final Class With Protected Member"MINOR*grvy2FinalClassWithProtectedMember:‘<p>This rule finds classes marked final that contain <code>protected</code> members. If a class is <code>final</code> then it may not be subclassed, and there is therefore no point in having a member with <code>protected</code> visibility. Either the class should not be <code>final</code> or the member should be private or protected. </p>
”
>grvy:org.codenarc.rule.formatting.SpaceAroundMapEntryColonRuleê
grvy9org.codenarc.rule.formatting.SpaceAroundMapEntryColonRuleSpace Around Map Entry Colon"MAJOR*grvy2SpaceAroundMapEntryColon:á<p>Check for proper formatting of whitespace around colons for literal Map entries. By default, no whitespace is allowed either before or after the Map entry colon, but you can change that through the configuration properties below. </p>
<p>Example of violations: </p>
<pre>
    Map m1 = [myKey : 12345]            // violation (both before and after the colon)
    println [a :[1:11, 2:22],           // violation on a (before colon)
                b:[(Integer): 33]]      // violation on Integer (after colon)
</pre>
∫
Agrvy:org.codenarc.rule.groovyism.ExplicitTreeSetInstantiationRuleÙ
grvy<org.codenarc.rule.groovyism.ExplicitTreeSetInstantiationRuleExplicit Tree Set Instantiation"MINOR*grvy2ExplicitTreeSetInstantiation:·<p>This rule checks for explicit calls to the no-argument constructor of <code>TreeSet</code>. In Groovy, it is best to replace <code>new TreeSet()</code> with <code>[] as SortedSet</code>, which creates the same object. </p>
≈
>grvy:org.codenarc.rule.groovyism.ExplicitCallToGetAtMethodRuleÇ
grvy9org.codenarc.rule.groovyism.ExplicitCallToGetAtMethodRuleExplicit Call To Get At Method"MINOR*grvy2ExplicitCallToGetAtMethod:ˆ<p>This rule detects when the <code>getAt(Object)</code> method is called directly in code instead of using the <code>[]</code> index operator. A groovier way to express this: <code>a.getAt(b)</code> is this: <code>a[b]</code>. This rule can be configured to ignore <code>this.getAt(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>getAt(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.getAt(Object)</code>. </p>
ê
6grvy:org.codenarc.rule.convention.ConfusingTernaryRule’
grvy1org.codenarc.rule.convention.ConfusingTernaryRuleConfusing Ternary"MAJOR*grvy2ConfusingTernary:Á<p>In a ternary expression avoid negation in the test. For example, rephrase: <code>(x != y) ? diff : same</code> as: <code>(x == y) ? same : diff</code>. Consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as "does the error case go first?" or "does the common case go first?". </p>
<p>Example: </p>
<pre>
    (x != y) ? diff : same      // triggers violation
    (!x) ? diff : same          // triggers violation

    (x == y) ? same : diff      // OK
    (x) ? same : diff           // OK

    // this is OK, because of GroovyTruth there is no inverse of != null
    (x != null) ? diff : same

    // this is OK, because of GroovyTruth there is no inverse of != true
    (x != true) ? diff : same

    // this is OK, because of GroovyTruth there is no inverse of != false
    (x != false) ? diff : same
</pre>

@grvy:org.codenarc.rule.junit.UseAssertFalseInsteadOfNegationRule´
grvy;org.codenarc.rule.junit.UseAssertFalseInsteadOfNegationRule$Use Assert False Instead Of Negation"MINOR*grvy2UseAssertFalseInsteadOfNegation:ë<p>In unit tests, if a condition is expected to be false then there is no sense using <code>assertTrue</code> with the negation operator. For instance, <code>assertTrue(!condition)</code> can always be simplified to <code>assertFalse(condition)</code>. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
â
;grvy:org.codenarc.rule.exceptions.CatchRuntimeExceptionRule…
grvy6org.codenarc.rule.exceptions.CatchRuntimeExceptionRuleCatch Runtime Exception"MINOR*grvy2CatchRuntimeException:À<p>Checks for catching a <code>RuntimeException</code>. In most cases that is too broad or general. It should usually be restricted to framework or infrastructure code, rather than application code. </p>
ª
9grvy:org.codenarc.rule.basic.AssertWithinFinallyBlockRule˝
grvy4org.codenarc.rule.basic.AssertWithinFinallyBlockRuleAssert Within Finally Block"MINOR*grvy2AssertWithinFinallyBlock:˙<p>Checks for <assert> statements within a <finally> block. An <assert> can throw an exception, hiding the original exception, if there is one. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    int myMethod(int count) {
        try {
            doSomething()
        } finally {
            assert count > 0        // violation
        }
    }
</pre>
‰
2grvy:org.codenarc.rule.basic.EqualsAndHashCodeRule≠
grvy-org.codenarc.rule.basic.EqualsAndHashCodeRuleEquals And Hash Code"MINOR*grvy2EqualsAndHashCode:ø<p>Checks that if either the <code>boolean equals(Object)</code> or the <code>int hashCode()</code> methods are overridden within a class, then both must be overridden. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    class MyClass {
        boolean equals(Object object) {
            // do something
        }
    }
</pre>
<pre>
    class MyClass {
        int hashCode() {
            return 0
        }
    }
</pre>
∑
=grvy:org.codenarc.rule.security.UnsafeImplementationAsMapRuleı
grvy8org.codenarc.rule.security.UnsafeImplementationAsMapRuleUnsafe Implementation As Map"MINOR*grvy2UnsafeImplementationAsMap:Ï<p>Reports incomplete interface implementations created by map-to-interface coercions. </p>
<p>By default, this rule does not apply to test files. </p>
<p>NOTE: This is a <a href="http://codenarc.sourceforge.net/codenarc-enhanced-classpath-rules.html">CodeNarc Enhanced Classpath Rule</a>. It requires <code>CodeNarc</code> to have the application classes being analyzed, as well as any referenced classes, on the classpath. </p>
<p>Example of violations: </p>
<pre>
    [mouseClicked: { ... }] as MouseListener
    //not all MouseListener methods are implemented which can lead to UnsupportedOperationException-s
</pre>
⁄
:grvy:org.codenarc.rule.junit.JUnitAssertAlwaysSucceedsRuleõ
grvy5org.codenarc.rule.junit.JUnitAssertAlwaysSucceedsRuleJUnit Assert Always Succeeds"MINOR*grvy2JUnitAssertAlwaysSucceeds:ï<p>Rule that checks for JUnit <code>assert()</code> method calls with constant arguments such that the assertion always succeeds. This includes: </p>
—
Dgrvy:org.codenarc.rule.grails.GrailsPublicControllerMethodRule.fixedà
grvy?org.codenarc.rule.grails.GrailsPublicControllerMethodRule.fixedGrails Public Controller Method"MINOR*grvy2GrailsPublicControllerMethod:Ú<p> Rule that checks for public methods on Grails controller classes. Static methods are ignored. </p>
<p>Grails controller actions and interceptors are defined as properties on the controller class. Public methods on a controller class are unnecessary. They break encapsulation and can be confusing. </p>
<p>This rule sets the default value of <code>applyToFilesMatching</code> to only match files under the 'grails-app/controllers' folder. You can override this with a different regular expression value if appropriate. </p>
<p>This rule also sets the default value of <code>applyToClassNames</code> to only match class names ending in 'Controller'. You can override this with a different class name pattern (String with wildcards) if appropriate. </p>
¶
2grvy:org.codenarc.rule.basic.BooleanGetBooleanRuleÔ
grvy-org.codenarc.rule.basic.BooleanGetBooleanRuleBoolean Get Boolean"MINOR*grvy2BooleanGetBoolean:Ç<p>This rule catches usages of java.lang.Boolean.getBoolean(String) which reads a boolean from the System properties. It is often mistakenly used to attempt to read user input or parse a String into a boolean. It is a poor piece of API to use; replace it with System.properties['propÕÑ']. </p>
<p>Example of violations: </p>
<pre>
    // produces violation
    Boolean.getBoolean(value)

    // zero or two parameters is OK, must be different method
    Boolean.getBoolean(value, 1)
    Boolean.getBoolean()
</pre>
î
6grvy:org.codenarc.rule.convention.VectorIsObsoleteRuleŸ
grvy1org.codenarc.rule.convention.VectorIsObsoleteRuleVector Is Obsolete"MINOR*grvy2VectorIsObsolete:Í<p>Checks for references to the (<effectively>) obsolete <code>java.util.Vector</code> class. Use the <code>Java Collections Framework</code> classes instead, including <code>ArrayList</code> or <code>Collections.synchronizedList()</code>. See the JDK javadoc. </p>
<p>Example of violations: </p>
<pre>
    def myList = new Vector()           // violation
</pre>
»
@grvy:org.codenarc.rule.exceptions.MissingNewInThrowStatementRuleÉ
grvy;org.codenarc.rule.exceptions.MissingNewInThrowStatementRuleMissing New In Throw Statement"MINOR*grvy2MissingNewInThrowStatement:Ù<p>A common Groovy mistake when throwing exceptions is to forget the new keyword. For instance, <code>throw RuntimeException()</code> instead of <code>throw new RuntimeException()</code>. If the error path is not unit tested then the production system will throw a Method Missing exception and hide the root cause. This rule finds constructs like <code>throw RuntimeException()</code> that look like a new keyword was meant to be used but forgotten. </p>
<p>The following code will all cause violations: </p>
<pre>
    throw RuntimeException()    // ends in Exceptions, first letter Capitalized
    throw RuntimeFailure()      // ends in Failure, first letter Capitalized
    throw RuntimeFault(foo)     // ends in Fault, first letter Capitalized
</pre>
<pre>
    throw new RuntimeException()
    throw runtimeFailure()      // first letter lowercase, assumed to be method call
</pre>
Ä
Bgrvy:org.codenarc.rule.concurrency.InconsistentPropertyLockingRuleπ
grvy=org.codenarc.rule.concurrency.InconsistentPropertyLockingRuleInconsistent Property Locking"MINOR*grvy2InconsistentPropertyLocking:®<p>Class contains similarly-named get and set methods where one method of the pair is marked either @WithReadLock or @WithWriteLock and the other is not locked at all. This may result in incorrect behavior at runtime, as callers of the get and set methods will not necessarily lock correctly and my see an inconsistent state for the object. The get and set method should both be guarded by @WithReadLock/@WithWriteLock or neither should be guarded. </p>
<p>Example of violations: </p>
<pre>
    class Person {
        String name
        Date birthday
        boolean deceased
        boolean parent

        @WithWriteLock setName(String name) {
            this.name = name
        }
        // violation, get method should be locked
        String getName() {
            name
        }

        // violation, set method should be locked
        void setBirthday(Date birthday) {
            this.birthday = birthday
        }

        @WithReadLock String getBirthday() {
            birthday
        }

        // violation, set method should be locked
        void setDeceased(boolean deceased) {
            this.deceased = deceased
        }

        @WithReadLock boolean isDeceased() {
            deceased
        }

        @WithWriteLock void setParent(boolean parent) {
            this.parent = parent
        }

        // violation, get method should be locked
        boolean isParent() {
            parent
        }
    }
</pre>
Î
?grvy:org.codenarc.rule.exceptions.ThrowNullPointerExceptionRuleß
grvy:org.codenarc.rule.exceptions.ThrowNullPointerExceptionRuleThrow Null Pointer Exception"MINOR*grvy2ThrowNullPointerException:ú<p>Checks for throwing an instance of <code>java.lang.NullPointerException</code>. Applications should never throw a <code>NullPointerException</code>. </p>
‚
0grvy:org.codenarc.rule.exceptions.CatchErrorRule≠
grvy+org.codenarc.rule.exceptions.CatchErrorRuleCatch Error"MINOR*grvy2
CatchError:—<p>Checks for catching a <code>Error</code>. In most cases that is much too broad, and is also dangerous because it can catch exceptions such as <code>ThreadDeath</code> and <code>OutOfMemoryError</code>. </p>
Ü
5grvy:org.codenarc.rule.design.ToStringReturnsNullRuleÃ
grvy0org.codenarc.rule.design.ToStringReturnsNullRuleTo String Returns Null"MINOR*grvy2ToStringReturnsNull:◊<p>Checks for <code>toString()</code> methods that return <code>null</code>. This is unconventional and could cause unexpected <code>NullPointerExceptions</code> from normal or implicit use of <code>toString()</code>. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        String toString() {
            if (foo()) {
                return 'MyClass'
            } else {
                return null         // violation
            }
        }
    }

    class MyClass {
        String toString() {
            calculateStuff()
            null                    // violation
        }
    }

    class MyClass {
        String toString() {         // violation - implicit return of null
        }
    }
</pre>
—
/grvy:org.codenarc.rule.basic.DoubleNegativeRuleù
grvy*org.codenarc.rule.basic.DoubleNegativeRuleDouble Negative"MINOR*grvy2DoubleNegative:∫<p>There is no point in using a double negative, it is always positive. For instance <code>!!x</code> can always be simplified to <code>x</code>. And <code>!(!x)</code> can as well. </p>
≥
+grvy:org.codenarc.rule.size.MethodCountRuleÉ
grvy&org.codenarc.rule.size.MethodCountRuleMethod Count"MINOR*grvy2MethodCount:™<p>Checks if the number of methods within a class exceeds the number of lines specified by the <code>maxMethod</code> property. </p>
<p>A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects. </p>
Ü
:grvy:org.codenarc.rule.junit.JUnitPublicPropertyRule.fixed«
grvy5org.codenarc.rule.junit.JUnitPublicPropertyRule.fixedJUnit Public Property"MINOR*grvy2JUnitPublicProperty:Œ<p>Checks for public properties defined on JUnit test classes. There is typically no need to expose a public property (with public <getter> and <setter> methods) on a test class. </p>
<p>This rule sets the default value of the <applyToClassNames> property to only match class names ending in 'Test', 'Tests' or 'TestCase'. </p>
<p>Example of violations: </p>
<pre>
    import org.junit.Test
    class MyTestCase {
        static String id    // violation
        def helper          // violation
        String name         // violation

        @Test
        void testMe() { }
    }
</pre>
‰

4grvy:org.codenarc.rule.design.StatelessSingletonRule´

grvy/org.codenarc.rule.design.StatelessSingletonRuleStateless Singleton"MINOR*grvy2StatelessSingleton:ª	<p>There is no point in creating a stateless Singleton because there is nothing within the class that needs guarding and no side effects to calling the constructor. Just create new instances of the object or write a Utility class with static methods. In the long term, Singletons can cause strong coupling and hard to change systems. </p>
<p>If the class has any fields at all, other than a self reference, then it is not considered stateless. A self reference is a field of the same type as the enclosing type, or a field named instance or _instance. The field name self reference is a property named instanceRegex that defaults to the value 'instance|_instance' </p>
<p>Example of violations: </p>
<pre>
    @groovy.lang.Singleton
    class Service {
       // violation: the class has no fields but is marked Singleton
        void processItem(item){
        }
    }

    class Service {
       // violation: the class has no fields other than 'instance' but is marked Singleton
        static instance
        void processItem(item){
        }
    }

    class Service {                                       // violation
        static Service service
        void processItem(item){
        }
    }
</pre>
´
=grvy:org.codenarc.rule.basic.BitwiseOperatorInConditionalRuleÈ
grvy8org.codenarc.rule.basic.BitwiseOperatorInConditionalRuleBitwise Operator In Conditional"MINOR*grvy2BitwiseOperatorInConditional:⁄<p>Checks for bitwise operations in conditionals. For instance, the condition <code>if (a | b)</code> is almost always a mistake and should be <code>if (a || b)</code>. If you need to do a bitwise operation then it is best practice to extract a temp variable. </p>
<p>Example of violations: </p>
<pre>
    if (a | b) { }
    if (a & b) { }
</pre>
Ü
Ugrvy:org.codenarc.rule.unnecessary.UnnecessaryParenthesesForMethodCallWithClosureRule¨
grvyPorg.codenarc.rule.unnecessary.UnnecessaryParenthesesForMethodCallWithClosureRule4Unnecessary Parentheses For Method Call With Closure"MAJOR*grvy2.UnnecessaryParenthesesForMethodCallWithClosure:ﬁ<p>If a method is called and the only parameter to that method is an inline closure then the parentheses of the method call can be omitted. </p>
<p>Example of violations: </p>
<pre>
    [1,2,3].each() { println it }
</pre>
Ï
?grvy:org.codenarc.rule.unnecessary.UnnecessaryElseStatementRule®
grvy:org.codenarc.rule.unnecessary.UnnecessaryElseStatementRuleUnnecessary Else Statement"MAJOR*grvy2UnnecessaryElseStatement:†<p>When an <code>if</code> statement block ends with a <code>return</code> statement, then the <code>else</code> is unnecessary. The logic in the <code>else</code> branch can be run without being in a new scope. </p>
<p>Example of violations: </p>
<pre>
    if(value){
        println 'Executing if logic...'
        return true
    } else {
        println 'Executing else logic...'
    }

    // can be replaced by:

    if(value){
        println 'Executing if logic...'
        return true
    }
    println 'Executing else logic...'
</pre>
Ä
@grvy:org.codenarc.rule.design.ReturnsNullInsteadOfEmptyArrayRuleª
grvy;org.codenarc.rule.design.ReturnsNullInsteadOfEmptyArrayRule#Returns Null Instead Of Empty Array"MINOR*grvy2ReturnsNullInsteadOfEmptyArray:£<p>If you have a method or closure that returns an array, then when there are no results return a zero-length (empty) array rather than <code>null</code>. It is often a better design to return a zero-length array rather than a <code>null</code> reference to indicate that there are no results (i.e., an <empty> list of results). This way, no explicit check for <code>null</code> is needed by clients of the method. </p>
¿
@grvy:org.codenarc.rule.unnecessary.ConsecutiveLiteralAppendsRule˚
grvy;org.codenarc.rule.unnecessary.ConsecutiveLiteralAppendsRuleConsecutive Literal Appends"MINOR*grvy2ConsecutiveLiteralAppends:<p>Violations occur when method calls to append(Object) are chained together with literals as parameters. The chained calls can be joined into one invocation. </p>
<p>Example of violations: </p>
<pre>
    writer.append('foo').append('bar')      // strings can be joined
    writer.append('foo').append(5)          // string and number can be joined
    writer.append('Hello').append("$World") // GString can be joined
</pre>
<pre>
    // usage not chained invocation
    writer.append('Hello')
    writer.append('World')

    writer.append(null).append(5)           // nulls cannot be joined

    writer.append().append('Hello')             // no arg append is unknown
    writer.append('a', 'b').append('Hello')     // two arg append is unknown
</pre>
¸
<grvy:org.codenarc.rule.design.CompareToWithoutComparableRuleª
grvy7org.codenarc.rule.design.CompareToWithoutComparableRuleCompare To Without Comparable"MINOR*grvy2CompareToWithoutComparable:±<p>If you implement a compareTo method then you should also implement the <code>Comparable</code> interface. If you don't then you could possibly get an exception if the Groovy == operator is invoked on your object. This is an issue fixed in Groovy 1.8 but present in previous versions. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    class BadClass {
        int compareTo(Object o) { ... }
    }
</pre>
é
Bgrvy:org.codenarc.rule.groovyism.GStringExpressionWithinStringRule«
grvy=org.codenarc.rule.groovyism.GStringExpressionWithinStringRule!G String Expression Within String"MINOR*grvy2GStringExpressionWithinString:∞<p>Check for regular (single quote) strings containing a GString-type expression (${..}). </p>
<p>Example of violations: </p>
<pre>
    def str1 = 'total: ${count}'                // violation
    def str2 = 'average: ${total / count}'      // violation

    def str3 = "abc ${count}"                   // ok; GString
    def str4 = '$123'                           // ok
    def str5 = 'abc {123}'                      // ok
</pre>
¢
Bgrvy:org.codenarc.rule.naming.PackageNameMatchesFilePathRule.fixed€
grvy=org.codenarc.rule.naming.PackageNameMatchesFilePathRule.fixedPackage Name Matches File Path"MINOR*grvy2PackageNameMatchesFilePath:K<p> A package source file's path should match the package declaration. </p>
 
2grvy:org.codenarc.rule.basic.EmptyFinallyBlockRuleì
grvy-org.codenarc.rule.basic.EmptyFinallyBlockRuleEmpty Finally Block"MINOR*grvy2EmptyFinallyBlock:¶<p>Checks for empty <finally> blocks. Empty <finally> blocks are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        try {
            doSomething()
        } finally {
            // empty
        }
    }
</pre>
ÿ
6grvy:org.codenarc.rule.unnecessary.UnnecessaryCastRuleù
grvy1org.codenarc.rule.unnecessary.UnnecessaryCastRuleUnnecessary Cast"MINOR*grvy2UnnecessaryCast:±<p>Checks for unnecessary cast operations. </p>
<p>Example of violations: </p>
<pre>
    int count = (int)123                    // violation
    def longValue = (long)123456L           // violation
    def bigDecimal = (BigDecimal)1234.56    // violation
    String name = (String) "Joe"            // violation
    def list = (List)[1, 2, 3]              // violation
    def map = (Map)[a:1]                    // violation
</pre>
ù
7grvy:org.codenarc.rule.security.NonFinalPublicFieldRule·
grvy2org.codenarc.rule.security.NonFinalPublicFieldRuleNon Final Public Field"MINOR*grvy2NonFinalPublicField:Í<p>Finds code that violates secure coding principles for mobile code by declaring a member variable public but not final. </p>
<p>All public member variables in an Applet and in classes used by an Applet should be declared final to prevent an attacker from manipulating or gaining unauthorized access to the internal state of the Applet. </p>
<p>References: </p>
–
.grvy:org.codenarc.rule.security.SystemExitRuleù
grvy)org.codenarc.rule.security.SystemExitRuleSystem Exit"MINOR*grvy2
SystemExit:√<p>Web applications should never call System.exit(). A call to System.exit() is probably part of leftover debug code or code imported from a non-J2EE application. </p>
<p>[[1]] Standards Mapping - OWASP Top 10 2004 - (OWASP 2004) A9 Application Denial of Service </p>
<p>[[2]] Standards Mapping - Security Technical Implementation Guide Version 3 - (STIG 3) APP6080 CAT II </p>
<p>[[3]] Standards Mapping - Common Weakness Enumeration - (CWE) CWE ID 382 </p>
<p>[[4]] Standards Mapping - Payment Card Industry Data Security Standard Version 1.1 - (PCI 1.1) Requirement 6.5.9 </p>
–
Bgrvy:org.codenarc.rule.unnecessary.UnnecessaryPackageReferenceRuleâ
grvy=org.codenarc.rule.unnecessary.UnnecessaryPackageReferenceRuleUnnecessary Package Reference"MAJOR*grvy2UnnecessaryPackageReference:¯<p>Checks for explicit package reference for classes that Groovy imports by default, such as <code>java.lang.String</code>, <code>java.util.Map</code> and <code>groovy.lang.Closure</code>, as well as classes that were explicitly imported. </p>
<p>You do not need to specify the package for any classes from <java.lang>, <java.util>, <java.io>, <java.net>, <groovy.lang> and <groovy.util>, as well as the classes <java.math.BigDecimal> and <java.math.BigInteger>. </p>
<p>Examples of violations include: </p>
<pre>
    // Field types
    class MyClass {
        java.math.BigDecimal amount = 42.10                     // violation
    }

    // Within expressions
    if (value.class == java.math.BigInteger) { }                // violation
    println "isClosure=${v instanceof groovy.lang.Closure}"     // violation
    def p = java.lang.Runtime.availableProcessors()             // violation

    // Constructor calls
    def url = new java.net.URL('http://abc@example.com')        // violation

    // Variable types
    void doSomething() {
        java.math.BigInteger maxValue = 0                       // violation
        java.net.URI uri                                        // violation
    }

    // Method return types
    java.io.Reader getReader() { }                              // violation
    groovy.util.AntBuilder getAntBuilder() { }                  // violation

    // Method parameter types
    void writeCount(java.io.Writer writer, int count) { }       // violation
    void init(String name, groovy.lang.Binding binding) { }     // violation

    // Closure parameter types
    def writeCount = { java.io.Writer writer, int count -> }    // violation

    // Extends and implements
    class MyHashMap extends java.util.HashMap { }               // violation
    class MyList implements java.util.List { }                  // violation

    // Explicitly imported classes
    import javax.servlet.http.Cookie
    import javax.sql.DataSource

    class MyClass {
        void doStuff(javax.servlet.http.Cookie cookie) {        // violation
            def dataSource = [:] as javax.sql.DataSource        // violation
        }
    }
</pre>
·
6grvy:org.codenarc.rule.security.FileCreateTempFileRule¶
grvy1org.codenarc.rule.security.FileCreateTempFileRuleFile Create Temp File"MINOR*grvy2FileCreateTempFile:≤<p>The File.createTempFile() method is insecure, and has been deprecated by the ESAPI secure coding library. It has been replaced by the ESAPI Randomizer.getRandomFilename(String) method. </p>
<p>For more information see the <a href="http://code.google.com/p/owasp-esapi-java/">ESAPI website</a> and the <a href="http://owasp-esapi-java.googlecode.com/svn/trunk_doc/latest/org/owasp/esapi/Randomizer.html">Randomizer Javadoc</a>. </p>
¬
.grvy:org.codenarc.rule.size.ParameterCountRuleè
grvy)org.codenarc.rule.size.ParameterCountRuleParameter Count"MINOR*grvy2ParameterCount:≠<p>Checks if the number of parameters in method/constructor exceeds the number of parameters specified by the maxParameters property. </p>
<p>Example of violations: </p>
<pre>
    void someMethod(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) { // violation
    }

    class SampleClass {
        SampleClass(int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7) { // violation
        }
    }
</pre>
Ï
5grvy:org.codenarc.rule.basic.ConstantIfExpressionRule≤
grvy0org.codenarc.rule.basic.ConstantIfExpressionRuleConstant If Expression"MINOR*grvy2ConstantIfExpression:º<p>Checks for <if> statements with a constant value for the <if> boolean expression, such as <code>true</code>, <code>false</code>, <code>null</code>, or a literal constant value. These <if> statements can be simplified or avoided altogether. Examples of violations include: </p>
<pre>
    if (true) { .. }
    if (false) { .. }
    if (Boolean.TRUE) { .. }
    if (Boolean.FALSE) { .. }
    if (null) { .. }
    if (0) { .. }
    if (99.7) { .. }
    if ("") { .. }
    if ("abc") { .. }
    if ([:]) { .. }
    if ([a:123, b:456]) { .. }
    if ([a, b, c]) { .. }
</pre>
ï
8grvy:org.codenarc.rule.basic.AssignmentInConditionalRuleÿ
grvy3org.codenarc.rule.basic.AssignmentInConditionalRuleAssignment In Conditional"MINOR*grvy2AssignmentInConditional:Ÿ<p>An assignment operator (=) was used in a conditional test. This is usually a typo, and the comparison operator (==) was intended. </p>
<p>Example of violations: </p>
<pre>
    if ((value = true)) {
        // should be ==
    }

    while (value = true) {
        // should be ==
    }

    (value = true) ? x : y
    (value = true) ?: x

    // the following code has no violations
    if (value == true) {
    }

    value == true ? x : y
    value == true ?: x
</pre>
ü
7grvy:org.codenarc.rule.design.CloneWithoutCloneableRule„
grvy2org.codenarc.rule.design.CloneWithoutCloneableRuleClone Without Cloneable"MINOR*grvy2CloneWithoutCloneable:È<p>The method clone() should only be declared if the class implements the Cloneable interface. </p>
<p>NOTE: This is a <a href="http://codenarc.sourceforge.net/codenarc-enhanced-classpath-rules.html">CodeNarc Enhanced Classpath Rule</a>. It requires <code>CodeNarc</code> to have the application classes being analyzed, as well as any referenced classes, on the classpath. </p>
<p>Example of violations: </p>
<pre>
    class ValueClass {
        ValueClass clone() {
        }
    }
</pre>
¨
<grvy:org.codenarc.rule.groovyism.ExplicitCallToXorMethodRuleÎ
grvy7org.codenarc.rule.groovyism.ExplicitCallToXorMethodRuleExplicit Call To Xor Method"MINOR*grvy2ExplicitCallToXorMethod:Ê<p>This rule detects when the <code>xor(Object)</code> method is called directly in code instead of using the <code>^</code> operator. A groovier way to express this: <code>a.xor(b)</code> is this: <code>a ^ b</code>. This rule can be configured to ignore <code>this.xor(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>xor(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.xor(Object)</code>. </p>
û
Agrvy:org.codenarc.rule.unnecessary.UnnecessaryCallToSubstringRuleÿ
grvy<org.codenarc.rule.unnecessary.UnnecessaryCallToSubstringRuleUnnecessary Call To Substring"MAJOR*grvy2UnnecessaryCallToSubstring:…<p>Calling String.substring(0) always returns the original string. This code is meaningless. </p>
<p>Examples: </p>
<pre>
    string.substring(0)         // violation
    method().substring(0)       // violation

    prop.substring(1)           // OK, not constant 0
    prop.substring(0, 1)        // OK, end is specified
</pre>
Ø
6grvy:org.codenarc.rule.design.ImplementationAsTypeRuleÙ
grvy1org.codenarc.rule.design.ImplementationAsTypeRuleImplementation As Type"MINOR*grvy2ImplementationAsType:˝<p>Checks for use of the following concrete classes when specifying the type of a method parameter, closure parameter, constructor parameter, method return type or field type. The corresponding interfaces should be used to specify the type instead. </p>
‚
8grvy:org.codenarc.rule.security.PublicFinalizeMethodRule•
grvy3org.codenarc.rule.security.PublicFinalizeMethodRulePublic Finalize Method"MINOR*grvy2PublicFinalizeMethod:¨<p>Creates a violation when the program violates secure coding principles by declaring a <code>finalize()</code> method public. </p>
<p>A program should never call finalize explicitly, except to call super.finalize() inside an implementation of <code>finalize()</code>. In mobile code situations, the otherwise error prone practice of manual garbage collection can become a security threat if an attacker can maliciously invoke one of your finalize() methods because it is declared with public access. If you are using <code>finalize()</code> as it was designed, there is no reason to declare <code>finalize()</code> with anything other than protected access. </p>
<p>References: </p>
Ì
7grvy:org.codenarc.rule.basic.ReturnFromFinallyBlockRule±
grvy2org.codenarc.rule.basic.ReturnFromFinallyBlockRuleReturn From Finally Block"MINOR*grvy2ReturnFromFinallyBlock:¥<p>Checks for a return from within a <finally> block. Returning from a <finally> block is confusing and can hide the original exception. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    int myMethod() {
        try {
            doSomething()
            return 0
        } catch(Exception e) {
            return -1
        } finally {
            return 99               // violation
        }
    }
</pre>
Ñ
<grvy:org.codenarc.rule.formatting.FileEndsWithoutNewlineRule√
grvy7org.codenarc.rule.formatting.FileEndsWithoutNewlineRuleFile Ends Without Newline"MAJOR*grvy2FileEndsWithoutNewline:B<p>Makes sure each source file ends with a newline character. </p>
Ë
6grvy:org.codenarc.rule.formatting.BracesForForLoopRule≠
grvy1org.codenarc.rule.formatting.BracesForForLoopRuleBraces For For Loop"MINOR*grvy2BracesForForLoop:Ω<p>Checks the location of the opening brace (\{) for for loops. By default, requires them on the same line, but the <code>sameLine</code> property can be set to false to override this. </p>
ñ

;grvy:org.codenarc.rule.unnecessary.UnnecessaryNullCheckRule÷	
grvy6org.codenarc.rule.unnecessary.UnnecessaryNullCheckRuleUnnecessary Null Check"MAJOR*grvy2UnnecessaryNullCheck:⁄<p>Groovy contains the safe dereference operator. It can be used in boolean conditional statements to safely replace explicit <code>x == null</code> tests. Also, testing the 'this' or 'super' reference for null equality is pointless and can be removed. </p>
<p>Examples of violations: </p>
<pre>
    if (obj != null && obj.method()) { }

    if (obj != null && obj.prop) { }

    // this is pointless and won't avoid NullPointerException
    if (obj.method() && obj != null ) { }

    if (this == null) { }
    if (null == this) { }
    if (this != null) { }
    if (null != this) { }

    if (super == null) { }
    if (null == super) { }
    if (super != null) { }
    if (null != super) { }
</pre>
<pre>
    // null check it OK
    if (obj != null) { }

    // null safe dereference in if is OK
    if (obj?.method()) { }

    // null safe dereference in ternary is OK
    (obj?.prop && obj?.prop2) ? x : y

    // obj is reused in a parameter list, so OK
    if (obj != null && obj.method() && isValid(obj)) { }

    // rule is not so complex yet...
    (obj != null && obj.prop && obj.method()) ? x : y
</pre>
ü
0grvy:org.codenarc.rule.size.MethodSizeRule.fixedÍ
grvy+org.codenarc.rule.size.MethodSizeRule.fixedMethod Size"MAJOR*grvy2
MethodSize:é<p>Checks if the size of a method exceeds the number of lines specified by the <code>maxLines</code> property. </p>
<p>Known Limitations: </p>
ù
?grvy:org.codenarc.rule.basic.ThrowExceptionFromFinallyBlockRuleŸ
grvy:org.codenarc.rule.basic.ThrowExceptionFromFinallyBlockRule"Throw Exception From Finally Block"MINOR*grvy2ThrowExceptionFromFinallyBlock:√<p>Checks for throwing an exception from within a <finally> block. Throwing an exception from a <finally> block is confusing and can hide the original exception. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    int myMethod() {
        try {
            doSomething()
            throw new Exception()
        } finally {
            println 'finally'
            throw new Exception()   // violation
        }
    }
</pre>
˘
=grvy:org.codenarc.rule.groovyism.ConfusingMultipleReturnsRule∑
grvy8org.codenarc.rule.groovyism.ConfusingMultipleReturnsRuleConfusing Multiple Returns"MINOR*grvy2ConfusingMultipleReturns:±<p>Multiple return values can be used to set several variables at once. To use multiple return values, the left hand side of the assignment must be enclosed in parenthesis. If not, then you are not using multiple return values, you're only assigning the last element. </p>
<p>Example of violations: </p>
<pre>
def a, b = [1, 2] // bad, b is null
def c, d, e = [1, 2, 3] // bad, c and d are null
class MyClass {
    def a, b, c = [1, 2, 3]  // bad, a and b are null
}

def x = 1              // ok
def (f, g) = [1, 2]    // ok
(a, b, c) = [1, 2, 3]  // ok
</pre>
û
7grvy:org.codenarc.rule.generic.RequiredStringRule.fixed‚
grvy2org.codenarc.rule.generic.RequiredStringRule.fixedRequired String"MAJOR*grvy2RequiredString:˜<p>Checks for a specified text string that must exist within the source code. </p>
<p>A RuleSet can contain any number of instances of this rule, but each should be configured with a unique rule <name> and <string>, and (optionally) customized <violationMessage> and <priority>. </p>
<p><code>NOTE:</code> This rule applies to the text contents of an entire <file> rather than a specific <class>, so it does not support the <applyToClassNames> and <doNotApplyToClassNames> configuration properties. </p>
ö
5grvy:org.codenarc.rule.formatting.SpaceAfterCommaRule‡
grvy0org.codenarc.rule.formatting.SpaceAfterCommaRuleSpace After Comma"MAJOR*grvy2SpaceAfterComma:Ù<p>Checks that there is at least one space or whitespace following each comma. That includes checks for method and closure declaration parameter lists, method call parameter lists, Map literals and List literals. </p>
<p>Known limitations: </p>
ù
Bgrvy:org.codenarc.rule.unnecessary.UnnecessaryObjectReferencesRule÷

grvy=org.codenarc.rule.unnecessary.UnnecessaryObjectReferencesRuleUnnecessary Object References"MAJOR*grvy2UnnecessaryObjectReferences:≈	<p>Violations are triggered when an excessive set of consecutive statements all reference the same variable. This can be made more readable by using a <code>with</code> or <code>identity</code> block. By default, 5 references are allowed. You can override this property using the <code>maxReferencesAllowed</code> property on the rule. </p>
<p>These two bits of code produce violations: </p>
<pre>
    def p1 = new Person()
    p1.firstName = 'Hamlet'
    p1.lastName = "D'Arcy"
    p1.employer = 'Canoo'
    p1.street = 'Kirschgaraten 5'
    p1.city = 'Basel'
    p1.zipCode = '4051'

    def p2 = new Person()
    p2.setFirstName('Hamlet')
    p2.setLastName("D'Arcy")
    p2.setEmployer('Canoo')
    p2.setStreet('Kirschgaraten 5')
    p2.setCity('Basel')
    p2.setZipCode('4051')
</pre>
<pre>
    def p1 = new Person().with {
        firstName = 'Hamlet'
        lastName = "D'Arcy"
        employer = 'Canoo'
        street = 'Kirschgaraten 5'
        city = 'Basel'
        zipCode = '4051'
    }

    def p2 = new Person().identity {
        firstName = 'Hamlet'
        lastName = "D'Arcy"
        employer = 'Canoo'
        street = 'Kirschgaraten 5'
        city = 'Basel'
        zipCode = '4051'
    }
</pre>
†
9grvy:org.codenarc.rule.naming.AbstractClassNameRule.fixed‚
grvy4org.codenarc.rule.naming.AbstractClassNameRule.fixedAbstract Class Name"MINOR*grvy2AbstractClassName:Ó<p>Verifies that the name of an abstract class matches the regular expression specified in the <code>regex</code> property. If that property is null or empty, then this rule is not applied (i.e., it does nothing). It defaults to null, so this rule must be explicitly configured to be active. This rule ignores interfaces and is applied only to abstract classes. </p>
›
2grvy:org.codenarc.rule.logging.PrintStackTraceRule¶
grvy-org.codenarc.rule.logging.PrintStackTraceRulePrint Stack Trace"MINOR*grvy2PrintStackTrace:Ω<p>Checks for calls to <code>Throwable.printStackTrace()</code> or <code>StackTraceUtils.printSanitizedStackTrace(Throwable)</code>. Consider using a standard logging facility instead. </p>
∏

@grvy:org.codenarc.rule.groovyism.GetterMethodCouldBePropertyRuleÛ	
grvy;org.codenarc.rule.groovyism.GetterMethodCouldBePropertyRuleGetter Method Could Be Property"MAJOR*grvy2GetterMethodCouldBeProperty:‚<p>If a class defines a <code>public</code> method that follows the Java getter notation and that returns a constant, then it is cleaner to provide a Groovy property for the value rather than a Groovy method. </p>
<p>Example of violations: </p>
<pre>
    interface Parent {
        String getSomething()
        String getSomethingElse()
    }

    class Child extends Parent {
        static VALUE = 'value'

        @Override
        String getSomething() {
            'something'         // this could be simplified
        }

        @Override
        String getSomethingElse() {
            VALUE       // this could be simplified
        }

        int getOtherValue() {
            123
        }

        static String getName() {
            'MyName'
        }
    }

    class Child2 extends Parent {
        static VALUE = 'value'
        final String something = 'something'    // this is cleaner
        final String somethingElse = VALUE      // this is cleaner
        final int otherValue = 123              // this is cleaner
        static final String name = 'MyName'     // this is cleaner
    }
</pre>
â
>grvy:org.codenarc.rule.formatting.BracesForTryCatchFinallyRule∆
grvy9org.codenarc.rule.formatting.BracesForTryCatchFinallyRuleBraces For Try Catch Finally"MINOR*grvy2BracesForTryCatchFinally:Ω<p>Checks the location of the opening brace (\{) for try statements. By default, requires them on the line, but the <code>sameLine</code> property can be set to false to override this. </p>
Ë
:grvy:org.codenarc.rule.basic.RandomDoubleCoercedToZeroRule©
grvy5org.codenarc.rule.basic.RandomDoubleCoercedToZeroRuleRandom Double Coerced To Zero"MINOR*grvy2RandomDoubleCoercedToZero:¢<p>The Math.random() method returns a double result greater than or equal to 0.0 and less than 1.0. If you coerce this result into an Integer, Long, int, or long then it is coerced to zero. Casting the result to int, or assigning it to an int field is probably a bug. </p>
<p>Example of violations: </p>
<pre>
    (int) Math.random()
    (Integer) Math.random()
    int x = Math.random()
    Integer y = Math.random()
    int m() { Math.random() }
    Integer m() { Math.random() }
    (Math.random()) as int
    (Math.random()) as Integer
</pre>
Á
=grvy:org.codenarc.rule.unnecessary.UnnecessaryConstructorRule•
grvy8org.codenarc.rule.unnecessary.UnnecessaryConstructorRuleUnnecessary Constructor"MAJOR*grvy2UnnecessaryConstructor:§<p>This rule detects when a constructor is not necessary; i.e., when there's only one constructor, it's <code>public</code>, has an empty body, and takes no arguments, or else contains only a single call to <code>super()</code>. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        public MyClass() {          // violation; constructor is not necessary
        }
    }

    class MyClass2 extends OtherClass {
        MyClass2() {                // violation; constructor is not necessary
            super()
        }
    }
</pre>
˚
9grvy:org.codenarc.rule.concurrency.VolatileArrayFieldRuleΩ
grvy4org.codenarc.rule.concurrency.VolatileArrayFieldRuleVolatile Array Field"MINOR*grvy2VolatileArrayField:«<p>Volatile array fields are unsafe because the contents of the array are not treated as volatile. Changing the entire array reference is visible to other threads, but changing an array element is not. </p>
<p>This rule take from Alex Miller's <Java Concurrency in Practice> slides, available at <a>http://www.slideshare.net/alexmiller/java-concurrency-gotchas-3666977</a>. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        private volatile Object[] field1 = value()
        volatile field2 = value as Object[]
        volatile field3 = (Object[])foo
    }
</pre>
Ç
9grvy:org.codenarc.rule.basic.ConstantAssertExpressionRuleƒ
grvy4org.codenarc.rule.basic.ConstantAssertExpressionRuleConstant Assert Expression"MAJOR*grvy2ConstantAssertExpression:¬<p>Checks for <assert> statements with a constant value for the <assert> boolean expression, such as <code>true</code>, <code>false</code>, <code>null</code>, or a literal constant value. These <assert> statements will always pass or always fail, depending on the constant/literal value. Examples of violations include: </p>
<pre>
    assert true
    assert false, "assertion message"
    assert Boolean.TRUE
    assert Boolean.FALSE
    assert null
    assert 0
    assert 99.7
    assert ""
    assert "abc"
    assert [:]
    assert [a:123, b:456]
    assert [a, b, c]
</pre>
∆
4grvy:org.codenarc.rule.unused.UnusedPrivateFieldRuleç
grvy/org.codenarc.rule.unused.UnusedPrivateFieldRuleUnused Private Field"MINOR*grvy2UnusedPrivateField:ú<p>Checks for private fields that are not referenced within the same class. Note that the <code>private</code> modifier is not currently "respected" by Groovy code (i.e., Groovy can access <code>private</code> members within other classes). By default, fields named <code>serialVersionUID</code> are ignored. The rule has a property named ignoreFieldNames, which can be set to ignore other field names as well. For instance, to ignore fields named 'fieldx', set the property to the 'fieldx, serialVersionUID' </p>
<p>Known limitations: </p>
Â
;grvy:org.codenarc.rule.groovyism.CollectAllIsDeprecatedRule•
grvy6org.codenarc.rule.groovyism.CollectAllIsDeprecatedRuleCollect All Is Deprecated"MINOR*grvy2CollectAllIsDeprecated:§<p>The <code>collectAll</code> method is deprecated since Groovy 1.8.1. Use <code>collectNested</code> instead. </p>
<p>Example of violations: </p>
<pre>
def list = [1, 2, [3, 4, [5, 6]], 7]

list.collectAll { it * 2 }      // deprecated

list.collectNested { it * 2 }   // replacement
</pre>
¥
>grvy:org.codenarc.rule.design.BuilderMethodWithSideEffectsRuleÒ
grvy9org.codenarc.rule.design.BuilderMethodWithSideEffectsRule Builder Method With Side Effects"MINOR*grvy2BuilderMethodWithSideEffects:‡<p>A builder method is defined as one that creates objects. As such, they should never be of void return type. If a method is named build, create, or make, then it should always return a value. </p>
<p>This rule has one property: <code>methodNameRegex</code>. The default value is (make.*|create.*|build.*). Update this property if you have some  other naming convention for your builder methods. </p>
<p>Example of violations: </p>
<pre>

    class MyClass {

            void make() { /* ... */ }
            void makeSomething() { /* ... */ }

            void create() { /* ... */ }
            void createSomething() { /* ... */ }

            void build() { /* ... */ }
            void buildSomething() { /* ... */ }
    }
</pre>
¨
1grvy:org.codenarc.rule.braces.ElseBlockBracesRuleˆ
grvy,org.codenarc.rule.braces.ElseBlockBracesRuleElse Block Braces"MINOR*grvy2ElseBlockBraces:é<p>Checks that <else> blocks use braces, even for a single statement. </p>
<p>By default, braces are not required for an <else> if it is followed immediately by an <if>. Set the <bracesRequiredForElseIf> property to true to require braces is that situation as well. </p>
†
>grvy:org.codenarc.rule.exceptions.ReturnNullFromCatchBlockRule›
grvy9org.codenarc.rule.exceptions.ReturnNullFromCatchBlockRuleReturn Null From Catch Block"MINOR*grvy2ReturnNullFromCatchBlock:‘<p>Returning null from a catch block often masks errors and requires the client to handle error codes. In some coding styles this is discouraged. This rule ignores methods with <code>void</code> return type. </p>
Ü
:grvy:org.codenarc.rule.imports.UnnecessaryGroovyImportRule«
grvy5org.codenarc.rule.imports.UnnecessaryGroovyImportRuleUnnecessary Groovy Import"MAJOR*grvy2UnnecessaryGroovyImport:∆<p>Checks for an <import> from any package that is already automatically imported for Groovy files. A Groovy file does not need to include an import for classes from <java.lang>, <java.util>, <java.io>, <java.net>, <groovy.lang> and <groovy.util>, as well as the classes <java.math.BigDecimal> and <java.math.BigInteger>. </p>
Á
Bgrvy:org.codenarc.rule.formatting.MissingBlankLineAfterPackageRule†
grvy=org.codenarc.rule.formatting.MissingBlankLineAfterPackageRule Missing Blank Line After Package"MAJOR*grvy2MissingBlankLineAfterPackage:ã<p>Makes sure there is a blank line after the package statement of a source code file. </p>
<p>Example of violation: </p>
<pre>
  package org.codenarc
  import java.util.Date                     // violation

  class MyClass {
      void go() { /* ... */ }
  }
</pre>
’

<grvy:org.codenarc.rule.formatting.SpaceAfterOpeningBraceRuleî

grvy7org.codenarc.rule.formatting.SpaceAfterOpeningBraceRuleSpace After Opening Brace"MAJOR*grvy2SpaceAfterOpeningBrace:í	<p>Check that there is at least one space (blank) or whitespace after each opening brace ("\{") for method/class/interface declarations, closure expressions and block statements. </p>
 Examples of violations: </p>
<pre>
    class MyClass{int count }                   // violation

    interface MyInterface {static final OK = 1 }// violation

    enum MyEnum {OK, BAD }                      // violation

    def myMethod() {int count }                 // violation

    if (ready) {println 9 }                     // violation

    if (ready) {
    } else {println 99}                         // violation

    for (int i=0; i<10; i++) {println i }       // violation

    for (String name in names) {println name }  // violation

    for (String name: names) {println name }    // violation

    while (ready) {println time }               // violation

    try {doStuff()                              // violation
    } catch(Exception e) {x=77 }                // violation
    } finally {println 'error' }                // violation

    list.each {name -> }                        // violation

    shouldFail(Exception) {doStuff() }          // violation
</pre>
∂
?grvy:org.codenarc.rule.exceptions.CatchNullPointerExceptionRuleÚ
grvy:org.codenarc.rule.exceptions.CatchNullPointerExceptionRuleCatch Null Pointer Exception"MINOR*grvy2CatchNullPointerException:Á<p>Checks for catching a <code>NullPointerException</code>. Catching <code>NullPointerException</code> is never appropriate. It should be avoided in the first place with proper null checking, and it can mask underlying errors. </p>
ë
2grvy:org.codenarc.rule.convention.CouldBeElvisRule⁄
grvy-org.codenarc.rule.convention.CouldBeElvisRuleCould Be Elvis"MAJOR*grvy2CouldBeElvis:˜<p>Catch an if block that could be written as an elvis expression. </p>
<p>Example of violations: </p>
<pre>
    if (!x) {                   // violation
        x = 'some value'
    }

    if (!x)                     // violation
        x = "some value"

    if (!params.max) {          // violation
      params.max = 10
    }

    x ?: 'some value'           // OK
</pre>
µ
9grvy:org.codenarc.rule.naming.ClassNameSameAsFilenameRule˜
grvy4org.codenarc.rule.naming.ClassNameSameAsFilenameRuleClass Name Same As Filename"MINOR*grvy2ClassNameSameAsFilename:v<p>Reports files containing only one top level class / enum / interface which is named differently than the file. </p>
¢
Egrvy:org.codenarc.rule.design.ReturnsNullInsteadOfEmptyCollectionRuleÿ
grvy@org.codenarc.rule.design.ReturnsNullInsteadOfEmptyCollectionRule(Returns Null Instead Of Empty Collection"MINOR*grvy2#ReturnsNullInsteadOfEmptyCollection:±<p>If you have a method or closure that returns a collection, then when there are no results return a zero-length (empty) collection rather than <code>null</code>. It is often a better design to return a zero-length collection rather than a <code>null</code> reference to indicate that there are no results (i.e., an <empty> list of results). This way, no explicit check for <code>null</code> is needed by clients of the method. </p>
⁄
Agrvy:org.codenarc.rule.groovyism.ExplicitCallToMultiplyMethodRuleî
grvy<org.codenarc.rule.groovyism.ExplicitCallToMultiplyMethodRule Explicit Call To Multiply Method"MINOR*grvy2ExplicitCallToMultiplyMethod:Ä<p>This rule detects when the <code>multiply(Object)</code> method is called directly in code instead of using the <code>*</code> operator. A groovier  way to express this: <code>a.multiply(b)</code> is this: <code>a * b</code>. This rule can be configured to ignore <code>this.multiply(Object)</code> using the <ignoreThisReference> property. It defaults to <false>, so even <code>multiply(x)</code> will trigger a violation. </p>
<p>This rule also ignores all calls to <code>super.multiply(Object)</code>. </p>
·	
Egrvy:org.codenarc.rule.unnecessary.ConsecutiveStringConcatenationRuleó	
grvy@org.codenarc.rule.unnecessary.ConsecutiveStringConcatenationRule Consecutive String Concatenation"MAJOR*grvy2ConsecutiveStringConcatenation:˝<p>Catches concatenation of two string literals on the same line. These can safely by joined. In Java, the Java compiler will join two String literals together and place them in the Constant Pool. However, Groovy will not because the plus() method may override the + operator. </p>
<p>Examples: </p>
<pre>
    // Violations
    def a = 'Hello' + 'World'   // should be 'HelloWorld'
    def b = "$Hello" + 'World'  // should be "${Hello}World"
    def c = 'Hello' + "$World"  // should be "Hello${World}"
    def d = 'Hello' + 5         // should be 'Hello5'
    def e = 'Hello' + '''
                        world   // should be joined
                      '''
    def f = '''Hello
                  ''' + 'world'   // should be joined


    // Not Violations
    def g = 'Hello' +           // OK because of line break
                'World'
    def h = 'Hello' + null      // OK because not a string
    def i = 'Hello' + method()  // OK because not a string
    def j = 'Hello' - "$World"  // OK because not +
</pre>
ë
Agrvy:org.codenarc.rule.groovyism.ClosureAsLastMethodParameterRuleÀ
grvy<org.codenarc.rule.groovyism.ClosureAsLastMethodParameterRule Closure As Last Method Parameter"MAJOR*grvy2ClosureAsLastMethodParameter:∑<p>If a method is called and the last parameter is an inline closure then it can be declared outside of the method call parentheses. </p>
<p>Example of violations: </p>
<pre>
    // creates violation: poor Groovy style
    [1,2,3].each({ println it })

    // no violation
    [1,2,3].each { println it }
</pre>
Õ
-grvy:org.codenarc.rule.naming.PackageNameRuleõ
grvy(org.codenarc.rule.naming.PackageNameRulePackage Name"MINOR*grvy2PackageName:¿<p>Verifies that the package name of a class matches a regular expression. By default it checks that the package name consists of only lowercase letters and numbers, separated by periods. </p>
’	
Dgrvy:org.codenarc.rule.unnecessary.UnnecessaryCallForLastElementRuleå	
grvy?org.codenarc.rule.unnecessary.UnnecessaryCallForLastElementRule!Unnecessary Call For Last Element"MAJOR*grvy2UnnecessaryCallForLastElement:Û<p>This rule checks for excessively verbose methods of accessing the last element of an array or list. For instance, it is possible to access the last element of an array by performing <code>array[array.length - 1]</code>, in Groovy it is simpler to either call <code>array.last()</code> or <code>array[-1]</code>. The same is true for lists. This violation is triggered whenever a <code>get</code>, <code>getAt</code>, or array-style access is used with an object size check. </p>
<p>Code like this all cause violations. </p>
<pre>
    def x = [0, 1, 2]
    def a = x.get(x.size() -1)
    def b = x.get(x.length -1)
    def c = x.getAt(x.size() -1)
    def d = x.getAt(x.length -1)
    def f = x[(x.size() -1]
    def d = x[(x.length -1]
</pre>
<pre>
    def x = [0, 1, 2]
    def a = x.last()
    def b = x[-1]
    def c = x.getAt(-1)
    def d = x.get(z.size() -1)     // different objects
    def e = x.get(z.length -1)     // different objects
    def f = x.getAt(z.size() -1)   // different objects
</pre>
»
Dgrvy:org.codenarc.rule.groovyism.ExplicitLinkedListInstantiationRuleˇ
grvy?org.codenarc.rule.groovyism.ExplicitLinkedListInstantiationRule"Explicit Linked List Instantiation"MINOR*grvy2ExplicitLinkedListInstantiation:„<p>This rule checks for explicit calls to the no-argument constructor of <code>LinkedList</code>. In Groovy, it is best to replace <code>new LinkedList()</code> with <code>[] as Queue</code>, which creates the same object. </p>
Ò
Kgrvy:org.codenarc.rule.design.AssignmentToStaticFieldFromInstanceMethodRule°
grvyForg.codenarc.rule.design.AssignmentToStaticFieldFromInstanceMethodRule/Assignment To Static Field From Instance Method"MINOR*grvy2)AssignmentToStaticFieldFromInstanceMethod:Á<p>Checks for assignment to a static field from an instance method. </p>
<p>Influenced by the <code>AssignmentToNonFinalStatic</code> rule from <code>PMD</code>, and the <code>ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD</code> rule from <code>FindBugs</code>. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {
        private static field1
        protected static String field2 = 'abc'
        public static int field3 = 123
        static String property1 = 'abc'
        private static final NAME = 'joe'

        private void doStuff() {
            field1 = new Object()       // violation
            field2 = 'xxx'              // violation
            field3 = 999                // violation
            property1 = 'xxx'           // violation

            final NAME = 'martin'       // no violation; local var hides static field
        }
    }
</pre>
ı
8grvy:org.codenarc.rule.concurrency.UseOfNotifyMethodRule∏
grvy3org.codenarc.rule.concurrency.UseOfNotifyMethodRuleUse Of Notify Method"MINOR*grvy2UseOfNotifyMethod:ƒ<p>Checks for code that calls <code>notify()</code> rather than <code>notifyAll()</code>. Java monitors are often used for multiple conditions. Calling <code>notify()</code> only wakes up one thread, meaning that the awakened thread might not be the one waiting for the condition that the caller just satisfied. </p>
<p>Also see <a href="http://www.javaconcurrencyinpractice.com/"><code>Java_Concurrency_in_Practice</code></a>, Brian Goetz, p 303. </p>
∫
:grvy:org.codenarc.rule.basic.ExplicitGarbageCollectionRule˚
grvy5org.codenarc.rule.basic.ExplicitGarbageCollectionRuleExplicit Garbage Collection"MINOR*grvy2ExplicitGarbageCollection:ˆ<p>Calls to <code>System.gc()</code>, <code>Runtime.getRuntime().gc()</code>, and <code>System.runFinalization()</code> are not advised. Code should have the same behavior whether the garbage collection is disabled using the option <code>-Xdisableexplicitgc</code> or not. Moreover, "modern" JVMs do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself. </p>

Cgrvy:org.codenarc.rule.unnecessary.UnnecessaryBooleanExpressionRule®
grvy>org.codenarc.rule.unnecessary.UnnecessaryBooleanExpressionRuleUnnecessary Boolean Expression"MAJOR*grvy2UnnecessaryBooleanExpression:î
<p>Checks for unnecessary boolean expressions, including ANDing (&&) or ORing (||) with <code>true</code>, <code>false</code>, <code>null</code>, or a Map/List/String/Number literal. </p>
<p>This rule also checks for negation (!) of <code>true</code>, <code>false</code>, <code>null</code>, or a Map/List/String/Number literal. </p>
<p>Examples of violations include: </p>
<pre>
    result = value && true              // AND or OR with boolean constants
    if (false || value) { .. }
    return value && Boolean.FALSE

    result = null && value              // AND or OR with null

    result = value && "abc"             // AND or OR with String literal

    result = value && 123               // AND or OR with Number literal
    result = 678.123 || true

    result = value && [x, y]            // AND or OR with List literal

    result = [a:123] && value           // AND or OR with Map literal

    result = !true                      // Negation of boolean constants
    result = !false
    result = !Boolean.TRUE

    result = !null                      // Negation of null

    result = !"abc"                     // Negation of String literal

    result = ![a:123]                   // Negation of Map literal

    result = ![a,b]                     // Negation of List literal
</pre>
ø
5grvy:org.codenarc.rule.unused.UnusedPrivateMethodRuleÖ
grvy0org.codenarc.rule.unused.UnusedPrivateMethodRuleUnused Private Method"MINOR*grvy2UnusedPrivateMethod:ë<p>Checks for private methods that are not referenced within the same class. Note that the <code>private</code> modifier is not currently "respected" by Groovy code (i.e., Groovy can access <code>private</code> members within other classes). </p>
<p>Known limitations: </p>
¥
5grvy:org.codenarc.rule.naming.ParameterNameRule.fixed˙
grvy0org.codenarc.rule.naming.ParameterNameRule.fixedParameter Name"MINOR*grvy2ParameterName:ì<p>Verifies that the name of each parameter matches a regular expression. This rule applies to method parameters, constructor parameters and closure parameters. By default it checks that parameter names start with a lowercase letter and contains only letters or numbers. </p>
à
Cgrvy:org.codenarc.rule.concurrency.SynchronizedReadObjectMethodRule¿
grvy>org.codenarc.rule.concurrency.SynchronizedReadObjectMethodRuleSynchronized Read Object Method"MINOR*grvy2SynchronizedReadObjectMethod:´<p>Catches Serializable classes that define a synchronized readObject method. By definition, an object created by deserialization is only reachable by one thread, and thus there is no need for readObject() to be synchronized. If the readObject() method itself is causing the object to become visible to another thread, that is an example of very dubious coding style. </p>
<p>Examples: </p>
<pre>
    class MyClass implements Serializable {

        private synchronized void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {
            // violation, no need to synchronized
        }
    }

    class MyClass implements Serializable {

        private void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {
            synchronized(lock) {
                // violation, no need to synchronized
            }
        }
    }

    // OK, class not Serializable
    class MyClass {

        private synchronized void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException { }
    }

    // OK, class not Serializable
    class MyClass {

        private void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {
            synchronized(lock) { }
        }
    }

    class MyClass implements Serializable {

        private void readObject(ObjectInputStream input) throws IOException, ClassNotFoundException {
            // OK, this block is more than just a simple sync statement
            synchronized(lock) { }
            doSomething()
        }
    }
</pre>
Œ
:grvy:org.codenarc.rule.imports.MisorderedStaticImportsRuleè
grvy5org.codenarc.rule.imports.MisorderedStaticImportsRuleMisordered Static Imports"MAJOR*grvy2MisorderedStaticImports:é<p>Checks for static <import> statements which should never be after nonstatic imports.</p>
<p>This rule has one property <code>comesBefore</code>, which defaults to true. If you like your static imports to come after the others, then set this property to false. </p>
<p>Examples of violations: </p>
<pre>
    import my.something.another
    import static foo.bar

    public class MyClass{}
</pre>
˛
6grvy:org.codenarc.rule.braces.WhileStatementBracesRule√
grvy1org.codenarc.rule.braces.WhileStatementBracesRuleWhile Statement Braces"MINOR*grvy2WhileStatementBraces:M<p>Checks that while statements use braces, even for a single statement. </p>
á
9grvy:org.codenarc.rule.concurrency.SynchronizedOnThisRule…
grvy4org.codenarc.rule.concurrency.SynchronizedOnThisRuleSynchronized On This"MINOR*grvy2SynchronizedOnThis:”<p>This rule reports uses of the <code>synchronized</code> blocks where the synchronization reference is 'this'. Doing this effectively makes your synchronization policy public and modifiable by other objects. To avoid possibilities of deadlock, it is better to synchronize on internal objects. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def method3() {
        synchronized(this) {
            // do stuff ...
        }
    }
</pre>
¬
7grvy:org.codenarc.rule.basic.EmptyStaticInitializerRuleÜ
grvy2org.codenarc.rule.basic.EmptyStaticInitializerRuleEmpty Static Initializer"MINOR*grvy2EmptyStaticInitializer:ä<p>An empty static initializer was found. It is safe to remove it. Example: </p>
<pre>
    class MyClass {
        static { }
    }
</pre>
…
:grvy:org.codenarc.rule.design.BooleanMethodReturnsNullRuleä
grvy5org.codenarc.rule.design.BooleanMethodReturnsNullRuleBoolean Method Returns Null"MINOR*grvy2BooleanMethodReturnsNull:Ü<p>Checks for a method with <code>Boolean</code> return type that returns an explicit <code>null</code>. A method that returns either <code>Boolean.TRUE</code>, <code>Boolean.FALSE</code> or <code>null</code> is an accident waiting to happen. This method can be invoked as though it returned a value of type <code>boolean</code>, and the compiler will insert automatic <unboxing> of the <code>Boolean</code> value. If a <code>null</code> value is returned, this will result in a <code>NullPointerException</code>. </p>
£
>grvy:org.codenarc.rule.basic.HardCodedWindowsRootDirectoryRule‡
grvy9org.codenarc.rule.basic.HardCodedWindowsRootDirectoryRule!Hard Coded Windows Root Directory"MINOR*grvy2HardCodedWindowsRootDirectory:Õ<p>This rule find cases where a File object is constructed with a windows-based path. This is not portable across operating systems or different machines, and using  the File.listRoots() method is a better alternative. </p>
<p>Example of violations: </p>
<pre>
   new File('c:\\')
   new File('c:\\dir')
   new File('E:\\dir')
</pre>
ˆ
,grvy:org.codenarc.rule.basic.EmptyMethodRule≈
grvy'org.codenarc.rule.basic.EmptyMethodRuleEmpty Method"MINOR*grvy2EmptyMethod:Î<p>A method was found without an implementation. If the method is overriding or implementing a parent method, then mark it with the <code>@Override</code> annotation. This rule should not be used with Java 5 code because you cannot put <code>@Override</code> on a method implementing an interface. Use with Java 6 and higher. </p>
<p>Example of violations: </p>
<pre>
    class MyClass {

        // violation, empty method
        public void method1() {}

        // violation, empty method
        def method2() {}

        // OK because of @Override
        @Override
        public void method3() {}
    }

    abstract class MyBaseClass {
        // OK, handled by EmptyMethodInAbstractClass Rule
        public void method() {}
    }
</pre>
¡
)grvy:org.codenarc.rule.basic.DeadCodeRuleì
grvy$org.codenarc.rule.basic.DeadCodeRule	Dead Code"MINOR*grvy2DeadCode:¬<p>Dead code appears after a <code>return</code> statement or an exception is thrown. If code appears after one of these statements then it will never be executed and can be safely deleted. </p>
Å
>grvy:org.codenarc.rule.basic.HardCodedWindowsFileSeparatorRuleæ
grvy9org.codenarc.rule.basic.HardCodedWindowsFileSeparatorRule!Hard Coded Windows File Separator"MINOR*grvy2HardCodedWindowsFileSeparator:´<p>This rule finds usages of a Windows file separator within the constructor call of a File object. It is better to use the Unix file separator or use the File.separator constant. </p>
<p>Example of violations: </p>
<pre>
   new File('.\\foo\\')
   new File('c:\\dir')
   new File('../foo\\')
</pre>
ê
9grvy:org.codenarc.rule.groovyism.AssignCollectionSortRule“
grvy4org.codenarc.rule.groovyism.AssignCollectionSortRuleAssign Collection Sort"MINOR*grvy2AssignCollectionSort:ÿ<p>The Collections.sort() method mutates the list and returns the list as a value. If you are assigning the result of sort() to a variable, then you probably don't realize that you're also modifying the original list as well. This is frequently the cause of subtle bugs. This violation is triggered when a sort() method call appears as the right hand side of an assignment, or when it appears as the first method call in a series of chained method calls. </p>
<p>Example of violations: </p>
<pre>
  def a = myList.sort()
  def b = myList.sort() { it }
  def c = myList.sort().findAll { x < 1 }
</pre>
£
<grvy:org.codenarc.rule.formatting.BlankLineBeforePackageRule‚
grvy7org.codenarc.rule.formatting.BlankLineBeforePackageRuleBlank Line Before Package"MAJOR*grvy2BlankLineBeforePackage:a<p>Makes sure there are no blank lines before the package declaration of a source code file. </p>
˝
Dgrvy:org.codenarc.rule.naming.ObjectOverrideMisspelledMethodNameRule¥
grvy?org.codenarc.rule.naming.ObjectOverrideMisspelledMethodNameRule&Object Override Misspelled Method Name"MINOR*grvy2"ObjectOverrideMisspelledMethodName:ë<p> Verifies that the names of the most commonly overridden methods of <code>Object</code>: <code>equals</code>, <code>hashCode</code> and <code>toString</code>, are correct. </p>
<p>Here are some examples of code that produces violations: </p>
<pre>
    boolean equal(Object o) {}                  // violation
    boolean equal(int other) {}                 // ok; wrong param type
    boolean equal(Object o, int other) {}       // ok; too many params

    boolean equaLS(Object o) {}                 // violation

    int hashcode() {}                           // violation
    int hashCOde() {}                           // violation
    int hashcode(int value) {}                  // ok; not empty params

    String tostring() {}                        // violation
    String toSTring() {}                        // violation
    String tostring(int value) {}               // ok; not empty params
</pre>
¶
Dgrvy:org.codenarc.rule.unnecessary.UnnecessaryFloatInstantiationRule›
grvy?org.codenarc.rule.unnecessary.UnnecessaryFloatInstantiationRuleUnnecessary Float Instantiation"MAJOR*grvy2UnnecessaryFloatInstantiation:∆<p>It is unnecessary to instantiate <code>Float</code> objects. Instead just use the float literal with the 'F' identifier to force the type, such as <code>123.45F</code> or <code>0.42f</code>. </p>
ˆ
:grvy:org.codenarc.rule.basic.ConstantTernaryExpressionRule∑
grvy5org.codenarc.rule.basic.ConstantTernaryExpressionRuleConstant Ternary Expression"MINOR*grvy2ConstantTernaryExpression:≤<p>Checks for ternary expressions with a constant value for the boolean expression, such as <code>true</code>, <code>false</code>, <code>null</code>, or a literal constant value. Examples of violations include: </p>
<pre>
    true ? x : y
    false ? x : y
    Boolean.TRUE ? x : y
    Boolean.FALSE ? x : y
    null ? x : y
    0 ? x : y
    99.7 ? x : y
    "" ? x : y
    "abc" ? x : y
    [:] ? x : y
    [a:123, b:456] ? x : y
    [a, b, c] ? x : y
</pre>
<pre>
    true ?: y
    null ?: y
    99.7 ?: y
    "abc" ?: y
    [:] ?: y
    [a, b, c] ?: y
</pre>
á
Egrvy:org.codenarc.rule.unnecessary.UnnecessaryStringInstantiationRuleΩ
grvy@org.codenarc.rule.unnecessary.UnnecessaryStringInstantiationRule Unnecessary String Instantiation"MAJOR*grvy2UnnecessaryStringInstantiation:£<p>Checks for direct call to the <code>String</code> constructor that accepts a <code>String</code> literal. In almost all cases, this is unnecessary. Use a <code>String</code> literal (e.g., "...") instead of calling the corresponding <code>String</code> constructor (<code>new String("..")</code>) directly. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def s = new String('abc')
</pre>
ë
3grvy:org.codenarc.rule.basic.BrokenOddnessCheckRuleŸ
grvy.org.codenarc.rule.basic.BrokenOddnessCheckRuleBroken Oddness Check"MINOR*grvy2BrokenOddnessCheck:È<p>The code uses <code>x % 2 == 1</code> to check to see if a value is odd, but this won't work for negative numbers (e.g., <code>(-5) % 2 == -1)</code>. If this code is intending to check for oddness, consider using <code>x & 1 == 1</code>, or <code> x % 2 != 0</code>. </p>
<p>Examples: </p>
<pre>
    if (x % 2 == 1) { }             // violation
    if (method() % 2 == 1) { }      // violation

    if (x & 1 == 1) { }             // OK
    if (x % 2 != 0) { }             // OK
</pre>
Ú
)grvy:org.codenarc.rule.size.ClassSizeRuleƒ
grvy$org.codenarc.rule.size.ClassSizeRule
Class Size"MAJOR*grvy2	ClassSize:r<p>Checks if the size of a class exceeds the number of lines specified by the <code>maxLines</code> property. </p>
°
:grvy:org.codenarc.rule.unnecessary.UnnecessaryDotClassRule‚
grvy5org.codenarc.rule.unnecessary.UnnecessaryDotClassRuleUnnecessary Dot Class"MAJOR*grvy2UnnecessaryDotClass:È<p>To make a reference to a class, it is unnecessary to specify the '.class' identifier. For instance String.class can be shortened to String. </p>
<p>Example of violations: </p>
<pre>
    // The '.class' identifier is unnecessary, violation occurs
    def x = String.class

    // Ok, unnecessary '.class' identifier has been excluded
    def x = String
</pre>
≥
Igrvy:org.codenarc.rule.unnecessary.UnnecessaryBigIntegerInstantiationRuleÂ
grvyDorg.codenarc.rule.unnecessary.UnnecessaryBigIntegerInstantiationRule%Unnecessary Big Integer Instantiation"MAJOR*grvy2"UnnecessaryBigIntegerInstantiation:æ<p>It is unnecessary to instantiate <code>BigInteger</code> objects. Instead just use the literal with the 'G' identifier to force the type, such as <code>8G</code> or <code>42G</code>. </p>
Ω
5grvy:org.codenarc.rule.basic.EmptySwitchStatementRuleÉ
grvy0org.codenarc.rule.basic.EmptySwitchStatementRuleEmpty Switch Statement"MINOR*grvy2EmptySwitchStatement:ç<p>Checks for empty <switch> statements. Empty <switch> statements are confusing and serve no purpose. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def myMethod() {
        switch(myVariable) {
            // empty
        }
    }
</pre>
ã
Bgrvy:org.codenarc.rule.grails.GrailsDomainWithServiceReferenceRuleƒ
grvy=org.codenarc.rule.grails.GrailsDomainWithServiceReferenceRule$Grails Domain With Service Reference"MINOR*grvy2 GrailsDomainWithServiceReference:ß<p>Checks that Grails Domain classes do not have Service classes injected. </p>
<p>This rule sets the default value of <code>applyToFilesMatching</code> to only match files under the 'grails-app/domain' folder. You can override this with a different regular expression value if appropriate. </p>
Ë
5grvy:org.codenarc.rule.formatting.BracesForIfElseRuleÆ
grvy0org.codenarc.rule.formatting.BracesForIfElseRuleBraces For If Else"MINOR*grvy2BracesForIfElse:¡<p>Checks the location of the opening brace (\{) for if statements. By default, requires them on the same line, but the <code>sameLine</code> property can be set to false to override this. </p>
’
<grvy:org.codenarc.rule.formatting.SpaceAfterClosingBraceRuleî
grvy7org.codenarc.rule.formatting.SpaceAfterClosingBraceRuleSpace After Closing Brace"MAJOR*grvy2SpaceAfterClosingBrace:í<p>Check that there is at least one space (blank) or whitespace after each closing brace ("\{") for method/class/interface declarations, closure expressions and block statements. </p>
<p>A closure expression followed by a dot operator (.), a comma, a closing parenthesis, the spread-dot operator (*.), a semicolon or the null-safe operator (?.) does not cause a violation. </p>
 Known limitations: </p>
∆
<grvy:org.codenarc.rule.concurrency.StaticDateFormatFieldRuleÖ
grvy7org.codenarc.rule.concurrency.StaticDateFormatFieldRuleStatic Date Format Field"MINOR*grvy2StaticDateFormatField:Ö<p><code>DateFormat</code> objects should not be used as <code>static</code> fields. DateFormats are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random <code>ArrayIndexOutOfBoundsException</code> or <code>IndexOutOfBoundsException</code> in <code>sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate()</code>. You may also experience serialization problems. Using an instance field or a <code>ThreadLocal</code> is recommended. </p>
<p>For more information on this see Sun Bug #6231579 and Sun Bug #6178997. </p>
<p>Examples: </p>
<pre>
    // Violations
    class MyClass {
        static DateFormat dateFormat1
        static java.text.DateFormat dateFormat2

        static final DATE1 = DateFormat.getDateInstance(DateFormat.LONG, Locale.FRANCE)
        static final def DATE2 = DateFormat.getDateInstance(DateFormat.LONG)
        static Object date3 = DateFormat.getDateInstance()

        static final DATETIME1 = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.SHORT, Locale.FRANCE)
        static final def DATETIME2 = DateFormat.getDateTimeInstance(DateFormat.LONG, DateFormat.SHORT)
        static final Object DATETIME3 = DateFormat.getDateTimeInstance()

        static final TIME1 = DateFormat.getTimeInstance(DateFormat.LONG, Locale.FRANCE)
        static final def TIME2 = DateFormat.getTimeInstance(DateFormat.LONG)
        static final Object TIME3 = DateFormat.getTimeInstance()
    }

    // These usages are OK
    class MyCorrectClass {
        private DateFormat calendar1
        static ThreadLocal<DateFormat> calendar2
    }
</pre>
Â
Cgrvy:org.codenarc.rule.naming.InterfaceNameSameAsSuperInterfaceRuleù
grvy>org.codenarc.rule.naming.InterfaceNameSameAsSuperInterfaceRule&Interface Name Same As Super Interface"MINOR*grvy2!InterfaceNameSameAsSuperInterface:¸<p>Checks for any interface that has an identical name to its super-interface, other than the package. This can be very confusing. </p>
<p>Example of violations: </p>
<pre>
    interface MyInterface extends other.MyInterface { }     // violation
</pre>
§
@grvy:org.codenarc.rule.concurrency.ThreadLocalNotStaticFinalRuleﬂ
grvy;org.codenarc.rule.concurrency.ThreadLocalNotStaticFinalRuleThread Local Not Static Final"MINOR*grvy2ThreadLocalNotStaticFinal:“<p>This rule reports definition of the <code>ThreadLocal</code> fields that are not <code>static</code> and <code>final</code>. </p>
<p><ThreadLocal> fields should be <code>static</code> and <code>final</code>. In the most common case a <code>java.lang.ThreadLocal</code> instance associates state with a thread. A non-<code>static</code> non-<code>final</code> <code>java.lang.ThreadLocal</code> field associates state with an instance-thread combination. This is seldom necessary and often a bug which can cause memory leaks and possibly incorrect behavior. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    private static ThreadLocal local1 = new ThreadLocal()
    private final ThreadLocal local2 = new ThreadLocal()
    protected ThreadLocal local3 = new ThreadLocal()
    ThreadLocal local4 = new ThreadLocal()
</pre>
Ø
6grvy:org.codenarc.rule.unused.UnusedVariableRule.fixedÙ
grvy1org.codenarc.rule.unused.UnusedVariableRule.fixedUnused Variable"MINOR*grvy2UnusedVariable:ä<p>Checks for variables that are never referenced. </p>
<p>The rule has a property named ignoreVariableNames, which can be set to ignore some variable names. For instance, to ignore fields named 'unused', set the property to 'unused'. </p>
<p>Known limitations: </p>
ø
Fgrvy:org.codenarc.rule.unnecessary.UnnecessaryBooleanInstantiationRuleÙ
grvyAorg.codenarc.rule.unnecessary.UnnecessaryBooleanInstantiationRule!Unnecessary Boolean Instantiation"MAJOR*grvy2UnnecessaryBooleanInstantiation:◊<p>Checks for direct call to a <code>Boolean</code> constructor. Use <code>Boolean.valueOf()</code> or the <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> constants instead of calling the <code>Boolean()</code> constructor directly. </p>
<p>Also checks for <code>Boolean.valueOf(true)</code> or <code>Boolean.valueOf(false)</code>. Use the <code>Boolean.TRUE</code> or <code>Boolean.FALSE</code> constants instead. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    def b1 = new Boolean(true)             // violation
    def b2 = new java.lang.Boolean(false)  // violation
    def b3 = Boolean.valueOf(true)         // violation
    def b4 = Boolean.valueOf(false)        // violation
</pre>
ù
2grvy:org.codenarc.rule.concurrency.ThreadGroupRuleÊ
grvy-org.codenarc.rule.concurrency.ThreadGroupRuleThread Group"MINOR*grvy2ThreadGroup:Ü<p>Avoid using <code>ThreadGroup</code>; although it is intended to be used in a threaded environment it contains methods that are not thread safe. </p>
<p>Here is an example of code that produces a violation: </p>
<pre>
    new ThreadGroup("...")
    new ThreadGroup(tg, "my thread group")
    Thread.currentThread().getThreadGroup()
    System.getSecurityManager().getThreadGroup()
</pre>
Â
=grvy:org.codenarc.rule.concurrency.SynchronizedOnGetClassRule£
grvy8org.codenarc.rule.concurrency.SynchronizedOnGetClassRuleSynchronized On Get Class"MINOR*grvy2SynchronizedOnGetClass:†<p>Checks for synchronization on <code>getClass()</code> rather than class literal. This instance method synchronizes on <code>this.getClass()</code>. If this class is subclassed, subclasses will synchronize on the class object for the subclass, which isn't likely what was intended. </p>
ã
@grvy:org.codenarc.rule.unnecessary.UnnecessaryPublicModifierRule∆
grvy;org.codenarc.rule.unnecessary.UnnecessaryPublicModifierRuleUnnecessary Public Modifier"MAJOR*grvy2UnnecessaryPublicModifier:ª<p>The 'public' modifier is not required on methods, constructors or classes. </p>
<p>Example of violations: </p>
<pre>
    // violation on class
    public class MyClass {
        // violation on constructor
        public MyClass() {}

        // violation on method
        public void myMethod() {}
    }
</pre>
π
:grvy:org.codenarc.rule.concurrency.StaticCalendarFieldRule˙

grvy5org.codenarc.rule.concurrency.StaticCalendarFieldRuleStatic Calendar Field"MINOR*grvy2StaticCalendarField:Å
<p><code>Calendar</code> objects should not be used as <code>static</code> fields. Calendars are inherently unsafe for multithreaded use. Sharing a single instance across thread boundaries without proper synchronization will result in erratic behavior of the application. Under 1.4 problems seem to surface less often than under Java 5 where you will probably see random <code>ArrayIndexOutOfBoundsException</code> or <code>IndexOutOfBoundsException</code> in <code>sun.util.calendar.BaseCalendar.getCalendarDateFromFixedDate()</code>. You may also experience serialization problems. Using an instance field or a <code>ThreadLocal</code> is recommended. </p>
<p>For more information on this see Sun Bug #6231579 and Sun Bug #6178997. </p>
<p>Examples: </p>
<pre>
    // Violations
    class MyClass {
        static Calendar calendar1
        static java.util.Calendar calendar2

        static final CAL1 = Calendar.getInstance()
        static final CAL2 = Calendar.getInstance(Locale.FRANCE)
        static def cal3 = Calendar.getInstance(timezone)
        static Object cal4 = Calendar.getInstance(timezone, locale)
    }

    // These usages are OK
    class MyCorrectClass {
        private final Calendar calendar1
        static ThreadLocal<Calendar> calendar2
    }
</pre>
˘
8grvy:org.codenarc.rule.groovyism.GroovyLangImmutableRuleº
grvy3org.codenarc.rule.groovyism.GroovyLangImmutableRuleGroovy Lang Immutable"MINOR*grvy2GroovyLangImmutable:≈<p>The <code>groovy.lang.Immutable</code> annotation has been deprecated and replaced by <code>groovy.transform.Immutable</code>. Do not use the <code>Immutable</code> in <code>groovy.lang</code>. </p>
<p>Example of violations: </p>
<pre>
    @Immutable
    class Person { }

    @groovy.lang.Immutable
    class Person { }

    import groovy.lang.Immutable as Imtl
    @Imtl
    class Person { }

    // the following code is OK
    @groovy.transform.Immutable
    class Person { }

    import groovy.transform.Immutable
    @Immutable
    class Person { }

    import groovy.transform.*
    @Immutable
    class Person { }

    import groovy.transform.Immutable as Imtl
    @Imtl
    class Person { }
</pre>
ﬂ
Ggrvy:org.codenarc.rule.groovyism.ExplicitLinkedHashMapInstantiationRuleì
grvyBorg.codenarc.rule.groovyism.ExplicitLinkedHashMapInstantiationRule&Explicit Linked Hash Map Instantiation"MINOR*grvy2"ExplicitLinkedHashMapInstantiation:Ì<p>This rule checks for the explicit instantiation of a <code>LinkedHashMap</code> using the no-arg constructor. In Groovy, it is best to replace <code>new LinkedHashMap()</code> with <code>[:]</code>, which creates the same object. </p>
®
Egrvy:org.codenarc.rule.unnecessary.UnnecessaryDoubleInstantiationRuleﬁ
grvy@org.codenarc.rule.unnecessary.UnnecessaryDoubleInstantiationRule Unnecessary Double Instantiation"MAJOR*grvy2UnnecessaryDoubleInstantiation:ƒ<p>It is unnecessary to instantiate <code>Double</code> objects. Instead just use the double literal with 'D' identifier to force the type, such as <code>123.45d</code> or <code>0.42d</code>. </p>
™
common-xml:FailedUnitTestsã

common-xmlFailedUnitTests!Failed unit tests should be fixed"MAJOR*xml:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.
‰
common-xml:DuplicatedBlocksƒ

common-xmlDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*xml:dAn issue is created on a file as soon as there is at least one block of duplicated code on this file
Ä
common-xml:SkippedUnitTests‡

common-xmlSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*xml:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.
é
%common-xml:InsufficientCommentDensity‰

common-xmlInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*xml:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.
”
#common-xml:InsufficientLineCoverage´

common-xmlInsufficientLineCoverage3Lines should have sufficient coverage by unit tests"MAJOR*xml:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.
ﬁ
%common-xml:InsufficientBranchCoverage¥

common-xmlInsufficientBranchCoverage6Branches should have sufficient coverage by unit tests"MAJOR*xml:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.
ß
common-cs:FailedUnitTestsâ
	common-csFailedUnitTests!Failed unit tests should be fixed"MAJOR*cs:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.
˝
common-cs:SkippedUnitTestsﬁ
	common-csSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*cs:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.
·
common-cs:DuplicatedBlocks¬
	common-csDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*cs:dAn issue is created on a file as soon as there is at least one block of duplicated code on this file
ã
$common-cs:InsufficientCommentDensity‚
	common-csInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*cs:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.
–
"common-cs:InsufficientLineCoverage©
	common-csInsufficientLineCoverage3Lines should have sufficient coverage by unit tests"MAJOR*cs:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.
€
$common-cs:InsufficientBranchCoverage≤
	common-csInsufficientBranchCoverage6Branches should have sufficient coverage by unit tests"MAJOR*cs:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.
±
squid:S1258°
squidS1258@Classes and enums with private members should have a constructor"MAJOR*java2S1258:∫<p>
  Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>,
  <code>private</code> members should explicitly initialize those members,
  either in a constructor or with a default value.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class A { // Noncompliant
  private int field;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class A {
  private int field;

  A(int field) {
    this.field = field;
  }
}
</pre>
é
squid:S2225˛
squidS22259"toString()" and "clone()" methods should not return null"CRITICAL*java2S2225:õ<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code> instead contravenes the method's implicit contract.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public override string ToString () {
  if (this.collection.Count == 0) {
    return null; // Noncompliant
  } else {
    // ...
 </pre>
<h2>Compliant Solution</h2>

<pre>
public override string ToString () {
  if (this.collection.Count == 0) {
    return "";
  } else {
    // ...
 </pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference
</li></ul>
ˆ
squid:S00115Â
squidS001155Constant names should comply with a naming convention"MINOR*java2S00115:á<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>
<pre>
public class MyClass {
  public static final int first = 1;
}

public enum MyEnum {
  first;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class MyClass {
  public static final int FIRST = 1; 
}

public enum MyEnum {
  FIRST;
}
</pre>
Â
squid:S2226’
squidS22260Servlets should not have mutable instance fields"CRITICAL*java2S2226:˚<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to process this request. So all threads are sharing the servlet instances and by extension instance fields.  To prevent any misunderstanding and unexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>
<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently
  ...
}
</pre>
<p>or </p>
<pre>
public class MyAction extends Action {
  private String userName;  //Same reason
  ...
}
</pre>
©
squid:S00116ò
squidS001162Field names should comply with a naming convention"MINOR*java2S00116:Ω<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
class MyClass {
   private int my_field;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {
   private int myField;
}
</pre>
ı
squid:S1135Â
squidS1135"TODO" tags should be handled"INFO*java2S1135:¢<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>

<pre>
void doSomething() {
  // TODO
}
</pre>
í
squid:S00113Å
squidS001131Files should contain an empty new line at the end"MINOR*java2S00113:ß<p>Some tools such as Git work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>
‘
squid:S1134ƒ
squidS1134"FIXME" tags should be handled"MAJOR*java2S1134:ˇ<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>
<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>
<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>
<h2>Noncompliant Code Example</h2>

<pre>
int divide(int numerator, int denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
∂
squid:S00114•
squidS001146Interface names should comply with a naming convention"MINOR*java2S00114:∆<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
public interface myInterface {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
public interface MyInterface {...}
</pre>
“
squid:S2221¬
squidS2221D"Exception" should not be caught when not required by called methods"CRITICAL*java2S2221:‘
<p>
  Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions.
  Unfortunately, it traps all exception types and so both checked and runtime exceptions, casting too broad a net.
  Indeed, was it really the intention of developers to also catch runtime exceptions? To prevent any misunderstanding,
  if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed in the <code>catch</code> clause.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
try {
  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException
} catch (Exception e) { // Noncompliant
  // log exception ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {
  // log exception ...
}
</pre>
<p>or if runtime exceptions should not be caught:</p>
<pre>
try {
  // do something
} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {
  // log exception ...
}
</pre>

<h2>Exceptions</h2>
<p>No issue is raised if a method in the <code>try</code> block explicitly throws an <code>Exception</code>.</p>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception</li>
</ul>
˝
squid:S1133Ì
squidS1133,Deprecated code should be removed eventually"INFO*java2S1133:õ<p>
This rule is meant to be used as a way to track code which is marked as being deprecated.
Deprecated code should eventually be removed.
</p>

<p>
The following code illustrates this rule:
</p>

<pre>
class Foo {
  /**
    * @deprecated
    */
  public void foo() {    // Noncompliant
  }

  @Deprecated            // Noncompliant
  public void bar() {
  }

  public void baz() {    // Compliant
  }
}
</pre>
∑
squid:S00119¶
squidS00119;Type parameter names should comply with a naming convention"MINOR*java2S00119:¬<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>

<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular expression.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass&lt;TYPE&gt; { // Noncompliant
  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant
  }
}
</pre>
<h2>Compliant Solution</h2>
<pre>
public class MyClass&lt;T&gt; {
  &lt;T&gt; void method(T t) {
  }
}
</pre>
¢
squid:S2222í
squidS2222Locks should be released"CRITICAL*java2S2222:–<p>The logic in a method should ensure that locks are released in the methods in which they were acquired. Failure to release a lock increases the potential for deadlocks and could result in runtime errors in production.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class MyClass {
  Lock lock = new Lock();

  public void acquireLock() {
    lock.lock();  // Noncompliant;
  }

  public void releaseLock() {
    lock.unlock();
  }

  public void doTheThing() {
    acquireLock();
    // do work...
    releaseLock();
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class MyClass {
  Lock lock = new Lock();

  public void doTheThing() {
    lock.lock();
    // do work...
    lock.unlock();
  }

}
</pre>
Ò
squid:S1132·
squidS1132MStrings literals should be placed on the left side when checking for equality"MAJOR*java2S1132:Ì<p>
It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.
This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.
</p>

<p>The following code:</p>

<pre>
String myString = null;

System.out.println("Equal? " + myString.equals("foo"));                        // Noncompliant - will raise a NPE
System.out.println("Equal? " + (myString != null &amp;&amp; myString.equals("foo")));  // Noncompliant - null check could be removed
</pre>

<p>should be refactored into:</p>

<pre>
System.out.println("Equal?" + "foo".equals(myString));                         // Compliant - properly deals with the null case
</pre>
ƒ
squid:S00117≥
squidS00117PLocal variable and method parameter names should comply with a naming convention"MINOR*java2S00117:∫<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public void doSomething(int my_param) { 
  int LOCAL;    
  ...             
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public void doSomething(int myParam) { 
  int local;  
  ...               
}
</pre>

<h2>Exceptions</h2>

<p>Loop counters are ignored by this rule.</p>

<pre>
for (int i = 0; i &lt; limit; i++) {  // Compliant
  // ...
}
</pre>
¬
squid:S2583≤
squidS2583FConditions should not unconditionally evaluate to "TRUE" or to "FALSE""BLOCKER*java2S2583:√<p>
Conditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional.
If the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less readable.
</p>

<p>
It is quite likely that the code does not match the programmer's intent.
</p>

<p>
Either the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
//foo can't be both equal and not equal to bar in the same expression
if(foo == bar && something && foo != bar) {...}
</pre>
<pre>
private void compute(int foo) {
  if (foo == 4) {
    doSomething();
    // We know foo is equal to 4 at this point, so the next condition is always false
    if (foo > 4) {...}
    ...
  }
  ...
}
</pre>
<pre>
private void compute(boolean foo) {
  if (foo) {
    return;
  }
  doSomething();
  // foo is always false here
  if (foo){...}
  ...
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/489">MITRE, CWE-489</a> - Leftover Debug Code</li>
  <li><a href="http://cwe.mitre.org/data/definitions/570">MITRE, CWE-570</a> - Expression is Always False</li>
  <li><a href="http://cwe.mitre.org/data/definitions/571">MITRE, CWE-571</a> - Expression is Always True</li>
  <li>MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.</li>
  <li>MISRA C:2012, 14.3 - Controlling expressions shall not be invariant</li>
</ul>
è
squid:S00118˛
squidS00118;Abstract class names should comply with a naming convention"MINOR*java2S00118:ö<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all abstract class names match a provided regular expression.</p>
<p>The following code snippet illustrates this rule:</p>
<pre>
abstract class MyClass { // Noncompliant
}

class AbstractLikeClass { // Noncompliant
}

abstract class AbstractClass { // Compliant
}
</pre>
¸
squid:S3318Ï
squidS3318/Untrusted data should not be stored in sessions"CRITICAL*java2S3318:ì<p>Data in a web session is considered inside the "trust boundary". That is, it is assumed to be trustworthy. But storing unvetted data from an unauthenticated user violates the trust boundary, and may lead that that data being used inappropriately.</p>
<p>This rule raises an issue when data from <code>Cookie</code>s or <code>HttpServletRequest</code>s is stored in a session. </p>
<h2>Noncompliant Code Example</h2>

<pre>
login = request.getParameter("login");
session.setAttribute("login", login);  // Noncompliant
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/501">MITRE, CWE-501</a> - Trust Boundary Violation
</li></ul>
ù

squid:S2109ç

squidS2109>Reflection should not be used to check non-runtime annotations"BLOCKER*java2S2109:¶	<p>The writer of an annotation can set one of three retention policies for it:</p>
<ul>
  <li><code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>, <code>@SuppressWarnings</code>.</li>
  <li><code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the default.</li>
  <li><code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM.</li>
</ul>
<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any other retention policy is simply
  an error, since the test will always return false.</p>

<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>

<h2>Noncompliant Code Example</h2>
<pre>
Method m = String.class.getMethod("getBytes", new Class[] {int.class,
int.class, byte[].class, int.class});
if (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code
</pre>
ê
squid:S3438Ä
squidS3438K"SingleConnectionFactory" instances should be set to "reconnectOnException""CRITICAL*java2S3438:ã<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic connection recovery when the connection goes bad. </p>
<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this connection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the <code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;  &lt;!-- Noncompliant --&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory" p:reconnectOnException="true"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
 &lt;/bean&gt;
</pre>
<p>or</p>
<pre>
 &lt;bean id="singleCF" class="org.springframework.jms.connection.SingleConnectionFactory"&gt;
   &lt;constructor-arg ref="dummyConnectionFactory" /&gt;
   &lt;property name="reconnectOnException"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;
 &lt;/bean&gt;
</pre>
û

squid:S864è
squidS864OLimited dependence should be placed on operator precedence rules in expressions"MAJOR*java2S864:õ<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex statements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>
<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational operators are used in together in a condition, and for other operator combinations according to the following table:</p>
<table>
<tr><td> </td><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td><td><code>&amp;</code></td><td><code>^</code></td><td><code>|</code></td></tr>
<tr><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td> </td><td>x</td><td>x</td><td>x</td><td>x</td></tr>
<tr><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td><td>x</td><td> </td><td>x</td><td>x</td><td>x</td></tr>
<tr><td><code>&amp;</code></td><td>x</td><td>x</td><td> </td><td>x</td><td>x</td></tr>
<tr><td><code>^</code></td><td>x</td><td>x</td><td>x</td><td> </td><td>x</td></tr>
<tr><td><code>|</code></td><td>x</td><td>x</td><td>x</td><td>x</td><td></td></tr>
</table>
<h2>Noncompliant Code Example</h2>

<pre>
x = a + b - c;
x = a + 1 &lt;&lt; b;  // Noncompliant

if ( a &gt; b || c &lt; d || a == d) {...}
if ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant
if (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first
</pre>
<h2>Compliant Solution</h2>

<pre>
x = a + b - c;
x = (a + 1) &lt;&lt; b;

if ( a &gt; b || c &lt; d || a == d) {...}
if ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}
if ( (a = f(b,c)) == 1) { ... }
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 12.1 - Limited dependence should be placed on C's operator precedence rules in expressions</li>
<li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions</li>
<li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/_wI">CERT EXP00-C</a> - Use parentheses for precedence of operation</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/VoAyAQ">CERT EXP00-CPP</a> - Use parentheses for precedence of operation</li>
<li> <a href="http://cwe.mitre.org/data/definitions/783.html">MITRE, CWE-783</a> - Operator Precedence Logic Error</li>
</ul>
÷
squid:S00122≈
squidS00122&Statements should be on separate lines"MINOR*java2S00122:ˆ<p>For better readability, do not put more than one statement on a single line.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if(someCondition) doSomething();
</pre>
<h2>Compliant Solution</h2>

<pre>
if(someCondition) {
  doSomething();
}
</pre>
Ó
squid:S00120›
squidS001204Package names should comply with a naming convention"MINOR*java2S00120:Ä<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[a-z]+(\.[a-z][a-z0-9]*)*$</code>:</p>
<pre>
package org.exAmple; // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
package org.example; 
</pre>
¯
squid:S00121Á
squidS00121*Control structures should use curly braces"MAJOR*java2S00121:î<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>

<pre>
// the two statements seems to be attached to the if statement, but that is only true for the first one:
if (condition)
  executeSomething();
  checkSomething();
</pre>
<h2>Compliant Solution</h2>

<pre>
if (condition) {
  executeSomething();
  checkSomething();
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
</li><li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
</li><li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement
</li><li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement
</li><li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement
</li><li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation
</li></ul>
¥
squid:S1940§
squidS1940%Boolean checks should not be inverted"MINOR*java2S1940:ÿ<p>
  It is needlessly complex to invert the result of a boolean comparison.
  The opposite comparison should be made instead.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ...}  // Noncompliant
boolean b = !(i < 10);  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ...}
boolean b = (i >= 10);
</pre>
⁄
squid:S1148 
squidS11483Throwable.printStackTrace(...) should not be called"CRITICAL*java2S1148:Ì<p>
<code>Throwable.printStackTrace(...)</code> prints a throwable and its stack trace to some stream.
</p>

<p>Loggers should be used instead to print throwables, as they have many advantages:</p>
<ul>
  <li>Users are able to easily retrieve the logs.</li>
  <li>The format of log messages is uniform and allow users to browse the logs easily.</li>
</ul>

<p>The following code:</p>

<pre>
try {
  /* ... */
} catch(Exception e) {
  e.printStackTrace();        // Noncompliant
}
</pre>

<p>should be refactored into:</p>

<pre>
try {
  /* ... */
} catch(Exception e) {
  LOGGER.log("context", e);   // Compliant
}
</pre>
ë
squid:S2236Å
squidS2236\Methods "wait(...)", "notify()" and "notifyAll()" should never be called on Thread instances"BLOCKER*java2S2236:¸<p>On a Thread instance, the methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available only because all classes in Java extend <code>Object</code> and therefore automatically inherit the methods. But there are two very good reasons to not call these methods on a Thread instance:</p>
<ul>
<li> Doing so is really confusing. What is really expected when calling, for instance, the <code>wait(...)</code> method on a Thread? That the execution of the Thread is suspended, or that acquisition of the object monitor is waited for?</li>
<li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling them will corrupt the behavior of the JVM.</li>
</ul>
<h2>Noncompliant Code Example</h2>

<pre>
Thread myThread = new Thread(new RunnableJob());
...
myThread.wait(2000);
</pre>
Ÿ
squid:S00104»
squidS00104$Files should not have too many lines"MAJOR*java2S00104:˚<p>
A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.
Those smaller files will not only be easier to understand but also probably easier to test.
</p>
·
squid:S2116—
squidS2116A"hashCode" and "toString" should not be called on array instances"CRITICAL*java2S2116:ÊWhile <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's "identity hash code", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents. Instead, you should pass the array to the relevant static <code>Arrays</code> method.

<h2>Noncompliant Code Example</h2>
<pre>
public static void main( String[] args )
{
    String argStr = args.toString(); // Noncompliant
    int argHash = args.hashCode(); // Noncompliant

</pre>

<h2>Compliant Solution</h2>
<pre>
public static void main( String[] args )
{
    String argStr = Arrays.toString(args);
    int argHash = Arrays.hashCode(args);

</pre>
√
squid:S1147≥
squidS1147!Exit methods should not be called"MAJOR*java2S1147:Î<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and skipping finalization.</p>
<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them should be called from applications running in a J2EE container.</p>
<h2>Noncompliant Code Example</h2>

<pre>
System.exit(0);
Runtime.getRuntime().exit(0);
Runtime.getRuntime().halt(0);
</pre>

<h2>Exceptions</h2>
<p>These methods are ignored inside <code>main</code>.</p>

<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/382.html">MITRE, CWE-382</a> - Use of System.exit()</li>
</ul>
í
squid:S00105Å
squidS00105(Tabulation characters should not be used"MINOR*java2S00105:∞<p>
Developers should not need to configure the tab width of their text editors in order to be able to read source code.
So the use of tabulation character must be banned.
</p>
∏
squid:S2235®
squidS22351IllegalMonitorStateException should not be caught"CRITICAL*java2S2235:ÕAccording to Oracle Javadoc:
<blockquote>
<code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.
</blockquote>

In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. 

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(){
  ...
  try {
    ...
    anObject.notify();
    ...
  } catch(IllegalMonitorStateException e) {
    ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomething(){
  ...
  synchronized(anObject) {
    ...
    anObject.notify();
    ...
  }
}
</pre>
˝
squid:S2114Ì
squidS2114BCollections should not be passed as arguments to their own methods"CRITICAL*java2S2114:Å<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical code.</p>

<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in undefined behavior.</p>

<h2>Noncompliant Code Example</h2>
<pre>
List &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();
  objs.add("Hello");

  objs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called
  objs.addAll(objs); // Noncompliant; behavior undefined
  objs.containsAll(objs); // Noncompliant; always true
  objs.removeAll(objs); // Noncompliant; confusing. Use clear() instead
  objs.retainAll(objs); // Noncompliant; NOOP
</pre>
ø
squid:S1145Ø
squidS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*java2S1145:¬<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
<li> An if statement was changed during debugging and that debug code has been committed.</li>
<li> Some value was left unset.</li>
<li> Some logic is not doing what the programmer thought it did.</li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (true) {  
  doSomething(); 
}
...
if (false) {  
  doSomethingElse(); 
}

if (2 &lt; 3 ) { ... }  // Noncompliant; always false

int i = 0;
int j = 0;
// ...
j = foo();

if (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization

boolean b = true;
//...
if (b || !b) { ... }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
doSomething(); 
...
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>
<li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False</li>
<li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True</li>
<li> MISRA C:2004, 13.7</li>
<li> MISRA C:2012, 14.3</li>
</ul>

<p>This rule is deprecated, use <a href='/coding_rules#rule_key=squid:S2583'>S2583</a> instead.</p>
∏
#squid:RightCurlyBraceStartLineCheckê
squidRightCurlyBraceStartLineCheck@A close curly brace should be located at the beginning of a line"MINOR*java2RightCurlyBraceStartLineCheck:˘<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if(condition) {
  doSomething();} 
</pre>
<h2>Compliant Solution</h2>

<pre>
if(condition) {
  doSomething();
} 
</pre>
<h2>Exceptions</h2>

<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();} 
</pre>
À
squid:S00103∫
squidS00103Lines should not be too long"MINOR*java2S00103:v<p>
Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.
</p>
–
squid:S2111¿
squidS2111'"BigDecimal(double)" should not be used"CRITICAL*java2S2111:Ô<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>
<p>From <a href="http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)">the JavaDocs</a>:</p>
<blockquote>The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.</blockquote>
<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors.</p>
<h2>Noncompliant Code Example</h2>

<pre>
double d = 1.1;

BigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above
BigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result
</pre>
<h2>Compliant Solution</h2>

<pre>
double d = 1.1;

BigDecimal bd1 = BigDecimal.valueOf(d);
BigDecimal bd2 = BigDecimal.valueOf(1.1);
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/NQAVAg">CERT, NUM10-J</a> - Do not construct BigDecimal objects from floating-point literals</li>
</ul>
È
squid:S2232Ÿ
squidS2232'"ResultSet.isLast()" should not be used"MAJOR*java2S2232:ã<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code> result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>

<h2>Noncompliant Code Example</h2>
<pre>
stmt.executeQuery("SELECT name, address FROM PERSON");
ResultSet rs = stmt.getResultSet();
while (! rs.isLast()) { // Noncompliant
// process row
}
</pre>

<h2>Compliant Solution</h2>
<pre>
ResultSet rs = stmt.executeQuery("SELECT name, address FROM PERSON");
while (! rs.next()) {
// process row
}
</pre>
ä
squid:S00108˘
squidS00108.Nested blocks of code should not be left empty"MAJOR*java2S00108:¢<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>
<h2>Noncompliant Code Example</h2>

<pre>
for (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?
</pre>
<h2>Exceptions</h2>

<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code> blocks are still considered empty even with comments because they can still affect program flow.</p>
◊
squid:S1264«
squidS12645A "while" loop should be used instead of a "for" loop"MINOR*java2S1264:Î<p>
  When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing,
  a <code>while</code> loop should be used instead to increase readability.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>

<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>
â	
squid:S2112˘
squidS21121"URL.hashCode" and "URL.equals" should be avoided"MAJOR*java2S2112:°<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both make calls out to the Internet and are blocking operations. <code>URI</code> on the other hand makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>

<p>This rule checks for uses of <code>URL</code>'s in <code>Map</code> and <code>Set</code>, and for explicit calls to the <code>equals</code> and <code>hashCode</code> methods.</p>

<h2>Noncompliant Code Example</h2>

<pre>
public void checkUrl(URL url) {
  Set&lt;URL> sites = new HashSet&lt;URL&gt;();  // Noncompliant

  URL homepage = new URL("http://sonarsource.com");  // Compliant
  if (homepage.equals(url)) { // Noncompliant
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public void checkUrl(URL url) {
  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant

  URI homepage = new URI("http://sonarsource.com");  // Compliant
  URI uri = url.toURI();
  if (homepage.equals(uri)) {  // Compliant
    // ...
  }
}
</pre>
ÿ

squid:S1143»

squidS11438"return" statements should not occur in "finally" blocks"BLOCKER*java2S1143:Á	<p>Returning from a <code>finally</code> block suppresses the propagation of any unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");   // incorrect "OK" message is printed
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // this message is not shown
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    /* ... */
    return;      // Noncompliant - prevents the RuntimeException from being propagated
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public static void main(String[] args) {
  try {
    doSomethingWhichThrowsException();
    System.out.println("OK");
  } catch (RuntimeException e) {
    System.out.println("ERROR");  // "ERROR" is printed as expected
  }
}

public static void doSomethingWhichThrowsException() {
  try {
    throw new RuntimeException();
  } finally {
    /* ... */
  }
}
</pre>
<h2>See</h2>

<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/584.html">MITRE, CWE-584</a> - Return Inside Finally Block</li>
</ul>
‹
squid:S2230Ã
squidS22301Non-public methods should not be "@Transactional""CRITICAL*java2S2230:ÒMarking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't "see" non-<code>public</code> methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.

Therefore marking a <code>private</code>  method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the method is actually written to be <code>@Transactional</code>.

<h2>Noncompliant Code Example</h2>
<pre>
@Transactional  // Noncompliant
private void doTheThing(ArgClass arg) {
  // ...
}
</pre>
ù
squid:S1142ç
squidS11422Methods should not have too many return statements"MAJOR*java2S1142:¥<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the method.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default threshold of 3:</p>
<pre>
public boolean myMethod() { // Noncompliant; there are 4 return statements
  if (condition1) {
    return true;
  } else {
    if (condition2) {
      return false;
    } else {
      return true;
    }
  }
  return false;
}
</pre>
Á
squid:S2110◊
squidS2110(Invalid "Date" values should not be used"CRITICAL*java2S2110:Ö<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12 for month, and you'll get January of the following year.</p>

<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and <code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>
<table>
  <thead>
  <tr><td>Field</td> <td>Valid</td></tr>
  </thead>
  <tbody>
    <tr><td>month</td><td>0-11</td></tr>
    <tr><td>date (day)</td><td>0-31</td></tr>
    <tr><td>hour</td><td>0-23</td></tr>
    <tr><td>minute</td><td>0-60</td></tr>
    <tr><td>second</td><td>0-61</td></tr>
  </tbody>
</table>

<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>

<h2>Noncompliant Code Example</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(12);  // Noncompliant; rolls d into the next year

Calendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant
if (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
Date d = new Date();
d.setDate(25);
d.setYear(2014);
d.setMonth(11);

Calendar c = new Gregorian Calendar(2014, 11, 25);
if (c.get(Calendar.MONTH) == 11) {
  // ...
}
</pre>
ù
squid:S1141ç
squidS1141%Try-catch blocks should not be nested"MAJOR*java2S1141:¡<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand which block will catch which exception.</p>
“

squid:S881√
squidS881eIncrement (++) and decrement (--) operators should not be mixed with other operators in an expression"MAJOR*java2S881:π
<p>The use of increment and decrement operators in combination with other arithmetic operators is not recommended, because:</p>
<p>It can significantly impair the readability of the code.</p>
<p>It introduces additional side effects into a statement, with the potential for undefined behavior.</p>
<p>It is safer to use these operators in isolation from any other arithmetic operators.</p>
<h2>Noncompliant Code Example</h2>

<pre>
u8a = ++u8b + u8c--; 
foo = bar++ / 4;
</pre>
<h2>Compliant Solution</h2>

<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;    
u8a = u8b + u8c; 
u8c--; 
foo = bar / 4;
bar++;
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 12.1</li>
<li> MISRA C:2004, 12.13</li>
<li> MISRA C:2004, 13.3</li>
<li> MISRA C++:2008, 5-2-10</li>
<li> MISRA C:2012, 12.1</li>
<li> MISRA C:2012, 13.3</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C</a> - 	Do not depend on the order of evaluation for side effects</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP30-CPP</a> - Do not depend on order of evaluation between sequence points</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J</a> - Do not follow a write by a subsequent write or read of the same object within an expression</li>
</ul>
¿
squid:S00107Ø
squidS00107+Methods should not have too many parameters"MAJOR*java2S00107:€<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>
<h2>Noncompliant Code Example</h2>

<p>With a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, String param4, long param5) {
...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
≤
squid:S1948¢
squidS1948KFields in a "Serializable" class should either be transient or serializable"CRITICAL*java2S1948:≠<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is never explicitly serialized or deserialized. That's because under load, most J2EE application frameworks flush objects to disk, and an allegedly <code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;  // Noncompliant; Address isn't serializable
}
</pre>

<h2>Compliant Example</h2>
<pre>
public class Address implements Serializable {
  private static final long serialVersionUID = 2405172041950251807L;
}

public class Person implements Serializable {
  private static final long serialVersionUID = 1905122041950251207L;

  private String name;
  private Address address;
}
</pre>

<h2>Exceptions</h2>
<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>

<pre>
private void writeObject(java.io.ObjectOutputStream out) throws IOException
private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;
</pre>

<h2>See</h2>
    <ul>
      <li><a href="http://cwe.mitre.org/data/definitions/594.html">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk</li>
      <li><a href="http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html">Oracle Java 6, Serializable</a></li>
      <li><a href="http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html">Oracle Java 7, Serializable</a></li>
    </ul>
Ò
squid:S1943·
squidS1943OClasses and methods that rely on the default system encoding should not be used"MAJOR*java2S1943:Î<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its "home" environment. But that code may break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to reproduce when it's time to fix them.</p>
<p>This rule detects uses of the following classes and methods:</p>
<ul>
<li> <code>FileReader</code></li>
<li> <code>FileWriter</code></li>
<li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument</li>
<ul>
<li> <code>String(byte[] bytes)</code></li>
<li> <code>String(byte[] bytes, int offset, int length)</code> </li>
</ul>
<li> <code>String.getBytes()</code></li>
<li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code></li>
<li> <code>InputStreamReader(InputStream in)</code></li>
<li> <code>OutputStreamWriter(OutputStream out)</code></li>
<li> <code>ByteArrayOutputStream.toString()</code></li>
<li> Some <code>Formatter</code> constructors</li>
<ul>
<li> <code>Formatter(String fileName)</code></li>
<li> <code>Formatter(File file)</code></li>
<li> <code>Formatter(OutputStream os)</code></li>
</ul>
<li> Some <code>Scanner</code> constructors</li>
<ul>
<li> <code>Scanner(File source)</code></li>
<li> <code>Scanner(Path source)</code></li>
<li> <code>Scanner(InputStream source)</code></li>
</ul>
<li> Some <code>PrintStream</code> constructors</li>
<ul>
<li> <code>PrintStream(File file)</code></li>
<li> <code>PrintStream(OutputStream out)</code></li>
<li> <code>PrintStream(OutputStream out, boolean autoFlush)</code></li>
<li> <code>PrintStream(String fileName)</code></li>
</ul>
<li> Some <code>PrintWriter</code> constructors</li>
<ul>
<li> <code>PrintWriter(File file)</code></li>
<li> <code>PrintWriter(OutputStream out)</code></li>
<li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code></li>
<li> <code>PrintWriter(String fileName)</code></li>
</ul>
<li> <code>IOUtils</code> methods which accept an encoding argument when that argument is null, and overloads of those methods that omit the encoding argument</li>
</ul>
Õ
squid:S2912Ω
squidS2912,"indexOf" checks should use a start position"MAJOR*java2S2912:Í<p>
  One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers,
  and the proper choice of <code>indexOf</code> methods can help move code from confusing to clear.
</p>

<p>
  If you need to see whether a substring is located beyond a certain point in a string,
  you can test the <code>indexOf</code> the substring versus the target point, or you can use the version of <code>indexOf</code>
  which takes a starting point argument. The latter is arguably clearer because the result is tested against -1,
  which is an easily recognizable "not found" indicator.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae") > 2) { // Noncompliant
// ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
String name = "ismael";

if (name.indexOf("ae", 2) > -1) {
// ...
}
</pre>
Á
squid:S1701◊
squidS17014Fields and methods should not have conflicting names"MAJOR*java2S1701:¸<p>It's confusing to have a class field with the same name as a method in the class. It's also confusing to have multiple fields that differ only in capitalization</p>
<p>Typically this situation indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name. However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>
<h2>Compliant Solution</h2>

<pre>
public class Foo {

  public static final String NAME_QUERY = "Select name from person";
  private String queryString; // member has been renamed
  public String query() { 
    // do something...
  }

  private void doSomething() {

    String tmp = query; // results in a compile error
    String tmp2 = query(); // no question now what was intended
  }
}
</pre>
ƒ	
squid:S1700¥	
squidS1700=A field should not duplicate the name of its containing class"MAJOR*java2S1700:–<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>
<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Foo { 
  private String foo; 

  public String getFoo() { } 
} 

Foo foo = new Foo(); 
foo.getFoo() // what does this return? 
</pre> 

<h2>Compliant Solution</h2>
<pre>
public class Foo {
  private String name; 

  public String getName() { }
}

//...

Foo foo = new Foo();
foo.getName()

</pre>
<h2>Exceptions</h2>

<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>
<pre>
public class Foo {
  ...
  private static Foo foo;
  public Foo getInstance() {
    if(foo==null) {
      foo = new Foo();
    }
    return foo;
  }
  ...
}
</pre>
À
squid:S1941ª
squidS19419Variables should not be declared before they are relevant"MAJOR*java2S1941:€<p>
  For the sake of clarity, variables should be declared as close to where they're used as possible.
  This is particularly true when considering methods that contain early returns and the potential to throw exceptions.
  In these cases, it is not only pointless, but also confusing to declare a variable that may never be used because conditions for an early return are met first.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;
  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return

  if (difference &lt; 0) {
    return false;
  }

  // ...

  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public boolean isConditionMet(int a, int b) {
  int difference = a - b;

  if (difference &lt; 0) {
    return false;
  }

  // ...

  MyClass foo = new MyClass(a);
  if (foo.doTheThing()) {
    return true;
  }
  return false;
}
</pre>
µ	
squid:S2118•	
squidS2118.Non-serializable classes should not be written"CRITICAL*java2S2118:ÕNothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown. Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized).

<h2>Noncompliant Code Example</h2>
<pre>
public class Vegetable {  // neither implements Serializable nor extends a class that does
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);  // Noncompliant. Nothing will be written
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Vegetable implements Serializable {  // can now be serialized
  //...
}

public class Menu {
  public void meal() throws IOException {
    Vegetable veg;
    //...
    FileOutputStream fout = new FileOutputStream(veg.getName());
    ObjectOutputStream oos = new ObjectOutputStream(fout);
    oos.writeObject(veg);
  }
}
</pre>
˘
squid:S1149È
squidS1149QSynchronized classes Vector, Hashtable, Stack and StringBuffer should not be used"MAJOR*java2S1149:Ò<p>
Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them thread-safe.
Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.
</p>

<p>It is better to use their new unsynchronized replacements:</p>

<ul>
  <li><code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code></li>
  <li><code>Deque</code> instead of <code>Stack</code></li>
  <li><code>HashMap</code> instead of <code>Hashtable</code></li>
  <li><code>StringBuilder</code> instead of <code>StringBuffer</code></li>
</ul>

<h2>Noncompliant Code Example</h2>

<pre>
Vector cats = new Vector();
</pre>

<h2>Compliant Solution</h2>

<pre>
ArrayList cats = new ArrayList(); 
</pre>

<h2>Exceptions</h2>

<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.</p>

<pre>
@Override
public Vector getCats() {...} 
</pre>
˜
squid:S1939Á
squidS19396Extensions and implementations should not be redundant"MINOR*java2S1939:ä<p>
All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.
</p>

<p>
  Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant.
  If you implement the interface, you also implicitly implement its parents and there's no need to do so explicitly.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo
    extends Object // Noncompliant
    implements MyFace, MyOtherFace {  // Noncompliant
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public interface MyFace {
  // ...
}

public interface MyOtherFace extends MyFace {
  // ...
}

public class Foo implements MyOtherFace {
  //...
}
</pre>
·
squid:S00112–
squidS00112)Generic exceptions should never be thrown"CRITICAL*java2S00112:˚<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>
<h2>Noncompliant Code Example</h2>

<pre>
public void foo(String bar) throws Throwable {  // Noncompliant
  throw new RuntimeException("My Message");     // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public void foo(String bar) {
  throw new MyOwnRuntimeException("My Message"); 
}
</pre>
<h2>Exceptions</h2>

<p>Generic exceptions in the signatures of overriding methods are ignored.</p>
<pre>
@Override
public void myMethod() throws Exception {...}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/397.html">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception</li>
</ul>
ö
squid:S2445ä
squidS2445[Blocks synchronized on fields should not contain assignments of new objects to those fields"BLOCKER*java2S2445:Ü<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So reassigning a field in a block synchronized on that field's contents immediately opens the block up to access by another thread.</p>
<h2>Noncompliant Code Example</h2>

<pre>
private String color = "red";

private void doSomething(){
  synchronized(color) {  // lock is actually on object instance "red" referred to by the color variable
    //...
    color = "green"; // Noncompliant; other threads now allowed into this block
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
private String color = "red";
private Object lockObj = new Object();

private void doSomething(){
  synchronized(lockObj) {
    //...
    color = "green";
    // ...
  }
}
</pre>
Ñ

squid:S2325Ù	
squidS2325D"private" methods that don't access instance data should be "static""MINOR*java2S2325:â	<p>
  <code>private</code> methods that don't access instance data can be <code>static</code>
  to prevent any misunderstanding about the contract of the method.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private String getMagicWord() { // Noncompliant
    return magicWord;
  }

  private void setMagicWord(String value) { // Noncompliant
    magicWord = value;
  }

}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Utilities {
  private static String magicWord = "magic";

  private static String getMagicWord() {
    return magicWord;
  }

  private static void setMagicWord(String value) {
    magicWord = value;
  }

}
</pre>

<h2>Exceptions</h2>
<p>
  When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:
</p>
<ul>
  <li><code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code></li>
  <li><code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code></li>
  <li><code>private void readObjectNoData() throws ObjectStreamException;</code></li>
</ul>
€
squid:S2446À
squidS2446"notifyAll" should be used"CRITICAL*java2S2446:á<code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code> rouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.

<h2>Noncompliant Code Example</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notify();  // Noncompliant
    }
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class MyThread extends Thread{

  @Override
  public void run(){
    synchronized(this){
      // ...
      notifyAll();
    }
  }
}
</pre>
Ë
squid:S2204ÿ
squidS2204E".equals()" should not be used to test the values of "Atomic" classes"BLOCKER*java2S2204:Í<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and <code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free, thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be "equal" to itself. Instead, you should <code>.get()</code> the value and make comparisons on it.</p>

<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and <code>AtomicBoolean</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.equals(aInt2)) { ... }  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
AtomicInteger aInt1 = new AtomicInteger(0);
AtomicInteger aInt2 = new AtomicInteger(0);

if (aInt1.get() == aInt2.get()) { ... }
</pre>
ÿ
squid:S1598»
squidS15986Package declaration should match source file directory"MAJOR*java2S1598:Î<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java file located at "src/org/sonarqube/Foo.java" should have a package of "org.sonarqube".</p>

<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the "Foo.java" class part of the "com.apple" package, which could degrade the maintainability of both the class and its application.</p>
ƒ

squid:S2201¥

squidS2201SReturn values should not be ignored when function calls don't have any side effects"CRITICAL*java2S2201:∑	<p>When the call to a function doesn't have any side effect, what is the point of ignoring the result of the function call ? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected. </p>
<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API : String, Boolean, Integer, Double, Float, Byte, Character, Short, StackTraceElement.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void handle(String command){
  command.toLowerCase(); // Noncompliant; result of method thrown away
  ...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public void handle(String command){
  String formattedCommand = command.toLowerCase();
  ...
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/9YIRAQ">CERT, EXP12-C</a> - Do not ignore values returned by functions</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/eoAyAQ">CERT, EXP12-CPP</a> - Do not ignore values returned by functions or methods</li>
</ul>
Í	
squid:S1596⁄	
squidS1596|Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET"MAJOR*java2S1596:∑<p>Since the introduction of generics in Java 5, it is recommended to use generic types such as <code>List&lt;String&gt;</code> instead of raw ones such as just <code>List</code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code> fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>
<p>Developers will also more easily find the <code>emptyIterator()</code> and <code>emptyListIterator()</code> methods for which there is no field equivalent if they are used to call the methods.</p>
<h2>Noncompliant Code Example</h2>

<pre>
List&lt;String&gt; collection1 = Collections.EMPTY_LIST;
Map&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;
Set&lt;String&gt; collection3 = Collections.EMPTY_SET;
</pre>
<h2>Compliant Solution</h2>

<pre>
List&lt;String&gt; collection1 = Collections.emptyList();
Map&lt;String, String&gt; collection2 = Collections.emptyMap();
Set&lt;String&gt; collection3 = Collections.emptySet();
</pre>
≤

squid:S2444¢

squidS2444?Lazy initialization of "static" fields should be "synchronized""CRITICAL*java2S2444:π	<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of non-<code>volatile</code> fields could mean that a second thread has access to a half-initizliaed object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initizliation block should be <code>synchronized</code> or the variable made <code>volatile</code>.</p>
<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
protected static Object instance = null;

public static Object getInstance() {
    if (instance != null) {
        return instance;
    }

    instance = new Object();  // Noncompliant
    return instance;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
protected static volatile Object instance = null;

public static Object getInstance() {
    if (instance != null) {
        return instance;
    }

    instance = new Object();
    return instance;
}
</pre>
<p>or </p>
<pre>
protected static Object instance = null;

public static synchronized Object getInstance() {
    if (instance != null) {
        return instance;
    }

    instance = new Object();
    return instance;
}
</pre>
Ò	
squid:S2441·	
squidS2441?Non-serializable objects should not be stored in "HttpSessions""CRITICAL*java2S2441:¯<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use in a process called "passivation". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such sessions at startup.</p>
<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be serialized, and </p>
<p>understand that if you've stored non-serializable objects in the session, errors will result. </p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Address {
  //...
}

//...
HttpSession session = request.getSession();
session.setAttribute("address", new Address());  // Noncompliant; Address isn't serializable
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/579.html">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session</li>
</ul>
µ
squid:S2442•
squidS2442+"Lock" objects should not be "synchronized""MAJOR*java2S2442:”<p>
<code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with <code>synchronized</code> blocks.
So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly.
Instead, such objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
Lock lock = new MyLockImpl();
synchronized(lock) {  // Noncompliant
  //...
}
</pre>

<h2>Compliant Solution</h2>

<pre>
Lock lock = new MyLockImpl();
lock.tryLock();
//...
</pre>
É
squid:S2200Û
squidS2200="compareTo" results should not be checked for specific values"MAJOR*java2S2200:èWhile most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific value other than 0 could result in false negatives.

<h2>Noncompliant Code Example</h2>
<pre>
if (myClass.compareTo(arg) == -1) {  // Noncompliant
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (myClass.compareTo(arg) &lt; 0) {
  // ...
}
</pre>
Ñ	
squid:S2440Ù
squidS2440=Classes with only "static" methods should not be instantiated"MAJOR*java2S2440:ê<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only <code>static</code> methods.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("<[^>]+>", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    TextUtils textUtils = new TextUtils(); // Noncompliant

    String stripped = textUtils.stripHtml(source);

    //...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class TextUtils {
  public static String stripHtml(String source) {
    return source.replaceAll("<[^>]+>", "");
  }
}

public class TextManipulator {

  // ...

  public void cleanText(String source) {
    String stripped = TextUtils.stripHtml(source);

    //...
  }
}
</pre>

<h2>See Also</h2>
<ul>
    <li><a href='/coding_rules#rule_key=squid:S1118'>S1118</a> - Utility classes should not have public constructors</li>
</ul>
£
squid:S2681ì
squidS26813Multiline blocks should be enclosed in curly braces"CRITICAL*java2S2681:∂<p>
  Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs.
</p>
<p>
  This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block,
  but the omission of curly braces means the lines will be unconditionally executed once.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

String str = null;
for (int i = 0; i < array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>

<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i < array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>
å
squid:NoSonar˙
squidNoSonar1"NOSONAR" should not be used to switch off issues"MAJOR*java2NoSonar:û<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results but sometimes it can abusively be used to hide real quality flaws.</p>
<p>This rule allows to track and/or forbid use of this marker.</p>
Ø
squid:S3419ü
squidS3419+Group ids should follow a naming convention"MINOR*java2S3419:Õ<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match the provided regular expression.</p>

<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>(com|org)(\.[a-z][a-z-0-9]*)+</code></p>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;groupId&gt;com.myco&lt;/groupId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
Ë
squid:S2209ÿ
squidS2209."static" members should be accessed statically"MAJOR*java2S2209:É<p>
  While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form,
  and considered by most to be misleading because it implies to the readers of your code that
  there's an instance of the member per class instance.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    first.counter ++;  // Noncompliant
    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class A {
  public static int counter = 0;
}

public class B {
  private A first = new A();
  private A second = new A();

  public void runUpTheCount() {
    A.counter ++;  // Compliant
    A.counter ++;  // Compliant
  }
}
</pre>
ü
squid:S3417è
squidS3417*Disallowed dependencies should not be used"MAJOR*java2S3417:º<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>
<p>This rule raises an issue when the group or artifact id of a dependency matches the configured forbidden dependency pattern. </p>

<h2>Noncompliant Code Example</h2>
<p>With a parameter of: <code>*:.*log4j.*</code></p>
<pre> 
&lt;dependency&gt; &lt;!-- Noncompliant --&gt; 
    &lt;groupId&gt;log4j&lt;/groupId&gt;
    &lt;artifactId&gt;log4j&lt;/artifactId&gt; 
    &lt;version&gt;1.2.17&lt;/version&gt; 
&lt;/dependency&gt; 
</pre>@
Õ
squid:S2208Ω
squidS2208#Wildcard imports should not be used"MAJOR*java2S2208:Û<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>
<h2>Noncompliant Code Example</h2>

<pre>
import java.sql.*; // Noncompliant
import java.util.*; // Noncompliant

private Date date; // Date class exists in java.sql and java.util. Which one is this?
</pre>
<h2>Compliant Solution</h2>

<pre>
import java.sql.Date;
import java.util.List;
import java.util.ArrayList;

private Date date;
</pre>
<h2>Exceptions</h2>

<p>Static imports are ignored by this rule. E.G.</p>
<pre>
import static java.lang.Math.*;
</pre>
»
squid:S1118∏
squidS11183Utility classes should not have public constructors"MAJOR*java2S1118:ﬁ<p>
Utility classes, which are a collection of static members, are not meant to be instantiated.
Even abstract utility classes, which can be extended, should not have public constructors.
</p>

<p>
Java adds an implicit public constructor to every class which does not define at least one explicitly.
Hence, at least one non-public constructor should be defined.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
class StringUtils { // Noncompliant

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>

<h2>Compliant Solution</h2>

<pre>
class StringUtils { // Compliant

  private StringUtils() {
  }

  public static String concatenate(String s1, String s2) {
    return s1 + s2;
  }

}
</pre>
ç
squid:S2447˝
squidS24473Null should not be returned from a "Boolean" method"MAJOR*java2S2447:£<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and <code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers' code.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public Boolean isUsable() {
  // ...
  return null;  // Noncompliant
}
</pre>
˜
squid:S2326Á
squidS2326(Unused type parameters should be removed"MAJOR*java2S2326:ò<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.</p>
<h2>Noncompliant Code Example</h2>

<pre>
int &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored
{
  return a + b; 
}
</pre>
<h2>Compliant Solution</h2>

<pre>
int Add(int a, int b)
{
  return a + b; 
}
</pre>
◊
squid:S1479«
squidS1479;"switch" statements should not have too many "case" clauses"MAJOR*java2S1479:Â<p>When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</p>
â
squid:CycleBetweenPackagesÍ
squidCycleBetweenPackages)Cycles between packages should be removed"MAJOR*java2CycleBetweenPackages:¸<p>When several packages are involved in a cycle (package A &gt; package B &gt; package C &gt; package A, where "&gt;" means "depends upon"), that means those packages are highly coupled, and there is no way to reuse/extract one of those packages without importing all the other packages. Such cycle could quickly increase the effort required to maintain an application and embrace business change.</p>
<p>SonarQube not only detect cycles between packages, but also calculates the minimum effort to break those cycles. This rule logs a violation on each source file having an outgoing dependency to be cut in order to break a cycle.</p>
≈
squid:UselessImportCheck®
squidUselessImportCheck!Useless imports should be removed"MINOR*java2UselessImportCheck:∆<p>
The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.
Unused and useless imports should not occur if that is the case.
Leaving them in reduces the code's readability, since their presence can be confusing.
</p>

<p>The following code snippet illustrates this rule:</p>

<pre>
package my.company;

import java.lang.String;        // Noncompliant - java.lang classes are always implicitly imported
import my.company.SomeClass;    // Noncompliant - same package files are always implicitly imported
import java.io.File;            // Noncompliant - File is not used

import my.company2.SomeType;
import my.company2.SomeType;    // Noncompliant - 'SomeType' is already imported

class ExampleClass {

  public String someString;
  public SomeType something;

}
</pre>
®
squid:S1905ò
squidS1905"Redundant casts should not be used"MINOR*java2S1905:œ<p>Unnecessary casting expressions make the code harder to read and understand.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void example() {
  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned
  //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void example() {
  for (Foo obj : getFoos()) {
    //...
  }
}

public List&lt;Foo&gt; getFoos() {
  return this.foos;
}
</pre>

<h2>Exceptions</h2>
<p>Casting may be required to distinguish the method to call in the case of overloading:</p>
<pre>
class A {}
class B extends A{}
class C {
  void fun(A a){}
  void fun(B b){}

  void foo() {
    B b = new B();
    fun(b);
    fun((A) b); //call the first method so cast is not redundant.
  }
}
</pre>
»
squid:UnusedPrivateMethod™
squidUnusedPrivateMethod'Unused private method should be removed"MAJOR*java2UnusedPrivateMethod:¿
<p>Private methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }
  private void unusedPrivateMethod(){...}
  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism
  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Foo implements Serializable
{
  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.
  public static void doSomething(){
    Foo foo = new Foo();
    ...
  }

  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism

  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism
}
</pre>
ô
squid:UselessParenthesesCheck˜
squidUselessParenthesesCheckXUseless parentheses around expressions should be removed to prevent any misunderstanding"MAJOR*java2UselessParenthesesCheck:‘<p>
Useless parentheses can sometimes be misleading and so should be removed.
</p>

<p>
The following code snippet illustrates this rule:
</p>

<pre>
return 3;             // Compliant
return (x);           // Noncompliant
return (x + 1);       // Noncompliant
int x = (y / 2 + 1);  // Noncompliant
int y = (4+X) * y;    // Compliant
</pre>
Á
squid:S2698◊
squidS2698(JUnit assertions should include messages"MAJOR*java2S2698:à<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you'll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the assertion messages work as a sort of documentation.</p>
<h2>Noncompliant Code Example</h2>

<pre>
assertEquals(4, list.size());  // Noncompliant

assertThat(list.get(0)).isEqualTo("pear");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
assertEquals("There should have been 4 Fruits in the list", 4, list.size());

assertThat(list.get(0)).as("check first element").overridingErrorMessage("The first element should be a pear, not a %s", list.get(0)).isEqualTo("pear"); 
</pre>
«
squid:S1126∑
squidS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*java2S1126:º<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (expression) {  
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
return expression; 
</pre>
<pre>
return !!expression;
</pre>
æ
squid:S2699Æ
squidS2699Tests should include assertions"CRITICAL*java2S2699:Â<p>
  A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.
</p>
<p>
  This rule raises an exception when no assertions are found in a JUnit test.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoSomething() {  // Noncompliant
  MyClass myClass = new MyClass();
  myClass.doSomething();
  assertThat(myClass.doSomething());  // Fest assertion stub with no checks
}
</pre>

<h2>Compliant Solution</h2>
<pre>
@Test
public void testDoSomething() {
  MyClass myClass = new MyClass();
  assertNull(myClass.doSomething());  // JUnit assertion
  assertThat(myClass.doSomething()).isNull();  // Fest assertion
}
</pre>
§
squid:S1488î
squidS1488NLocal Variables should not be declared and then immediately returned or thrown"MINOR*java2S1488:ü<p>Declaring a variable only to immediately return or throw it is a bad practice.
Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.</p>

<h2>Noncompliant Code Example</h2>

<pre>
public long computeDurationInMilliseconds() {
  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
  return duration;
}

public void doSomething() {
  RuntimeException myException = new RuntimeException();
  throw myException;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public long computeDurationInMilliseconds() {
  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;
}

public void doSomething() {
  throw new RuntimeException();
}
</pre>
Á
squid:S1125◊
squidS1125BLiteral boolean values should not be used in condition expressions"MINOR*java2S1125:Ó<p>Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (booleanVariable == true) { /* ... */ }
if (booleanVariable != true) { /* ... */ }
if (booleanVariable || false) { /* ... */ }
doSomething(!false);

booleanVariable = condition ? true : exp;
booleanVariable = condition ? false : exp;
booleanVariable = condition ?  exp : true;
booleanVariable = condition ?  exp : false;
booleanVariable = condition ?  true : false;
</pre>
<h2>Compliant Solution</h2>

<pre>
if (booleanVariable) { /* ... */ }
if (!booleanVariable) { /* ... */ }
if (booleanVariable) { /* ... */ }
doSomething(true);

booleanVariable = condition || exp;
booleanVariable = !condition &amp;&amp; exp;
booleanVariable = !condition ||  exp;
booleanVariable = condition &amp;&amp; exp;
booleanVariable = condition;
</pre>
¬
squid:S3422≤
squidS3422+Dependencies should not have "system" scope"MAJOR*java2S3422:‡<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact in an environment that's not configured just like yours is, your code won't work. </p>

<h2>Noncompliant Code Example</h2>
<pre>
&lt;dependency&gt;
  &lt;groupId&gt;javax.sql&lt;/groupId&gt;
  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;
  &lt;version&gt;2.0&lt;/version&gt;
  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;
  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;
&lt;/dependency&gt;
</pre>
¿
squid:S2696∞
squidS26964Instance methods should not write to "static" fields"CRITICAL*java2S2696:“<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code> methods.</p>

<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>

<h2>Noncompliant Code Example</h2>

<pre>
public class MyClass {

  private static int count = 0;

  public void doSomething() {
    //...
    count++;  // Noncompliant
  }
}
</pre>
é
squid:S2333˛
squidS2333&Redundant modifiers should not be used"MINOR*java2S2333:±<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically <code>public static final</code>. There is no need to explicitly declare them so.</p>

<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>

<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public interface Vehicle {

  public void go(int speed, Direction direction);  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
public interface Vehicle {

  void go(int speed, Direction direction);
</pre>
ﬁ
-squid:RightCurlyBraceSameLineAsNextBlockCheck¨
squid'RightCurlyBraceSameLineAsNextBlockCheckhClose curly brace and the next "else", "catch" and "finally" keywords should be located on the same line"MINOR*java2'RightCurlyBraceSameLineAsNextBlockCheck:Ÿ<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or <code>finally</code> keywords.</p>
<p>The following code snippet illustrates this rule:</p>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {          // Compliant
    doSomethingElse();
  }
  else {                               // Noncompliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {              // Compliant
    log(e);
  }
  finally {                            // Noncompliant
    closeConnection();
  }
}
</pre>


squid:S3423‡

squidS3423/pom elements should be in the recommended order"MINOR*java2S3423:ä
<p>The POM Code Convention convention recommends listing modifiers in the following order:</p>
<ol>
<li> &lt;modelVersion/&gt;
</li><li> &lt;parent/&gt;
</li><li> &lt;groupId/&gt;
</li><li> &lt;artifactId/&gt;
</li><li> &lt;version/&gt;
</li><li> &lt;packaging/&gt;
</li><li> &lt;name/&gt;
</li><li> &lt;description/&gt;
</li><li> &lt;url/&gt;
</li><li> &lt;inceptionYear/&gt;
</li><li> &lt;organization/&gt;
</li><li> &lt;licenses/&gt;
</li><li> &lt;developers/&gt;
</li><li> &lt;contributors/&gt;
</li><li> &lt;mailingLists/&gt;
</li><li> &lt;prerequisites/&gt;
</li><li> &lt;modules/&gt;
</li><li> &lt;scm/&gt;
</li><li> &lt;issueManagement/&gt;
</li><li> &lt;ciManagement/&gt;
</li><li> &lt;distributionManagement/&gt;
</li><li> &lt;properties/&gt;
</li><li> &lt;dependencyManagement/&gt;
</li><li> &lt;dependencies/&gt;
</li><li> &lt;repositories/&gt;
</li><li> &lt;pluginRepositories/&gt;
</li><li> &lt;build/&gt;
</li><li> &lt;reporting/&gt;
</li><li> &lt;profiles/&gt;
</li></ol>
<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard order.</p>

<h2>See</h2>
<ul>
<li> <a href="https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention">POM Code Convention</a>
</li></ul>
À
squid:S1244ª
squidS12448Floating point numbers should not be tested for equality"CRITICAL*java2S1244:Ÿ<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</p>
<p>Even simple floating point assignments are not simple:</p>
<pre>
float f = 0.1; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>
<p>(Results will vary based on compiler and compiler settings);</p>
<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values is almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider using one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code> for instance).</p>
<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>
<h2>Noncompliant Code Example</h2>

<pre> 
float myNumber = 3.146; 
if ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false 
  // ... 
} 
if ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true 
  // ... 
} 

if (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test
  // ...
}

float zeroFloat = 0.0f;
if (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.
}
</pre>
<h2>Compliant Solution</h2>

<pre>
float zeroFloat = 0.0f;
if (Float.floatToRawIntBits(zeroFloat) == 0) { //Compliant for comparisons of zero. Using bit comparison ensures we compare zero values
}
</pre>
<h2>Exceptions</h2>

<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<pre>
float f;
double d;
if(f != f) { // Compliant; test for NaN value
  System.out.println("f is NaN");
} else if (f != d) { // Noncompliant
  // ...
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.</li>
<li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality</li>
</ul>
∑
squid:S3420ß
squidS3420.Artifact ids should follow a naming convention"MINOR*java2S3420:“<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the provided regular expression.</p>

<h2>Noncompliant Code Example</h2>
<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
&lt;project ...&gt;
  &lt;artifactId&gt;my-project&lt;/artifactId&gt;

  &lt;!-- ... --&gt;
&lt;/project&gt;
</pre>
ë
squid:S2694Å
squidS2694LInner classes which do not reference their owning classes should be "static""MAJOR*java2S2694:é<p>
  A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods.
  That class reference makes the inner class larger and could cause the outer class instance to live in memory longer than necessary.
</p>
<p>
  If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested).
  If the reference is used only in the class constructor, then explicitly pass a class reference to the constructor.
  If the inner class is anonymous, it will also be necessary to name it.
</p>
<p>
  However, while a nested/<code>static</code> class would be more efficient,
  it's worth nothing that there are semantic differences between an inner class and a nested one:
</p>
<ul>
  <li>an inner class can only be instantiated within the context of an instance of the outer class.</li>
  <li>a nested (<code>static</code>) class can be instantiated independently of the outer class.</li>
</ul>

<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  // ...

  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  // ...

  public static class Seed {
    int germinationDays = 0;
    public Seed(int germinationDays) {
      this.germinationDays = germinationDays;
    }
    public int getGerminationDays() {
      return germinationDays;
    }
  }
}
</pre>
œ
squid:S3421ø
squidS34211Deprecated "${pom}" properties should not be used"MAJOR*java2S3421:Á<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added, and all existing uses should be gradually removed.</p>
<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>

<h2>Noncompliant Code Example</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;
</pre>
<p>or</p>
<pre>
  &lt;build&gt;
    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;
</pre>
‡
squid:S2695–
squidS2695O"PreparedStatement" and "ResultSet" methods should be called with valid indices"BLOCKER*java2S2695:ÿ<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any set method of a <code>PreparedStatement</code> with a number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1, rather than 0.</p>

<h2>Noncompliant Code Example</h2>

<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate > ? and salary < ?");
ps.setDate(0, date);  // Noncompliant
ps.setDouble(3, salary);  // Noncompliant

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(0);  // Noncompliant
  // ...
}
</pre>

<h2>Compliant Solution</h2>

<pre>
PreparedStatement ps = con.prepareStatement("SELECT fname, lname FROM employees where hireDate > ? and salary < ?");
ps.setDate(1, date);
ps.setDouble(2, salary);

ResultSet rs = ps.executeQuery();
while (rs.next()) {
  String fname = rs.getString(1);
  // ...
}
</pre>
Å
squid:S2692Ò
squidS26923"indexOf" checks should not be for positive numbers"CRITICAL*java2S2692:î<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the first element, which is likely a bug.
If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider using the <code>contains</code> method instead.</p>

<p>For strings, if the intent is truly to find the first index after a specific character index, then use the version of <code>indexOf</code> which takes a start position argument.</p>

<p>This rule raises an issue any time an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested for a positive value.</p>

<h2>Noncompliant Code Example</h2>

<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt;();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; 0) {  // Noncompliant
  // ...
}
if (name.indexOf("ish") &gt; 0) { // Noncompliant
  // ...
}
if (name.indexOf("hma") &gt; 2) { // Noncompliant
  // ...
}
</pre>

<h2>Compliant Solution</h2>

<pre>
String color = "blue";
String name = "ishmael";

List&lt;String&gt; strings = new ArrayList&lt;String&gt;();
strings.add(color);
strings.add(name);

if (strings.indexOf(color) &gt; -1) {
  // ...
}
if (name.indexOf("ish") &gt;= 0) {
  // ...
}
if (name.indexOf("hma") &gt; -1) {
  // ...
}
</pre>
ƒ
squid:S2693¥
squidS2693-Threads should not be started in constructors"MAJOR*java2S2693:‡<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever extended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>

<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>

<h2>Noncompliant Code Example</h2>

<pre>
public class MyClass {

  Thread thread = null;

  public MyClass(Runnable runnable) {
    thread = new Thread(runnable);
    thread.start(); // Noncompliant
  }
}
</pre>
‚
"squid:CallToFileDeleteOnExitMethodª
squidCallToFileDeleteOnExitMethod!"deleteOnExit" should not be used"MAJOR*java2CallToFileDeleteOnExitMethod:≈<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>
<ul>
<li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed.</li>
<li> For each file handler, the memory associated to the handler is released only at the end of the process.</li>
</ul>
<h2>Noncompliant Code Example</h2>

<pre>
File file = new File("file.txt");
file.deleteOnExit();  // Noncompliant
</pre>
ó	
squid:CallToDeprecatedMethodˆ
squidCallToDeprecatedMethod%"@Deprecated" code should not be used"MINOR*java2CallToDeprecatedMethod:à<p>
  Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended.
  Deprecation is a warning that the class or interface has been superseded, and will eventually be removed.
  The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
/**
 * @deprecated  As of release 1.3, replaced by {@link #Fee}
 */@Deprecated
class Fum { ... }

public class Bar extends Fum {  // Noncompliant; Fum is deprecated

  public void myMethod() {
    Foo foo = new Foo();  // okay; the class isn't deprecated
    foo.doTheThing();  // Noncompliant
  }
}
</pre>

<h2>See</h2>
<ul>
<li><a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions</li>
<li><a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWASP Top Ten 2013 Category A9</a> - Using Components with Known Vulnerabilities</li>
</ul>
Â
"squid:SwitchLastCaseIsDefaultCheckæ
squidSwitchLastCaseIsDefaultCheck6"switch" statements should end with a "default" clause"MAJOR*java2SwitchLastCaseIsDefaultCheck:≥<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken.</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>

<h2>See</h2>

<ul>
<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>
<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>
<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>
<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>
<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>
<li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>
<li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>
<li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>
</ul>
™
squid:S1481ö
squidS1481(Unused local variables should be removed"MAJOR*java2S1481:À<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public int numberOfMinutes(int hours) {
  int seconds = 0;   // seconds is never used 
  return hours * 60;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public int numberOfMinutes(int hours) {
  return hours * 60;
}
</pre>
Ç
squid:S1610Ú
squidS1610AAbstract classes without fields should be converted to interfaces"MAJOR*java2S1610:ä<p>With Java 8's "default method" feature, any abstract class without direct or inherited field should be converted into an interface.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Car {
  public abstract void start(Environment c);

  public void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public interface Car {
  public void start(Environment c);

  public default void stop(Environment c) {
    c.freeze(this);
  }
}
</pre>
é
squid:S2388˛
squidS2388>Inner class calls to super class methods should be unambiguous"MAJOR*java2S2388:ô<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called explicitly, using <code>super.</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      foo();  // Noncompliant; was Outer.this.foo() intended instead?
      // ...
    }
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Parent {
  public void foo() { ... }
}

public class Outer {

  public void foo() { ... }

  public class Inner extends Parent {

    public void doTheThing() {
      super.foo();
      // ...
    }
  }
}
</pre>
ú
squid:S1850å
squidS1850M"instanceof" operators that always return "true" or "false" should be removed"MAJOR*java2S1850:ò<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding which could lead to unexpected behavior in production.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public boolean isSuitable(Integer param) {
...
  if(param instanceof Number) {  //Always true as param is an Integer, unless param is null
    doSomething();
  }
...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public boolean isSuitable(Integer param) {
...
  doSomething();
...
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True</li>
<li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False</li>
</ul>
Ú
squid:S2147‚
squidS2147Catches should be combined"MAJOR*java2S2147:°<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they should be combined for better readability.</p>
<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
catch (IOException e) {
  doCleanup();
  logger.log(e);
}
catch (SQLException e) {  // Noncompliant
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {  // Compliant; block contents are different
  doCleanup();
  throw e;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
catch (IOException|SQLException e) {
  doCleanup();
  logger.log(e);
}
catch (TimeoutException e) {
  doCleanup();
  throw e;
}
</pre>
Æ
squid:S2386û
squidS2386,Mutable fields should not be "public static""CRITICAL*java2S2386:»<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>. Such variables should be moved into classes and their visibility lowered. </p>
<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters, should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>
<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on the mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>
<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public interface MyInterface {
  public static String [] strings; // Noncompliant
}

public class A {
  public static String [] strings1 = {"first","second"};  // Noncompliant
  public static String [] strings2 = {"first","second"};  // Noncompliant
  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant
  // ...
}
</pre>
<h2>See</h2>

<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static</li>
  <li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object</li>
</ul>
¢
squid:S3355í
squidS3355.Web applications should use validation filters"CRITICAL*java2S3355:∫
<p>Specifying a validation filter for all input in your <code>web.xml</code> allows you to scrub all your HTTP parameters in one central place. To do so, you'll need to define a validator, and a filtering class that uses it, then set up the filter's use in <code>web.xml</code>.</p>

<h2>Compliant Solution</h2>
<pre>
public class ValidatingHttpRequest extends HttpServletRequestWrapper {
  // ...
}

public class ValidationFilter implements javax.servlet.Filter {
  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {
    chain.doFilter(new ValidatingHttpRequest( (HttpServletRequest)request ), response);
  }
}
</pre>
<p>and</p>
<pre>
  &lt;filter&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;
  &lt;/filter&gt;
       
  &lt;filter-mapping&gt;
     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;
     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
  &lt;/filter-mapping&gt;
</pre>

<h2>See</h2>
<ul>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection
</li><li> <a href="https://www.owasp.org/index.php/How_to_add_validation_logic_to_HttpServletRequest">OWASP, How to add validation logic to HttpServletRequest</a>
</li></ul>
Ö
squid:S2387ı
squidS2387:Child class members should not shadow parent class members"MAJOR*java2S2387:î<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at best,
chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>

<p>This rule ignores <code>private</code> parent class members, but in all other such cases, the child class field should be renamed.</p>

<h2>Noncompliant Code Example</h2>

<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripe;  // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public class Fruit {
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry extends Fruit {
  private boolean ripened;
  private static Color FLESH_COLOR;
}
</pre>
ƒ
squid:S2142¥
squidS2142,"InterruptedException" should not be ignored"CRITICAL*java2S2142:ﬁ
<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as "ignoring". Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up the method's state - or the method should be reinterrupted. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void run () {
  try {
    while (true) { 
      // do stuff
    }
  }catch (InterruptedException e) { // Noncompliant; logging is not enough
    LOGGER.log(Level.WARN, "Interrupted!", e);
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void run () throws InterruptedException{
  try {
    while (true) { 
      // do stuff
    }
  }catch (InterruptedException e) {
    LOGGER.log(Level.WARN, "Interrupted!", e);
    // clean up state...
    throw e;
  }
}
</pre>
<p>or</p>
<pre>
public void run () {
  try {
    while (true) { 
      // do stuff
    }
  }catch (InterruptedException e) {
    LOGGER.log(Level.WARN, "Interrupted!", e);
    // clean up state...
    Thread.currentThread().interrupt();
  }
}
</pre>

<h2>See</h2>
<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition
</li></ul>
…
squid:S2384π
squidS23849Mutable members should not be stored or returned directly"CRITICAL*java2S2384:÷<p>
  Mutable objects are those whose state can be changed.
  For instance, an array is mutable, but a String is not.
  Mutable class members should never be returned to a caller or accepted and stored directly.
  Doing so leaves you vulnerable to unexpected changes in your class state.
</p>
<p>
  Instead, a copy of the mutable object should be made, and that copy should be stored or returned.
</p>
<p>
  This rule checks that arrays, collections and Dates are not stored or returned directly.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings; // Noncompliant
  }

  public void setStrings(String [] strings) {
    this.strings = strings;  // Noncompliant
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"yellow", "second"};
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class A {
  private String [] strings;

  public A () {
    strings = new String[]{"first", "second"};
  }

  public String [] getStrings() {
    return strings.clone();
  }

  public void setStrings(String [] strings) {
    this.strings = strings.clone();
  }
}

public class B {

  private A a = new A();  // At this point a.strings = {"first", "second"};

  public void wreakHavoc() {
    a.getStrings()[0] = "yellow";  // a.strings = {"first", "second"};
  }
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/374">MITRE, CWE-374 - Passing Mutable Objects to an Untrusted Method</a></li>
  <li><a href="http://cwe.mitre.org/data/definitions/375">MITRE, CWE-375 - Returning a Mutable Object ot an Untrusted Caller</a></li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/zQCuAQ">CERT, OBJ05-J - Defensively copy private mutable class members before returning their references</a></li>
</ul>
˙
squid:S1175Í
squidS1175FThe signature of "finalize()" should match that of "Object.finalize()""MAJOR*java2S1175:˝<p><code>Object.finalize()</code> is called by the Garbage Collector sometime after the object becomes unreferenced.</p>
<p>Overloading this method is misleading:</p>
<ul>
<li> The overload will not be called by the Garbage Collector.</li>
<li> Users are not expected to call <code>Object.finalize()</code> and will get confused.</li>
</ul>
<p>Another name should be picked for the method.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public int finalize(int someParameter) {        // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public int someBetterName(int someParameter) {  // Compliant
  /* ... */
}
</pre>
‘
squid:S1174ƒ
squidS1174K"Object.finalize()" should remain protected (versus public) when overriding"MAJOR*java2S1174:“<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>
<p>Making this method public is misleading, because it implies that any caller can use it.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class MyClass {

  @Override
  public void finalize() {    // Noncompliant
    /* ... */
  }
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/583.html">MITRE, CWE-583</a> - finalize() Method Declared Public</li>
<li> CERT Java Secure Coding, MET12-J - Do not use finalizers</li>
</ul>
…
squid:S1858π
squidS18586"toString()" should never be called on a String object"MAJOR*java2S1858:‹<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant construction may be optimized by the compiler, but will be confusing in the meantime.</p>

<h2>Noncompliant Code Example</h2>

<pre>
String message = "hello world";
System.out.println(message.toString()); // Noncompliant;
</pre>

<h2>Compliant Solution</h2>

<pre>
String message = "hello world";
System.out.println(message);
</pre>
ê
squid:S1854Ä
squidS1854Dead stores should be removed"MAJOR*java2S1854:º<p>A dead store happens when a local variable is assigned a value, including <code>null</code> that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.</p>

<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage collector used to be common practice, but is no longer needed and such code should be eliminated.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void pow(int a, int b) {
  if(b == 0) {
    return 0;
  }
  int x = a;
  for(int i= 1, i < b, i++) {
    x = x * a;  //Dead store because the last return statement should return x instead of returning a
  }
  return a;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void pow(int a, int b) {
  if(b == 0) {
    return 0;
  }
  int x = a;
  for(int i= 1, i < b, i++) {
    x = x * a;
  }
  return x;
}
</pre>

<h2>See</h2>
<ul>
  <li> <a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C</a> - Detect and remove unused values</li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP</a> - Detect and remove unused values</li>
</ul>
Á
squid:S1612◊
squidS16121Lambdas should be replaced with method references"MINOR*java2S1612:ˇ<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
  List<Integer> list = new ArrayList<Integer>();
  list.add(0);
  list.add(1);
  list.add(2);

    list.forEach(n -> { System.out.println(n); });
</pre>

<h2>Compliant Solution</h2>
<pre>
  List<Integer> list = new ArrayList<Integer>();
  list.add(0);
  list.add(1);
  list.add(2);

  list.forEach(System.out::println);
</pre>
¸
squid:S2701Ï
squidS27017Literal boolean values should not be used in assertions"MAJOR*java2S2701:é<p>There's no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>

<pre>
Assert.assertTrue(true);  // Noncompliant
assertThat(true).isTrue(); // Noncompliant
</pre>
«
squid:S1611∑
squidS1611\Parentheses should be removed from a single lambda input parameter when its type is inferred"MINOR*java2S1611:¥<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
(x) -> x * 2
</pre>

<h2>Compliant Solution</h2>
<pre>
x -> x * 2
</pre>
À
squid:ClassCyclomaticComplexityß
squidClassCyclomaticComplexity!Classes should not be too complex"MAJOR*java2ClassCyclomaticComplexity:∑<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>, <code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance initializer in the class. The last return statement in method, if exists, is not taken into account.</p>
<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the time, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several classes.</p>
ê	
squid:S1609Ä	
squidS1609X@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces"MAJOR*java2S1609:Å<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as <code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and <code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or Method references. </p>
<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would break the use of Lambda implementations.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
<h2>Compliant Solution</h2>

<pre>
@FunctionalInterface
public interface Changeable&lt;T&gt; {
  public void change(T o);
}
</pre>
°
squid:S1294ë
squidS12946The Array.equals(Object obj) method should not be used"CRITICAL*java2S1294:±<p>Since arrays do not override <code>Object.equals()</code>, calling equals on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>. </p>
<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. To prevent such a misunderstanding, the '==' operator or <code>Arrays.equals(array1, array2)</code> must always be used in place of the <code>Array.equals(Object obj)</code> method.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if(array1.equals(array2)){...}
</pre>
<h2>Compliant Solution</h2>

<pre>
if(Arrays.equals(array1, array2)){...}
</pre>
<p>or</p>
<pre>
if(array1 == array2){...}
</pre>

<h2>Deprecated</h2>
<p>This rule is deprecated, use <a href='/coding_rules#rule_key=squid:S2159'>S2159</a> instead.</p>
≠	
squid:S1172ù	
squidS1172*Unused method parameters should be removed"MAJOR*java2S1172:Ã<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>
<h2>Noncompliant Code Example</h2>

<pre>
void doSomething(int a, int b) {     // "b" is unused
  compute(a);
}
</pre>
<h2>Compliant Solution</h2>

<pre>
void doSomething(int a) { 
  compute(a);
}
</pre>
<h2>Exceptions</h2>

<p>Override and implementation methods are excluded, as are parameters annotated with <code>@Observes</code>, and methods that are intended to be overridden.</p>
<pre>
@override
void doSomething(int a, int b) {     // no issue reported on b
  compute(a);
}

public void foo(String s) {
  // designed to be extended but noop in standard case
}

protected void bar(String s) {
  //open-closed principle
}

public void qix(String s) {
  throw new UnsupportedOperationException("This method should be implemented in subclasses");
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions.</li>
<li> MISRA C:2012, 2.7 - There should be no unused parameters in functions</li>
</ul>
ÿ
squid:S1170»
squidS1170jPublic constants and fields initialized at declaration should be "static final" rather than merely "final""MINOR*java2S1170:∑<p>Making a constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Myclass {
  public final int THRESHOLD = 3;   
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Myclass {
  public static final int THRESHOLD = 3;    // Compliant
}
</pre>
<h2>Exceptions (for Java)</h2>

<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>
<blockquote>
<p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (¬ß8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (¬ß15.28).</p>
</blockquote>
ß
squid:S1171ó
squidS1171-Only static class initializers should be used"MAJOR*java2S1171:√<p>Non-static initializers are rarely used, and can be confusing for most developers.</p>
<p>When possible, they should be refactored into standard constructors or field initializers.</p>
<h2>Noncompliant Code Example</h2>

<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {

    // Noncompliant - HashMap should be extended only to add behavior, not for initialization
    {
      put("a", "b");
    }

  };
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {
  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();

  static {
    MY_MAP.put("a", "b");
  }
}
</pre>
<p>or using Guava:</p>
<pre>
class MyClass {
  // Compliant
  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of("a", "b");
}
</pre>
Â
squid:S3369’
squidS3369&Security constraints should be defined"CRITICAL*java2S3369:Ö<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes, but it's a start, and should be used at least as a base.</p>
<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-contraint&gt;</code> elements.</p>

<h2>See</h2>
<ul>
<li> <a href="https://cwe.mitre.org/data/definitions/284.html">MITRE, CWE-284</a> - Improper Access Control
</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control">OWASP Top Ten 2013 Category A7</a> - Missing Function Level Access Control
</li></ul>
ï
squid:S2159Ö
squidS2159(Silly equality checks should not be made"CRITICAL*java2S2159:≥<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>
<ul>
<li> comparing an object with null</li>
<li> comparing an object with an unrelated primitive (E.G. a string with an int)</li>
<li> comparing unrelated classes</li>
<li> comparing an unrelated <code>final class</code> and <code>interface</code></li>
<li> comparing an array to a non-array</li>
<li> comparing two arrays</li>
</ul>
<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>
<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be used with arrays.</p>
<h2>Noncompliant Code Example</h2>

<pre>
interface KitchenTool { ... };
interface Plant {...}

public final class Spatula implements KitchenTool { ... }
public class Tree implements Plant { ...}
//...

Spatula spatula = new Spatula();
KitchenTool tool = spatula;
KitchenTool [] tools = {tool};

Tree tree = new Tree();
Plant plant = tree;
Tree [] trees = {tree};


if (spatula.equals(tree)) { // Noncompliant; unrelated classes
  // ...
}
else if (spatula.equals(plant)) { // Noncompliant; unrelated final class and interface
  // ...
}
else if (tool.equals(tools)) { // Noncompliant; array &amp; non-array
  // ...
}
else if (trees.equals(tools)) {  // Noncompliant; incompatible arrays
  // ...
}
else if (tree.equals(null)) {  // Noncompliant
  // ...
}
</pre>
É

squid:S1862Û	
squidS1862BRelated "if/else if" statements should not have the same condition"CRITICAL*java2S1862:á	<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>. </p>
<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>

<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
}

</pre>
<h2>Compliant Solution</h2>

<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
}

</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
µ
squid:S2039•
squidS2039.Member variable visibility should be specified"CRITICAL*java2S2039:Õ<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it open to unexpected modification by other classes.</p>

<h2>Noncompliant Code Sample</h2>
<pre>
class Ball {
  String color="red";  // Noncompliant
}
enum A {
 B;
 int a;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Ball {
  private String color="red";  // Compliant
}
enum A {
 B;
 private int a;
}
</pre>
‰

squid:S2157‘

squidS2157%"Cloneables" should implement "clone""CRITICAL*java2S2157:Ö
<p>Simply implementing <code>Cloneable</code>  without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability. Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e. without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>

<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a class to be copied.</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Team implements Cloneable {  // Noncompliant
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) {...}
  public Person getCoach() {...}
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Team implements Cloneable {
  private Person coach;
  private List&lt;Person&gt; players;
  public void addPlayer(Person p) { ... }
  public Person getCoach() { ... }

  @Override
  public Object clone() { 
    Team clone = (Team) super.clone();
    //...
  }
}
</pre>
¢
squid:S2278í
squidS2278GNeither DES (Data Encryption Standard) nor DESede (3DES) should be used"CRITICAL*java2S2278:°
<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>
<blockquote>
<p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer provides the security that is needed to protect federal government information.</p>
<p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>
</blockquote>
<h2>Noncompliant Code Example</h2>

<pre>
Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
</pre>
<h2>Compliant Solution</h2>

<pre>
Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength</li>
<li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a></li>
</ul>
À
squid:S1860ª
squidS1860BSynchronization should not be based on Strings or boxed primitives"BLOCKER*java2S1860:–<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of <code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the two.</p>
<h2>Noncompliant Code Example</h2>

<pre>
private static final Boolean bLock = Boolean.FALSE;
private static final Integer iLock = Integer.valueOf(0);
private static final String sLock = "LOCK";

public void doSomething() {

  synchronized(bLock) {  // Noncompliant
    // ...
  }
  synchronized(iLock) {  // Noncompliant
    // ...
  }
  synchronized(sLock) {  // Noncompliant
    // ...
  }
</pre>
<h2>Compliant Solution</h2>

<pre>
private static final Object lock1 = new Object();
private static final Object lock2 = new Object();
private static final Object lock3 = new Object();

public void doSomething() {

  synchronized(lock1) {
    // ...
  }
  synchronized(lock2) {
    // ...
  }
  synchronized(lock3) {
    // ...
  }
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/rQGeAQ">CERT, LCK01-J</a> - Do not synchronize on objects that may be reused</li>
</ul>
à
squid:S1068¯

squidS1068'Unused private fields should be removed"MAJOR*java2S1068:™
<p>
If a private field is declared but not used in the program, it can be considered dead code and should therefore be removed.
This will improve maintainability because developers will not wonder what the variable is used for.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  private int foo = 42;

  public int compute(int a) {
    return a * 42;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  public int compute(int a) {
    return a * 42;
  }
}
</pre>

<h2>Exceptions</h2>

<p>
The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization.
A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:
</p>

<pre>
public class MyClass implements java.io.Serializable {
  private static final long serialVersionUID = 42L;
}
</pre>
<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>
ÿ
squid:S2276»
squidS2276M"wait(...)" should be used instead of "Thread.sleep(...)" when a lock is held"CRITICAL*java2S2276:—<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance, and scalability issues, or even worse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to temporarily release the lock and allow other threads to run.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      Thread.sleep(200);
    }
    process();
  }
  ...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public void doSomething(){
  synchronized(monitor) {
    while(notReady()){
      monitor.wait(200);
    }
    process();
  }
  ...
}
</pre>
œ
squid:S1188ø
squidS1188<Lambdas and anonymous classes should not have too many lines"MAJOR*java2S1188:‹<p>
Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become unreadable.
</p>
æ
squid:S1067Æ
squidS1067%Expressions should not be too complex"MAJOR*java2S1067:‚<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default threshold value of 3:</p>
<pre>
if (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... } 
</pre>
<h2>Compliant Solution</h2>

<pre>
if ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }     
</pre>
ª
squid:S2156´
squidS21563"final" classes should not have "protected" members"MAJOR*java2S2156:—The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code> members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a <code>final</code> class <code>protected</code> is confusingly pointless.

<h2>Noncompliant Code Example</h2>
<pre>
public final class MyFinalClass {

  protected String name = "Fred";  // Noncompliant
  protected void setName(String name) {  // Noncompliant
    // ...
  }
</pre>

<h2>Compliant Solution</h2>
<pre>
public final class MyFinalClass {

  private String name = "Fred";
  public void setName(String name) {
    // ...
  }
</pre>
ó
squid:S1066á
squidS1066,Collapsible "if" statements should be merged"MAJOR*java2S1066:¥<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>

<h2>Noncompliant Code Example</h2>

<pre>
if (file != null) {
  if (file.isFile() || file.isDirectory()) {
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
if (file != null &amp;&amp; isFileOrDirectory(file)) {
  /* ... */
}

private static boolean isFileOrDirectory(File file) {
  return file.isFile() || file.isDirectory();
}
</pre>
«

squid:S2277∑

squidS2277cCryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)"CRITICAL*java2S2277:™	<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an issue as soon as a literal value starts with <code>RSA/NONE</code>. </p>
<h2>Noncompliant Code Example</h2>

<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/NONE/NoPadding");
</pre>
<h2>Compliant Solution</h2>

<pre>
Cipher rsa = javax.crypto.Cipher.getInstance("RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING");
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/780.html">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP</li>
<li> <a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration">OWASP Top Ten 2013 Category A5</a> - Security Misconfiguration</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING">RSA NoPadding Unsafe</a></li>
</ul>
∏	
squid:S2153®	
squidS21536Boxing and unboxing should not be immediately reversed"MAJOR*java2S2153:À<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code> value. Unboxing is the process of retrieving the primitive value from such an object.</p>
<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing and auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void examineInt(int a) { 
  //... 
}

public void examineInteger(Integer a) { 
  // ...
}

public void func() {
  int i = 0;
  Integer iger1 = Integer.valueOf(0);
  double d = 1.0;

  int dIntValue = new Double(d).intValue(); // Noncompliant

  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox
  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed

  examineInteger(i); // Compliant; value is boxed but not then unboxed
  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed
}
</pre>
Ÿ
squid:S2274…
squidS2274T"Object.wait(...)" and "Condition.await(...)" should be called inside a "while" loop"CRITICAL*java2S2274:À<p>According to the Java <code>Condition</code> interface documentation:</p>
<blockquote>
<p>When waiting upon a <code>Condition</code>, a "spurious wakeup" is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop.</p>
</blockquote>
<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>
<blockquote>
<p>waits should always occur in loops, like this one:</p>
<pre>
synchronized (obj) {
  while (&lt;condition does not hold&gt;){
    obj.wait(timeout); 
  }
   ... // Perform action appropriate to condition
}
</pre>
</blockquote>
<h2>Noncompliant Code Example</h2>

<pre>
synchronized (obj) {
  if (!suitableCondition()){
    obj.wait(timeout);   //the thread can wakeup whereas the condition is still false
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>Compliant Solution</h2>

<pre>
synchronized (obj) {
  while (!suitableCondition()){
    obj.wait(timeout);
  }
   ... // Perform action appropriate to condition
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/display/java/THI03-J.+Always+invoke+wait%28%29+and+await%28%29+methods+inside+a+loop">CERT THI03-J</a> - Always invoke wait() and await() methods inside a loop
</li></ul>
ò
squid:S1065à
squidS1065Unused labels should be removed"MAJOR*java2S1065:¬<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>
<p>This will improve maintainability as developers will not wonder what this label is used for.</p>

<h2>Noncompliant Code Example</h2>
<pre>
void foo() {
  outer: //label is not used.
  for(int i = 0; i<10; i++) {
    break;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
void foo() {
  for(int i = 0; i<10; i++) {
    break;
  }
}
</pre>

<h2>See</h2>
<ul>
  <li>MISRA C:2012, 2.6 - A function should not contain unused label declarations</li>
</ul>
Ó	
squid:S1186ﬁ	
squidS1186Methods should not be empty"MAJOR*java2S1186:ú	<p>There are several reasons for a method not to have a method body:</p>
<ul>
  <li>It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.</li>
  <li>It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown.</li>
  <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>
  <li>
    There is a desire to provide a public, no-args constructor.
    In this case, it can simply be omitted from the code; a default constructor will automatically be generated.
  </li>
</ul>

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
}

public void doSomethingElse() {
}
</pre>

<h2>Compliant Solution</h2>
<pre>
@Override
public void doSomething() {
  // Do nothing because of X and Y.
}

@Override
public void doSomethingElse() {
  throw new UnsupportedOperationException();
}
</pre>

<h2>Exceptions</h2>
<p>An abstract class may have empty methods, in order to provide default implementations for child classes.</p>
<pre>
public abstract class Animal {
  void speak() {
  }
}
</pre>
â
squid:S2154˘
squidS2154cDissimilar primitive wrappers should not be used with the ternary operator without explicit casting"CRITICAL*java2S2154:Ï<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible type.</p>

<h2>Noncompliant Code Example</h2>

<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8
</pre>

<h2>Compliant Solution</h2>

<pre>
Integer i = 123456789;
Float f = 1.0f;
Number n = condition ? (Number) i : f;  // n = 123456789
</pre>
˛
squid:S2275Ó
squidS2275MPrintf-style format strings should not lead to unexpected behavior at runtime"CRITICAL*java2S2275:˜<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code> and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>
<h2>Noncompliant Code Example</h2>

<pre>
String.format("The value of my integer is %d", "Hello World");  // Noncompliant; an 'int' is expected rather than a String
String.format("First {0} and then {1}", "foo", "bar");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters "foo" and "bar" will be simply ignored here
String.format("Duke's Birthday year is %tX", c);  //Noncompliant; X is not a supported time conversion character
String.format("Display %3$d and then %d", 1, 2, 3);   //Noncompliant; the second argument '2' is unused
String.format("Display %0$d and then %d", 1);   //Noncompliant; arguments are numbered starting from 1
String.format("Too many arguments %d and %d", 1, 2, 3);  //Noncompliant; the third argument '3' is unused
String.format("Not enough arguments %d and %d", 1);  //Noncompliant; the second argument is missing
String.format("First Line\n");   //Noncompliant; %n should be used in place of \n to produce the platform-specific line separator
String.format("%&lt; is equals to %d", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one
String.format("Is myObject null ? %b", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)
String.format("value is " + value); // Noncompliant
String s = String.format("string without arguments"); // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
String.format("The value of my integer is %d", 3);
String.format("First %s and then %s", "foo", "bar");
String.format("Duke's Birthday year is %tY", c);
String.format("Display %2$d and then %d", 1, 3);
String.format("Display %1$d and then %d", 1);
String.format("Too many arguments %d %d", 1, 2);
String.format("Not enough arguments %d and %d", 1, 2);
String.format("First Line%n");
String.format("%d is equals to %&lt;", 2);
String.format("Is myObject null ? %b", myObject == null);
String.format("value is %d", value);
String s = "string without arguments"; 
</pre>
≤
squid:S1185¢
squidS1185UOverriding methods should do more than simply call the same method in the super class"MINOR*java2S1185:¶<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void doSomething() {                
  super.doSomething();
}

@Override
public boolean isLegal(Action action) {      
  return super.isLegal(action);
}
</pre>
<h2>Compliant Solution</h2>

<pre>
@Override
public boolean isLegal(Action action) {         // Compliant - not simply forwarding the call
  return super.isLegal(new Action(/* ... */));
}

@Id
@Override
public int getId() {                            // Compliant - there is annotation different from @Override
  return super.getId();
}
</pre>
§
squid:S2718î
squidS2718H"DateUtils.truncate" from Apache Commons Lang library should not be used"MAJOR*java2S2718:•<p>The use of the <code>Instant</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code> class from Commons Lang.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
public Date trunc(Date date) {
  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant 
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public Date trunc(Date date) {
  Instant instant = date.toInstant();
  instant = instant.truncatedTo(ChronoUnit.SECONDS);
  return Date.from(instant);
}
</pre>
¬
squid:S1989≤
squidS19894Exceptions should not be thrown from servlet methods"CRITICAL*java2S1989:‘<p>
  Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>,
  it's a bad idea to let such exceptions be thrown.
  Failure to catch exceptions in a servlet could leave a system in a vulnerable state,
  possibly resulting in denial-of-service attacks, or the exposure of sensitive information because when
  a servlet throws an exception, the servlet container typically sends debugging information back to the user.
  And that information which could be very valuable to an attacker.
</p>
<p>
  This rule checks all exceptions in methods named "do*" are explicitly handled in servlet classes.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  String ip = request.getRemoteAddr();
  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doGet(HttpServletRequest request, HttpServletResponse response)
  throws IOException, ServletException {
  try {
    String ip = request.getRemoteAddr();
    InetAddress addr = InetAddress.getByName(ip);
    //...
  }
  catch (UnknownHostException uhex) {
    //...
  }
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/600.html">MITRE, CWE-600</a> - Uncaught Exception in Servlet</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/s4EVAQ">CERT, ERR01-J</a> - Do not allow exceptions to expose sensitive information</li>
  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten Category A6</a> - Sensitive Data Exposure</li>
</ul>
Ñ
squid:UndocumentedApiÍ
squidUndocumentedApiHPublic types, methods and fields (API) should be documented with Javadoc"MINOR*java2UndocumentedApi:Á<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>
<p>The following Javadoc elements are required:</p>
<ul>
<li> Parameters, using <code>@param parameterName</code>.</li>
<li> Method return values, using <code>@return</code>.</li>
<li> Generic types, using <code>@param &lt;T&gt;</code>.</li>
</ul>
<p>The following public methods and constructors are not taken into account by this rule:</p>
<ul>
<li> Getters and setters.</li>
<li> Methods with @Override annotation.</li>
<li> Empty constructors.</li>
<li> Static constants.</li>
</ul>
<h2>Noncompliant Code Example</h2>

<pre>
/**
  * This is a Javadoc comment
  */
public class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'

  public static final DEFAULT_STATUS = 0;    // Compliant - static constant
  private int status;                           // Compliant - not public

  public String message;                  // Noncompliant

  public MyClass() {                         // Noncompliant - missing documentation
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {  // Compliant - setter
    this.status = status;
  }

  @Override
  public void run() {                          // Compliant - has @Override annotation
  }

  protected void doSomething() {    // Compliant - not public
  }

  public void doSomething2(int value) {  // Noncompliant
  }

  public int doSomething3(int value) {  // Noncompliant
    return value;
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
/**
  * This is a Javadoc comment
  * @param &lt;T&gt; ...
  */
public class MyClass&lt;T&gt; implements Runnable {

  public static final DEFAULT_STATUS = 0;
  private int status;

  /**
    * This is a Javadoc comment
    */
  public String message;

  /**
   * Class comment...
   */
  public MyClass() {
    this.status = DEFAULT_STATUS;
  }

  public void setStatus(int status) {
    this.status = status;
  }

  @Override
  public void run() {
  }

  protected void doSomething() {
  }

  /**
    * @param value ...
    */
  public void doSomething(int value) {

  /**
    *  {@inheritDoc}
    */
  public int doSomething(int value) {
    return value;
  }
}
</pre>
∑
squid:S3008ß
squidS3008CStatic non-final field names should comply with a naming convention"MINOR*java2S3008:Ω<p>Shared naming conventions allow teams to  collaborate efficiently. This rule checks that static non-final field names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public final class MyClass {
   private static String foo_bar;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {
   private static String fooBar;
}
</pre>
»
squid:HiddenFieldCheck≠
squidHiddenFieldCheck.Local variables should not shadow class fields"MAJOR*java2HiddenFieldCheck:¬<p>Shadowing fields with a local variable is a bad practice that reduces code readability: It makes it confusing to know whether the field or the variable is being used.</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Foo {
  public int myField;

  public void doSomething() {
    int myField = 0;
    ...
  }
}
</pre>
Î	
squid:S2151€	
squidS2151*"runFinalizersOnExit" should not be called"BLOCKER*java2S2151:à	<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and <code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>
<p>According to the Oracle Javadoc:</p>
<blockquote>
<p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.</p>
</blockquote>
<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>
<h2>Noncompliant Code Example</h2>

<pre>
public static void main(String [] args) {
  ...
  System.runFinalizersOnExit(true);  // Noncompliant
  ...
}

protected void finalize(){
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public static void main(String [] args) {
  Runtime.addShutdownHook(new Runnable() {
    public void run(){
      doSomething();
    }
  });
  //...
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J</a> - Do not use finalizers</li>
</ul>
ƒ
squid:S2272¥
squidS2272?"Iterator.next()" methods should throw "NoSuchElementException""MAJOR*java2S2272:ŒBy contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this <code>Iterator</code>. 

<h2>Noncompliant Code Example</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      return null;
    }
    ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyIterator implements Iterator&lt;String&gt;{
  ...
  public String next(){
    if(!hasNext()){
      throw new NoSuchElementException();
    }
    ...
  }
}
</pre>
¿	
squid:S2273∞	
squidS2273r"wait(...)", "notify()" and "notifyAll()" methods should only be called when a lock is obviously held on an object"CRITICAL*java2S2273:î<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a thread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule reinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement.</p>

<h2>Noncompliant Code Example</h2>
<pre>
private void removeElement() {
  while (!suitableCondition()){
    obj.wait();
  }
  ... // Perform removal
}
</pre>

or

<pre>
private void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>

<h2>Compliant Solution</h2>
<pre>
private void removeElement() {
  synchronized(obj) {
    while (!suitableCondition()){
      obj.wait();
    }
    ... // Perform removal
  }
}
</pre>

or

<pre>
private synchronized void removeElement() {
  while (!suitableCondition()){
    wait();
  }
  ... // Perform removal
}
</pre>
á	
squid:S2391˜
squidS23913JUnit framework methods should be declared properly"CRITICAL*java2S2391:ö<p>
  If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used.
  Such a method must be named "suite", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code>
  or a <code>junit.framework.TestSuite</code>.
</p>

<p>
  Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
Test suite() { ... }  // Noncompliant; must be public static
public static boolean suite() { ... }  // Noncompliant; wrong return type
public static Test suit() { ... }  // Noncompliant; typo in method name
public static Test suite(int count) { ... } // Noncompliant; must be no-arg

public void setup() { ... } // Noncompliant; should be setUp
public void tearDwon() { ... }  // Noncompliant; should be tearDown
</pre>

<h2>Compliant Solution</h2>
<pre>
public static Test suite() { ... }
public void setUp() { ... }
public void tearDown() { ... }
</pre>
¶
squid:S1182ñ
squidS1182LClasses that override "clone" should be "Cloneable" and call "super.clone()""MAJOR*java2S1182:£<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding <code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise, it's probably a mistake.</p>
<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>
<ol>
<li> <code>x.clone() != x</code></li>
<li> <code>x.clone().getClass() == x.getClass()</code></li>
<li> <code>x.clone().equals(x)</code></li>
</ol>
<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>
<ol>
<li> <code>super.clone()</code> returns a new object instance</li>
<li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on</li>
<li> <code>Object.clone()</code> performs a shallow copy of the object's state</li>
</ol>
<h2>Noncompliant Code Example</h2>

<pre>
class BaseClass {  // Noncompliant; should implement Cloneable
  @Override
  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance
    return new BaseClass();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class BaseClass implements Cloneable {
  @Override
  public Object clone() throws CloneNotSupportedException {    // Compliant
    return super.clone();
  }
}

class DerivedClass extends BaseClass implements Cloneable {
  /* Does not override clone() */

  public void sayHello() {
    System.out.println("Hello, world!");
  }
}

class Application {
  public static void main(String[] args) throws Exception {
    DerivedClass instance = new DerivedClass();
    ((DerivedClass) instance.clone()).sayHello();              // Displays "Hello, world!" as expected. Invariant #2 is satisfied
  }
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/580.html">MITRE, CWE-580</a> - clone() Method Without super.clone()</li>
</ul>
‘
squid:S1181ƒ
squidS1181(Throwable and Error should not be caught"BLOCKER*java2S1181:Û<p><code>Throwable</code> is the superclass of all errors and exceptions in Java.</p>
<p><code>Error</code> is the superclass of all errors, which are not meant to be caught by applications.</p>
<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from which an application should not attempt to recover.</p>
<h2>Noncompliant Code Example</h2>

<pre>
try { /* ... */ } catch (Throwable t) { /* ... */ }  
try { /* ... */ } catch (Error e) { /* ... */ }   
</pre>
<h2>Compliant Solution</h2>

<pre>
try { /* ... */ } catch (RuntimeException e) { /* ... */ }
try { /* ... */ } catch (MyException e) { /* ... */ }
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/396.html">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/BoB3AQ">CERT, ERR07-J</a> - Do not throw RuntimeException, Exception, or Throwable</li>
</ul>
˜
squid:S1158Á
squidS1158VPrimitive wrappers should not be instantiated only for "toString" or "compareTo" calls"MAJOR*java2S1158:Í<p>
  Creating temporary primitive wrapper objects only for <code>String</code> conversion
  or the use of the <code>compareTo</code> method is inefficient.
</p>
<p>
  Instead, the static <code>toString()</code> or <code>compareTo</code> method of
  the primitive wrapper class should be used.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
new Integer(myInteger).toString();  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
Integer.toString(myInteger);        // Compliant
</pre>
¬
squid:S2127≤
squidS21276"Double.longBitsToDouble" should not be used for "int""BLOCKER*java2S2127:”<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the mathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as if a child were trying to use an adult's gloves.</p>

<h2>Noncompliant Code Example</h2>
<pre>
int i = 42;
double d = Double.longBitsToDouble(i);  // Noncompliant
</pre>
ù
squid:S2245ç
squidS2245LPseudorandom number generators (PRNGs) should not be used in secure contexts"CRITICAL*java2S2245:ó<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</p>
<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code> method should not be used for security-critical applications or for protecting sensitive data. In such context, the <code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>
<h2>Noncompliant Code Example</h2>

<pre>
Random random = new Random();
byte bytes[] = new byte[20];
random.nextBytes(bytes);
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/338.html">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)</li>
<li> <a href="http://cwe.mitre.org/data/definitions/330.html">MITRE, CWE-330</a> - Use of Insufficiently Random Values</li>
<li> <a href="http://cwe.mitre.org/data/definitions/326.html">MITRE, CWE-326</a> - Inadequate Encryption Strength</li>
<li> <a href="http://cwe.mitre.org/data/definitions/310">MITRE, CWE-310</a> - Cryptographic Issues</li>
<li> <a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers">CERT, MSC02-J</a> - Generate strong random numbers</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM">Predictable Pseudo Random Number Generator</a></li>
</ul>
Ù
squid:S1157‰
squidS1157]Case insensitive string comparisons should be made without intermediate upper or lower casing"MAJOR*java2S1157:‡<p>
Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation of temporary, intermediate <code>String</code> objects.
</p>

<p>The following code:</p>

<pre>
boolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant
boolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant
boolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant
</pre>

<p>should be refactored into:</p>

<pre>
boolean result = foo.equalsIgnoreCase(bar);                  // Compliant
</pre>
¶
squid:S1155ñ
squidS11559Collection.isEmpty() should be used to test for emptiness"MAJOR*java2S1155:∂<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations of <code>size()</code> can be <code>O\(n)</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (myCollection.size() == 0) {  // Noncompliant
  /* ... */
}
</pre>
<h2>Compliant Solution</h2>

<pre>
if (myCollection.isEmpty()) {    // Compliant
  /* ... */
}
</pre>
Ò
squid:S2122·
squidS2122<"ScheduledThreadPoolExecutor" should not have 0 core threads"BLOCKER*java2S2122:¸<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code> to zero means the executor will have no threads and run nothing.</p>
<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void do(){

  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant

  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);
  stpe2.setCorePoolSize(0);  // Noncompliant
</pre>
Â
 squid:LabelsShouldNotBeUsedCheck¿
squidLabelsShouldNotBeUsedCheckLabels should not be used"MAJOR*java2LabelsShouldNotBeUsedCheck:÷<p>
Labels are not commonly used in Java, and many developers do not understand how they work.
Moreover, their usage make the control flow harder to follow, which reduces the code's readability.
</p>

<p>
The following code:
</p>

<pre>
int matrix[][] = {
  {1, 2, 3},
  {4, 5, 6},
  {7, 8, 9}
};

outer: for (int row = 0; row < matrix.length; row++) {   // Noncompliant
  for (int col = 0; col < matrix[row].length; col++) {
    if (col == row) {
      continue outer;
    }
    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8
  }
}
</pre>

<p>
should be refactored into:
</p>

<pre>
for (int row = 1; row < matrix.length; row++) {          // Compliant
  for (int col = 0; col < row; col++) {
    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8
  }
}
</pre>
ã
squid:S2123˚
squidS2123*Values should not be uselessly incremented"CRITICAL*java2S2123:ß<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i = i++; // Noncompliant; i is still zero

  return j++; // Noncompliant; 0 returned
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public int pickNumber() {
  int i = 0;
  int j = 0;

  i++; 
  return ++j; 
}
</pre>
◊
squid:S1153«
squidS11533String.valueOf() should not be appended to a String"MINOR*java2S1153:Ì<p>
Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.
The argument passed to <code>String.valueOf()</code> should be directly appended instead.
</p>

<p>The following code:</p>

<pre>
public void display(int i){
  System.out.println("Output is " + String.valueOf(i));    // Noncompliant
}
</pre>

<p>should be refactored into:</p>

<pre>
public void display(int i){
  System.out.println("Output is " + i);                    // Compliant
}
</pre>
◊

squid:S134»
squidS134`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"MAJOR*java2S134:√<p>
Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements is a key ingredient for making what's known as "Spaghetti code".
</p>
<p>Such code is hard to read, refactor and therefore maintain.</p>

<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 3:</p>
<pre>
if (condition1) {                  // Compliant - depth = 1
  /* ... */
  if (condition2) {                // Compliant - depth = 2
    /* ... */
    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit
      /* ... */
      if (condition4) {            // Noncompliant - depth = 4
        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
          /* ... */
        }
        return;
      }
    }
  }
}
</pre>
≈
squid:S2924µ
squidS2924JUnit rules should be used"MAJOR*java2S2924:Ù<p>
  While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test,
  several others do no, and there's no reason to leave them cluttering up the file if they're not in use.
</p>
<p>
  This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any
  of the test methods: <code>TemporaryFolder</code>, and <code>TestName</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class ProjectDefinitionTest {

  @Rule
  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class ProjectDefinitionTest {

  @Test
  public void shouldSetKey() {
    ProjectDefinition def = ProjectDefinition.create();
    def.setKey("mykey");
    assertThat(def.getKey(), is("mykey"));
  }
}
</pre>
Û
squid:S2925„
squidS2925*"Thread.sleep" should not be used in tests"MAJOR*java2S2925:í<p>
  Using <code>Thread.sleep</code> in a test is just generally a bad idea.
  It creates brittle tests that can fail unpredictably depending on environment ("Passes on my machine!") or load.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
@Test
public void testDoTheThing(){

  MyClass myClass = new MyClass();
  myClass.doTheThing();

  Thread.sleep(500);  // Noncompliant
  // assertions...
}
</pre>
ù
squid:S1710ç
squidS1710,Annotation repetitions should not be wrapped"MAJOR*java2S1710:∫<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's no longer necessary, allowing for cleaner, more readable code.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
@SomeAnnotations({
  @SomeAnnotation(..a..),
  @SomeAnnotation(..b..),
  @SomeAnnotation(..c..),
})
public class SomeClass {
  ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
@SomeAnnotation(..a..)
@SomeAnnotation(..b..)
@SomeAnnotation(..c..)
public class SomeClass {
  ...
}
</pre>
·
squid:S1151—
squidS11514"switch case" clauses should not have too many lines"MAJOR*java2S1151:ˆ<p>
  The <code>switch</code> statement should be used only to clearly define some new branches in the control flow.
  As soon as a <code>case</code> clause contains too many statements this highly decreases the readability
  of the overall control flow statement. In such case, the content of <code>case</code> clause should
  be extracted in a dedicated method.
</p>

<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 5:</p>
<pre>
switch (myVariable) {
  case 0: // 6 lines till next case
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
    break;
  case 1:
  ...
}
</pre> 

<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 0:                  
    doSomething()
    break;
  case 1:
  ...
}
...
private void doSomething(){
    methodCall1("");
    methodCall2("");
    methodCall3("");
    methodCall4("");
}
</pre>
ö

squid:S124ã
squidS1248Comments matching a regular expression should be handled"MAJOR*java2S124:¨<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression <code>.*TODO.*</code> to match all comment containing "TODO".</p>
<p>Note that, in order to match TODO regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in <code>(?i).*TODO.*</code>.</p>@
õ
squid:S1150ã
squidS1150%Enumeration should not be implemented"MAJOR*java2S1150:ø<p>From the official Oracle Javadoc:</p>
<blockquote>
<p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>
</blockquote>
<p>The following code:</p>
<pre>
public class MyClass implements Enumeration {  // Noncompliant
  /* ... */
}
</pre>
<p>should be refactored into:</p>
<pre>
public class MyClass implements Iterator {     // Compliant
  /* ... */
}
</pre>
⁄
 squid:MethodCyclomaticComplexityµ
squidMethodCyclomaticComplexity!Methods should not be too complex"MAJOR*java2MethodCyclomaticComplexity:√<p>
  The cyclomatic complexity of methods should not exceed a defined threshold.
  Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
</p>
ﬁ
squid:S00100Õ
squidS001003Method names should comply with a naming convention"MINOR*java2S00100:Ò<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>
<pre>
public int DoSomething(){...}
</pre>
<h2>Compliant Solution</h2>

<pre>
public int doSomething(){...}
</pre>
<h2>Exceptions</h2>

<p>Overriding methods are excluded. </p>
<pre>
@Override
public int Do_Something(){...}
</pre>
¬

squid:S128≥
squidS128?Switch cases should end with an unconditional "break" statement"MAJOR*java2S128:œ<p>
  When the execution is not explicitly terminated at the end of a switch case,
  it continues to execute the statements of the following case. While this is sometimes intentional,
  it often is a mistake which leads to unexpected behavior.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:                              
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:                               
    doSomethingElse();
    break;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:                              
    foo();
    break;
  case 2: 
    doSomething();
    break;
  default:                               
    doSomethingElse();
    break;
}
</pre>

<h2>Exceptions</h2>
<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:                               
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw new IllegalStateException();
  default:                               // For the last case, use of break statement is optional
    doSomethingElse();
}
</pre>

<h2>See</h2>
<ul>
  <li>MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>
  <li>MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause</li>
  <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>
  <li>MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause</li>
  <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>
  <li>MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause</li>
  <li><a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement</li>
</ul>
Ü
squid:S00101ı
squidS001012Class names should comply with a naming convention"MINOR*java2S00101:ö<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.</p>
<h2>Noncompliant Code Example</h2>

<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>
<pre>
class my_class {...}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {...}
</pre>
≈

squid:S923∂
squidS923CFunctions should not be defined with a variable number of arguments"INFO*java2S923:œ<p>As stated per effective java : </p>
<blockquote>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can produce confusing results if used innapropriately.</blockquote>

<h2>Noncompliant Code Example</h2>
<pre>
void fun ( String... strings )	// Noncompliant
{
  // ...
}
</pre>

<h2>See</h2>
<ul>
<li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.
</li><li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation.
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/i4CW">CERT, DCL50-CPP</a> - Do not define a C-style variadic function
</li></ul>
≠
squid:S2258ù
squidS2258L"javax.crypto.NullCipher" should not be used for anything other than testing"BLOCKER*java2S2258:®<p>By contract, the <code>NullCipher</code> class provides an "identity cipher" -- one that does not transform or encrypt the plaintext in any way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>
<h2>Noncompliant Code Example</h2>

<pre>
NullCipher nc=new NullCipher();
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#NULL_CIPHER">NullCipher Unsafe</a></li>
</ul>
ˇ
squid:S2259Ô
squidS2259(Null pointers should not be dereferenced"BLOCKER*java2S2259:û<p>
A reference to <code>null</code> should never be dereferenced/accessed.
Doing so will cause a <code>NullPointerException</code> to be thrown. At best, such an exception will cause abrupt program termination.
At worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.
</p>

<p>
Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in
<a href="https://jcp.org/en/jsr/detail?id=305">JSR-305</a> to understand which values are or are not nullable.
</p>

<p>
@Nullable denotes that, under some unspecified circumstances, the value might be null. To keep false positives low, this annotation is ignored.
Whether an explicit test is required or not is left to the developer's discretion.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
@CheckForNull
String getName() {...}

public boolean isNameEmpty() {
  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked
}
</pre>

<pre>
Connection conn = null;
Statement stmt = null;
try {
  conn = DriverManager.getConnection(DB_URL,USER,PASS);
  stmt = conn.createStatement();
  // ...

} catch(Exception e) {
  e.printStackTrace();
} finally {
  stmt.close(); // Noncompliant; stmt could be null if an exception was thrown in the try{} block
  conn.close(); // Noncompliant; conn could be null if an exception was thrown
}
</pre>

<pre>
private void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}

public void append(@CheckForNull Color color) {
    merge(currentColor, color); // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters
}
</pre>

<pre>
void paint(Color color) {
  if(color == null) {
    System.out.println("Unable to apply color " + color.toString()); // Noncompliant; NullPointerException will be thrown
    return;
  }
  ...
}
</pre>

<h2>See</h2>
<ul>
   <li><a href="http://cwe.mitre.org/data/definitions/476.html">MITRE, CWE-476</a> - NULL Pointer Dereference</li>
   <li><a href="https://www.securecoding.cert.org/confluence/x/PAw">CERT, EXP34-C</a> - Do not dereference null pointers</li>
   <li><a href="https://www.securecoding.cert.org/confluence/x/ZwDOAQ">CERT, EXP01-J</a> - Never dereference null pointers</li>
   <li><a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>
   <li><a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management</li>
   <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
</ul>
Î
squid:S1168€
squidS1168?Empty arrays and collections should be returned instead of null"MAJOR*java2S1168:ı
<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.</p>
<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>
<p>The following code: </p>
<pre>
public static Result[] getResults() {
  return null;                             // Noncompliant
}

public static void main(String[] args) {
  Result[] results = getResults();
  
  if (results != null) {                   // Nullity test required to prevent NPE
    for (Result result: results) {
      /* ... */
    }
  }
}
</pre>
<p>should be refactored into:</p>
<pre>
public static Result[] getResults() {
  return new Result[0];                    // Compliant
}

public static void main(String[] args) {
  for (Result result: getResults()) {
    /* ... */
  }
}
</pre>
<p>This rule also applies to collections:</p>
<pre>
public static List&lt;Result&gt; getResults() {
  return null;                             // Noncompliant
}
</pre>
<p>should be refactored into:</p>
<pre>
public static List&lt;Result&gt; getResults() {
  return Collections.emptyList();          // Compliant
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/AgG7AQ">CERT, MSC19-C</a> - For functions that return an array, prefer returning an empty array over a null value</li>
</ul>
ö
squid:S3346ä
squidS33463"assert" should only be used with boolean variables"MAJOR*java2S3346:∞<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their execution the evaluation of any logic required for correct program function.</p>
<h2>Noncompliant Code Example</h2>

<pre>
assert myList.remove(myList.get(0));  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
boolean removed = myList.remove(myList.get(0));
assert removed;
</pre>
˚
squid:S2257Î
squidS22575Only standard cryptographic algorithms should be used"BLOCKER*java2S2257:ç<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>
<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>
<h2>Noncompliant Code Example</h2>

<pre>
MyCryptographicAlgorithm extends MessageDigest {
  ...
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/327.html">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST">MessageDigest is Custom</a></li>
</ul>
›
squid:S2133Õ
squidS21330Objects should not be created only to "getClass""MAJOR*java2S2133:ˆ<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class' <code>.class</code> property.</p>

<h2>Noncompliant Code Example</h2>
<pre>
MyObject myOb = new MyObject();  // Noncompliant
Class c = myOb.getClass(); 
</pre>

<h2>Compliant Solution</h2>
<pre>
Class c = MyObject.class; 
</pre>
£
squid:S2254ì
squidS2254?"HttpServletRequest.getRequestedSessionId()" should not be used"CRITICAL*java2S2254:™<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>
<blockquote>
<p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client did not specify a session ID, this method returns null.</p>
</blockquote>
<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually updating the value of this session ID in the HTTP request. </p>
<p>Here is an example of a updated HTTP header:</p>
<pre>
GET /pageSomeWhere HTTP/1.1
Host: webSite.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=Hacked_Session_Value'''"&gt;
</pre>
<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G. Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered  unauthenticated. Moreover, this session ID should never be logged to prevent hijacking of active sessions.</p>

<h2>Noncompliant Code Example</h2>
<pre>
if(isActiveSession(request.getRequestedSessionId()) ){
  ...
}
</pre>

<h2>See</h2>
<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision
</li><li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses
</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management
</li><li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SERVLET_SESSION_ID">Untrusted Session Cookie Value</a>
</li></ul>
”
squid:S1166√
squidS11669Exception handlers should preserve the original exception"CRITICAL*java2S1166:‡<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>
<h2>Noncompliant Code Example</h2>

<pre>
 // Noncompliant - exception is lost
try { /* ... */ } catch (Exception e) { LOGGER.info("context"); }   

// Noncompliant - exception is lost (only message is preserved)       
try { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); }   

// Noncompliant - exception is lost 
try { /* ... */ } catch (Exception e) { throw new RuntimeException("context"); }
</pre>
<h2>Compliant Solution</h2>

<pre>
try { /* ... */ } catch (Exception e) { LOGGER.info(e); }   

try { /* ... */ } catch (Exception e) { throw new RuntimeException(e); }

try {
  /* ... */
} catch (RuntimeException e) {
  doSomething();
  throw e;
} catch (Exception e) {
  // Conversion into unchecked exception is also allowed
  throw new RuntimeException(e);
}
</pre>
<h2>Exceptions</h2>

<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>ParseException</code> and <code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes.</p>
<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are correctly handled.</p>
<pre>
int myInteger;
try {
  myInteger = Integer.parseInt(myString);
} catch (NumberFormatException e) {
  // It is perfectly acceptable to not handle "e" here
  myInteger = 0;
}

</pre>
È
squid:S1165Ÿ
squidS1165%Exception classes should be immutable"MAJOR*java2S1165:ç<p>Exceptions are meant to represent the application's state at which an error occurred.</p>
<p>Making all fields final ensures that this state:</p>
<ul>
<li> Will be fully defined at the same time the exception is instantiated.</li>
<li> Won't be updated or corrupted by some bogus error handler.</li>
</ul>
<p>This will enable developers to quickly understand what went wrong.</p>
<p>The following code:</p>
<pre>
public class MyException extends Exception {

  private int status;                               // Noncompliant

  public MyException(String message) {
    super(message);
  }

  public int getStatus() {
    return status;
  }

  public void setStatus(int status) {
    this.status = status;
  }

}
</pre>
<p>should be refactored into:</p>
<pre>
public class MyException extends Exception {

  private final int status;                         // Compliant

  public MyException(String message, int status) {
    super(message);
    this.status = status;
  }

  public int getStatus() {
    return status;
  }

}
</pre>
ó
squid:S2134á
squidS2134CClasses extending java.lang.Thread should override the "run" method"MAJOR*java2S2134:ù<p>According to the Java API documentation:</p>
<blockquote>
There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started...
The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started.
</blockquote>

<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the <code>Thread</code> class is not well understood.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyRunner extends Thread { // Noncompliant; run method not overridden

  public void doSometing() {...}
}
</pre>
Ü
squid:S2131ˆ
squidS2131;Primitives should not be boxed just for "String" conversion"MAJOR*java2S2131:î<p>"Boxing" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class' <code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code> argument should be avoided, as should concatenating empty string <code>""</code> to a primitive.</p>
<h2>Noncompliant Code Example</h2>

<pre>
int myInt = 4;
String myIntString = new Integer(myInt).toString(); // Noncompliant; creates &amp; discards an Integer object
myIntString = Integer.valueOf(myInt).toString(); // Noncompliant
myIntString = 4 + "";  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
int myInt = 4;
String myIntString = Integer.toString(myInt);
</pre>
±
squid:S2252°
squidS2252,Loop conditions should be true at least once"CRITICAL*java2S2252:ÀIf a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always bugs, particularly when the initial value and stop conditions are hard-coded.

<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 10; i &lt; 10; i++) {  // Noncompliant 
  // ...
</pre>
£
squid:S2253ì
squidS2253%Disallowed methods should not be used"MAJOR*java2S2253:≈<p>This rule allows banning certain methods.</p>
<h2>Noncompliant Code Example</h2>
<p>Given parameters:</p>
<ul>
<li> className:java.lang.String</li>
<li> methodName: replace</li>
<li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence</li>
</ul>

<pre>
String name;
name.replace("A","a");  // Noncompliant
</pre>@
—
squid:S1163¡
squidS11631Exceptions should not be thrown in finally blocks"CRITICAL*java2S1163:Ê<p>
Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code> block.
The masked's exception message and stack trace will be lost.
</p>

<p>The following code:</p>

<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */
  throw new RuntimeException();                          // Noncompliant - will mask the IllegalArgumentException
}
</pre>

<p>should be refactored into:</p>

<pre>
try {
  /* some work which end up throwing an exception */
  throw new IllegalArgumentException();
} finally {
  /* clean up */                                         // Compliant
}
</pre>
æ
 squid:LeftCurlyBraceEndLineCheckô
squidLeftCurlyBraceEndLineCheck:An open curly brace should be located at the end of a line"MINOR*java2LeftCurlyBraceEndLineCheck:é<p>Sharing some coding conventions is a key point to make it possible for a team to efficiently collaborate. This rule make it mandatory to place open curly braces at the end of lines of code.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if(condition)
{
  doSomething();
}
</pre>
<h2>Compliant Solution</h2>

<pre>
if(condition) {
  doSomething();
}
</pre>
<h2>Exceptions</h2>

<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>
<pre>
if(condition) {doSomething();} 
</pre>
Ë
squid:S1607ÿ
squidS16074Skipped unit tests should be either removed or fixed"MAJOR*java2S1607:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.
≤
squid:S1849¢
squidS18496"Iterator.hasNext()" should not call "Iterator.next()""BLOCKER*java2S1849:√Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator. <code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the <code>hasNext()</code> contract, and will lead to unexpected behavior in production.

<h2>Noncompliant Code Example</h2>
<pre>
public class FibonacciIterator implements Iterator&lt;Integer&gt;{
...
@Override
public boolean hasNext() {
  if(next() != null) {
    return true;
  }
  return false;
}
...
}
</pre>
±
squid:S1848°
squidS1848JObjects should not be created to be dropped immediately without being used"CRITICAL*java2S1848:≠There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.

<h2>Noncompliant Code Example</h2>
<pre>
if (x &lt; 0)
  new IllegalArgumentException("x must be nonnegative");
</pre>

<h2>Compliant Solution</h2>
<pre>
if (x &lt; 0)
  throw new IllegalArgumentException("x must be nonnegative");
</pre>
°
squid:S1604ë
squidS1604HAnonymous inner classes containing only one method should become lambdas"MAJOR*java2S1604:¢<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may seem unwieldy and unclear.</p>

<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
myCollection.map(new Mapper&lt;String,String&gt;() {
  public String map(String input) {
    return new StringBuilder(input).reverse().toString();
  }
});
</pre>

<h2>Compliant Solution</h2>
<pre>
myCollection.map(element -&gt; new StringBuilder(element).reverse().toString());
</pre>
˜
squid:S1845Á
squidS1845OMethods and field names should not be the same or differ only by capitalization"MAJOR*java2S1845:Ò<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field with exactly the same name and visibility.</p>
<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead added a new method with nearly the same name.</p>
<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Car{

  public DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // Noncompliant; duplicates field name
}

public class MyCar extends Car{
  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?

  public void drivefast(){...} 

  public void driveFast(){...} //Huh?
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Car{

  private DriveTrain drive;

  public void tearDown(){...}

  public void drive() {...}  // field visibility reduced
}

public class MyCar extends Car{
  @Override
  public void tearDown(){...}

  public void drivefast(){...} 

  public void driveReallyFast(){...}

}
</pre>
®
squid:S1724ò
squidS1724DDeprecated classes and interfaces should not be extended/implemented"MAJOR*java2S1724:≠<p>Deprecated classes and interfaces should be avoided, rather than used, inherited or extended. Deprecation is a warning that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>

<h2>Noncompliant Code Example</h2>
<pre>
/**
* @deprecated  As of release 1.3, replaced by {@link #Fee}
*/@Deprecated
class Foo { ... }

class Bar extends Foo { ... }
</pre>

<h2>Compliant Solution</h2>
<pre>
class Bar extends Fee { ... }
</pre>

<h2>Exception</h2>
<p>When the class that extends a deprecated class is itself deprecated, the extending class will be ignored.</p>
<pre>
@Deprecated
class Bar extends Foo { ... } // compliant Bar is deprecated.
</pre>

  <h2>See</h2>
    <ul>
      <li><a href="http://cwe.mitre.org/data/definitions/477.html">MITRE, CWE-477</a> - Use of Obsolete Functions</li>
    </ul>
Ü

squid:S1844ˆ	
squidS1844j"Object.wait(...)" should never be called on objects that implement "java.util.concurrent.locks.Condition""BLOCKER*java2S1844:„<p>From the Java API documentation:</p>
<blockquote>
<code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations. Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the <code>Object</code> monitor methods.
</blockquote>

The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore, calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.

<h2>Noncompliant Code Example</h2>

<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.wait();
</pre>

<h2>Compliant Solution</h2>
<pre>
final Lock lock = new ReentrantLock();
final Condition notFull  = lock.newCondition();
...
notFull.await();
</pre>
º
squid:S1602¨
squidS1602OLamdbas containing only one statement should not nest this statement in a block"MAJOR*java2S1602:∂<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
x -&gt; {System.out.println(x+1);}
(a, b) -&gt; { return a+b; }
</pre>
<h2>Compliant Solution</h2>

<pre>
x -&gt; System.out.println(x+1)
(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped
</pre>
–

squid:MissingDeprecatedCheckØ

squidMissingDeprecatedCheckGDeprecated elements should have both the annotation and the Javadoc tag"MAJOR*java2MissingDeprecatedCheck:ü	<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be refactored.</p>

<h2>Noncompliant Code Example</h2>
<pre>
class MyClass {

  @Deprecated
  public void foo1() {
  }

  /**
    * @deprecated
    */
  public void foo2() {    // Noncompliant
  }

}
</pre>

<h2>Compliant Solution</h2>
<pre>
class MyClass {

  /**
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated
  public void foo1() {
  }

  /**
    * @deprecated (when, why, refactoring advice...)
    */
  @Deprecated
  public void foo2() {
  }

}
</pre>

<h2>Exceptions</h2>
<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to it.</p>

<pre>
/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
class Qix  {

  public void foo() {} // Compliant; class is deprecated

}

/**
 * @deprecated (when, why, etc...)
 */
@Deprecated
interface Plop {

  void bar();

}
</pre>
’
squid:LowerCaseLongSuffixCheck≤
squidLowerCaseLongSuffixCheck$Long suffix "L" should be upper case"MINOR*java2LowerCaseLongSuffixCheck:¡<p>The long suffix should always be written in uppercase, i.e. 'L', as the lowercase 'l' can easily be confused with the digit one '1'.</p>
<p>The following code:</p>
<pre>
long n = 10l;  // Noncompliant - easily confused with one zero one
</pre>
<p>should be refactored into:</p>
<pre>
long n = 10L;  // Compliant
</pre>
¡

squid:S818≤
squidS818%Literal suffixes should be upper case"MINOR*java2S818:Ë<p>Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.</p>
<h2>Noncompliant Code Example</h2>

<pre>
long long1 = 1l; // Noncompliant
float float1 = 1.0f; // Noncompliant
double double1 = 1.0d; // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
long long1 = 1L;
float float1 = 1.0F;
double double1 = 1.0D;
</pre>
<h2>See</h2>

<ul>
<li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case
</li><li> MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C</a> - Use "L," not "l," to indicate a long value
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP</a> - Use "L," not "l," to indicate a long value
</li></ul>
<h3>See Also</h3>

<ul>
<li> <a href='/coding_rules#rule_key=squid:S1129'>S1129</a> - Long suffix "L" should be upper case
</li></ul>
™
squid:S2250ö
squidS22501"ConcurrentLinkedQueue.size()" should not be used"CRITICAL*java2S2250:ø<p>For most collections the <code>size()</code> method requires constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is directly proportional to the number of elements in the queue. When the queue is large, this could therefore be an expensive operation. Further, the results may be inaccurate if the queue is modified during execution.</p>

<p>By the way, if the <code>size()</code> is used only to check that the collection is empty, then the <code>isEmpty()</code> method should be used.</p>

<h2>Noncompliant Code Example</h2>
<pre>
ConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();
//...
log.info("Queue contains " + queue.size() + " elements");
</pre>
º
squid:S1162¨
squidS1162&Checked Exception should not be thrown"MAJOR*java2S1162:ﬂ<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>
<p>This rule verifies that no method throws a new checked exception.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void myMethod1() throws CheckedException {
  ...
  throw new CheckedException(message);   // Noncompliant
  ...
  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked
}   

public void myMethod2() throws CheckedException {  // Compliant; propagation allowed
  myMethod1();
}
</pre>
ô
squid:S3340â
squidS3340KAnnotation arguments should appear in the order in which they were declared"MINOR*java2S3340:ó<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>

<h2>Noncompliant</h2>
<pre>
@interface Pet {
String name();
String surname();
}

@Pet(surname ="", name="") // Noncompliant
</pre>

<h2>Compliant</h2>
<pre>
@interface Pet {
String name();
String surname();
}

@Pet(name ="", surname="") // Compliant
</pre>
¥
squid:S2130§
squidS21309Parsing should be used to convert "Strings" to primitives"MAJOR*java2S2130:ƒRather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method instead. It will be clearer and more efficient.

<h2>Noncompliant Code Example</h2>
<pre>
String myNum = "12.2";

float f = new Float(myNum).floatValue();  // Noncompliant; creates &amp; discards a Float
</pre>

<h2>Compliant Solution</h2>
<pre>
String myNum = "12.2";

float f = Float.parseFloat(myNum);
</pre>
”
squid:S2251√
squidS2251IA "for" loop update clause should move the counter in the right direction"BLOCKER*java2S2251:—A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. 

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;
    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1
    //...
  }
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomething(String [] strings) {
  for (int i = 0; i &lt; strings.length; i++) {
    String string = strings[i];
    //...
  }
</pre>
†
squid:S1161ê
squidS1161x"@Override" annotation should be used on any method overriding (since Java 5) or implementing (since Java 6) another one"MAJOR*java2S1161:Ò<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>
<ul>
  <li>It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling.</li>
  <li>It improves the readability of the source code by making it obvious that methods are overridden.</li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  public boolean doSomething(){...}  // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class ParentClass {
  public boolean doSomething(){...}
}
class FirstChildClass extends ParentClass {
  @Override
  public boolean doSomething(){...}  // Compliant
}
</pre>
á

squid:S135¯
squidS135KLoops should not contain more than a single "break" or "continue" statement"MAJOR*java2S135:à<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming. </p>
<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.</p>
<h2>Noncompliant Code Example</h2>

<pre>
for (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  System.out.println("i = " + i);
}
</pre>
≥
squid:S1160£
squidS11609Public methods should throw at most one checked exception"MAJOR*java2S1160:√<p>
  Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them.
  This makes those exceptions fully part of the API of the method.
</p>

<p>
  To keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void delete() throws IOException, SQLException {      // Noncompliant
  /* ... */
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void delete() throws SomeApplicationLevelException {
  /* ... */
}
</pre>

<h2>Exceptions</h2>
<p>
  Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.
</p>
„

squid:S138‘
squidS138&Methods should not have too many lines"MAJOR*java2S138:â<p>
A method that grows too large tends to aggregate too many responsibilities.
Such method inevitably become harder to understand and therefore harder to maintain.
</p>

<p>
Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks.
Those smaller methods will not only be easier to understand, but also probably easier to test.
</p>
á
squid:S2864˜
squidS2864F"entrySet()" should be iterated when both the key and value are needed"MAJOR*java2S2864:ä<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed, it's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved
    Object value = map.get(key);
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithMap(Map&lt;String,Object&gt; map) {
  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {
    String key = entry.getKey();
    Object value = entry.getValue();
    // ...
  }
}
</pre>
Å
squid:S1774Ò
squidS1774'The ternary operator should not be used"MAJOR*java2S1774:£<p>While the ternary operator is pleasingly compact, it's use can make code more difficult to read. It should therefore be avoided in favor of the more verbose <code>if</code>/<code>else</code> structure.</p>

<h2>Noncompliant Code Example</h2>
<pre>
System.out.println(i>10?"yes":"no");
</pre>

<h2>Compliant Solution</h2>
<pre>
if (i > 10) {
  System.out.println(("yes");
} else {
  System.out.println("no");
}
</pre>
ã
squid:S2188˚
squidS2188*JUnit test cases should call super methods"CRITICAL*java2S2188:ß<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3 <code>TestCase</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {  // Noncompliant
      myClass = new MyClass();
    }
</pre>
<h2>Compliant Solution</h2>

<pre>
public class MyClassTest extends MyAbstractTestCase {

  private MyClass myClass;
    @Override
    protected void setUp() throws Exception {
      super.setUp();
      myClass = new MyClass();
    }
</pre>
·
squid:S3398—
squidS3398O"private" methods called only by inner classes should be moved to those classes"MAJOR*java2S3398:€<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same access to the outer class' members, but the outer class will be clearer and less cluttered.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Outie {
  private int i=0;

  private void increment() {  // Noncompliant
    i++;
  }

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Outie {
  private int i=0;

  public class Innie {
    public void doTheThing() {
      Outie.this.increment();
    }

    private void increment() {
      Outie.this.i++;
    }
  }
}
</pre>
Ò	
$squid:AssignmentInSubExpressionCheck»	
squidAssignmentInSubExpressionCheck:Assignments should not be made from within sub-expressions"MAJOR*java2AssignmentInSubExpressionCheck:µ<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.</p>
<p>It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</p>
<p>Ideally, expressions should not have side-effects.</p>
<h2>Noncompliant Code Example</h2>

<pre>
doSomething(i = 42);
</pre>
<h2>Compliant Solution</h2>

<pre>
i = 42;
doSomething(i);   
</pre>
<p>or</p>
<pre>
doSomething(i == 42);  // Perhaps in fact the assignment operator was expected
</pre>
<h2>Exceptions</h2>

<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>
<li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>
<li> MISRA C:2012, 13.4 - The result of of an assignment operator should not be used</li>
<li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing</li>
</ul>
•
squid:S2068ï
squidS2068$Credentials should not be hard-coded"CRITICAL*java2S2068:«<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they're almost guaranteed to end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>
<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>
<h2>Noncompliant Code Example</h2>

<pre>
Connection conn = null;
try {
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=steve&amp;password=blue"); // Noncompliant
  String uname = "steve";
  String password = "blue";
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=" + uname + "&amp;password=" + password); // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
Connection conn = null;
try {
  String uname = getEncryptedUser();
  String password = getEncryptedPass();
  conn = DriverManager.getConnection("jdbc:mysql://localhost/test?" +
        "user=" + uname + "&amp;password=" + password);
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/798">MITRE, CWE-798</a> - Use of Hard-coded Credentials</li>
<li> <a href="http://cwe.mitre.org/data/definitions/259">MITRE, CWE-259</a> - Use of Hard-coded Password</li>
<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD">Hard Coded Password</a></li>
</ul>
ß
squid:S2186ó
squidS21864JUnit assertions should not be used in "run" methods"CRITICAL*java2S2186:π<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in <code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the test won't fail.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void run() {
  // ...
  Assert.assertEquals(expected, actual);  // Noncompliant
}
</pre>
˙
squid:S2065Í
squidS2065<Fields in non-serializable classes should not be "transient""MINOR*java2S2065:á<code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.

<h2>Noncompliant Code Example</h2>
<pre>
class Vegetable {  // does not implement Serializable
  private transient Season ripe;  // Noncompliant
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Vegetable {
  private Season ripe;
  // ...
}
</pre>
ò
squid:S2187à
squidS2187TestCases should contain tests"MAJOR*java2S2187:√<p>There's no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn't have a file in the tests directory with "Test" in the name, but not tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>
<p>This rule raises an issue when files in the test directory have "Test" in the name or implement <code>TestCase</code> but don't contain any tests.</p>
ö	
squid:S2066ä	
squidS2066K"Serializable" inner classes of non-serializable classes should be "static""CRITICAL*java2S2066:ï<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not serializable, then serialization will fail, resulting in a runtime error.</p>

<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: 
<ul>
  <li>an inner class can only be instantiated within the context of an instance of the outer class.</li>
  <li>a nested (<code>static</code>) class can be instantiated independently of the outer class.</li>
</ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Pomegranate {
  // ...

  public class Seed implements Serializable {  // Noncompliant; serialization will fail
    // ...
  }
} 
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Pomegranate {
  // ...

  public static class Seed implements Serializable {
    // ...
  }
} 
</pre>
»
squid:ObjectFinalizeCheck™
squidObjectFinalizeCheck1The Object.finalize() method should not be called"CRITICAL*java2ObjectFinalizeCheck:≥<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>
<h2>Noncompliant Code Example</h2>

<pre>
public void dispose() throws Throwable {
  this.finalize();                       // Noncompliant
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/586.html">MITRE, CWE-586</a> - Explicit Call to Finalize()</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J</a> - Do not use finalizers</li>
</ul>
Œ
squid:S1659æ
squidS1659:Multiple variables should not be declared on the same line"MINOR*java2S1659:›<p>Declaring multiple variable on one line is difficult to read.</p>
<h2>Noncompliant Code Example</h2>

<pre>
class MyClass {

  private int a, b;

  public void method(){
    int c; int d;
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {

  private int a;
  private int b;

  public void method(){
    int c;
    int d;
  }
}
</pre>
∆
squid:ParsingErrorØ
squidParsingErrorJava parser failure"MAJOR*java2ParsingError:Á<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>
º
squid:S1656¨
squidS1656%Variables should not be self-assigned"CRITICAL*java2S1656:›<p>
  There is no reason to re-assign a variable to itself.
  Either this statement is redundant and should be removed,
  or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void setName(String name) {
  name = name;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void setName(String name) {
  this.name = name;
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
∏
squid:S2063®
squidS2063$Comparators should be "Serializable""MAJOR*java2S2063:›A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.

<h2>Noncompliant Code Example</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant
  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {
  private static final long serialVersionUID = 1;

  int compare(Fruit f1, Fruit f2) {...}
  boolean equals(Object obj) {...}
}
</pre>
ç
squid:S2184˝
squidS2184.Math operands should be cast before assignment"CRITICAL*java2S2184:•<p>When arithmetic is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a <code>long</code>, <code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code>, the result will likely not be what you expect. </p>
<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the assignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>
<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</p>
<h2>Noncompliant Code Example</h2>

<pre>
float twoThirds = 2/3; // Noncompliant; int division. Yields 0.0
long millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928
long bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647
long bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one. 
Date myDate = new Date(seconds * 1_000); //Noncompliant, won't produce the expected result if seconds &gt; 2_147_483
...
public long compute(int factor){
  return factor * 10_000;  //Noncompliant, won't produce the expected result if factor &gt; 214_748
}
</pre>
<h2>Compliant Solution</h2>

<pre>
float twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667
long millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000
long bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649
long bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649
Date myDate = new Date(seconds * 1_000L);
...
public long compute(int factor){
  return factor * 10_000L;
}
</pre>
<p>or</p>
<pre>
float twoThirds = (float)2/3; // 2 cast to float
long millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long
long bigNum = (long)Integer.MAX_VALUE + 2;
long bigNegNum =  (long)Integer.MIN_VALUE-1;
Date myDate = new Date((long)seconds * 1_000);
...
public long compute(long factor){
  return factor * 10_000;
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/190">MITRE, CWE-190</a> - Integer Overflow or Wraparound</li>
<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management</li>
</ul>
¥
squid:S2185§
squidS2185"Silly math should not be performed"MAJOR*java2S2185:€<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>
<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>
<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or <code>Math.floor</code> is silly  because the result will always be the original value. </p>
<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>, <code>Math.round</code>.</p>
<p>And these oprations are silly with certain constant values:</p>
<table>
<tr><th>Operation</th><th>Value</th></tr>
<tr><td>acos</td><td>0.0 or 1.0</td></tr>
<tr><td>asin</td><td>0.0 or 1.0</td></tr>
<tr><td>atan</td><td>0.0 or 1.0</td></tr>
<tr><td>atan2</td><td>0.0</td></tr>
<tr><td>cbrt</td><td>0.0 or 1.0</td></tr>
<tr><td>cos</td><td>0.0</td></tr>
<tr><td>cosh</td><td>0.0</td></tr>
<tr><td>exp</td><td>0.0 or 1.0</td></tr>
<tr><td>expm1</td><td>0.0</td></tr>
<tr><td>log</td><td>0.0 or 1.0</td></tr>
<tr><td>log10</td><td>0.0 or 1.0</td></tr>
<tr><td>sin</td><td>0.0</td></tr>
<tr><td>sinh</td><td>0.0</td></tr>
<tr><td>sqrt</td><td>0.0 or 1.0</td></tr>
<tr><td>tan</td><td>0.0</td></tr>
<tr><td>tanh</td><td>0.0</td></tr>
<tr><td>toDegrees</td><td>0.0 or 1.0</td></tr>
<tr><td>toRadians</td><td>0.0</td></tr>
</table>
<h2>Noncompliant Code Example</h2>

<pre>
public void doMath(int a)
double floor = Math.floor((double)a); // Noncompliant
double ceiling = Math.ceil(4.2);
double arcTan = Math.atan(0.0);
</pre>
ã
squid:S2061˚
squidS2061?Custom serialization method signatures should meet requirements"CRITICAL*java2S2061:íWriters of <code>Serializable</code> classes can choose to let Java's automatic mechanisms handle serialization and deserialization, or they can choose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they will be ignored and the default serialization mechanisms will kick back in. 

<h2>Noncompliant Code Example</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private
        throws IOException  
  {...}

  private void readObject(java.io.ObjectInputStream in)
  {...}

  public void readObjectNoData()  // Noncompliant; not private 
  {...}

  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static

  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object
  {...}
} 
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Watermelon implements Serializable {
  // ...
  private void writeObject(java.io.ObjectOutputStream out) 
        throws IOException 
  {...}

  private void readObject(java.io.ObjectInputStream in)
        throws IOException, ClassNotFoundException
  {...}

  private void readObjectNoData()
        throws ObjectStreamException
  {...}

  protected Object readResolve() throws ObjectStreamException
  {...}

  private Object writeReplace() throws ObjectStreamException
  {...}
</pre>
√
squid:S2183≥
squidS2183HInts and longs should not be shifted by more than their number of bits-1"CRITICAL*java2S2183:¡<p>Since an <code>int</code> is a 32-bit variable, shifting by more than (-)31 is confusing at best and an error at worst. Shifting an <code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>

<p>Similarly, shifting a <code>long</code> by (-)64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public int shift(int a) {
  return a << 48;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public int shift(int a) {
  return a << 16;
}
</pre>
Ê

squid:S106◊
squidS106<Standard outputs should not be used directly to log anything"MAJOR*java2S106:ˆ<p>When logging a message there are two important requirements which must be fulfilled:</p>
<ul>
  <li> The user must be able to easily retrieve the logs</li>
  <li> The format of all logged message must be uniform to allow the user to easily read the log</li>
</ul>

<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That's why defining and using a dedicated logger is highly recommended.</p>

<h2>Noncompliant Code Example</h2>
<pre>
System.out.println("My Message");  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
logger.log("My Message");
</pre>
û

squid:S109è
squidS109 Magic numbers should not be used"MINOR*java2S109: <p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</p>

<p>Using magic numbers may seem obvious and straightforward when you're writing a piece of code, but they are much less obvious and straightforward at debugging time.</p>

<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>
<p>-1, 0 and 1 are not considered magic numbers (by default, configurable).</p>

<h2>Noncompliant Code Example</h2>
<pre>
public static void doSomething() {
  for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number
    ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public static final int NUMBER_OF_CYCLES = 4;
public static void doSomething() {
  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){
    ...
  }
}
</pre>
ò
squid:S1301à
squidS13019"switch" statements should have at least 3 "case" clauses"MINOR*java2S1301:®<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>

<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>
<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>
<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>
</ul>
√
squid:S2078≥
squidS20781Values passed to LDAP queries should be sanitized"CRITICAL*java2S2078:ÿ<p>Applications that execute LDAP queries should neutralize any externally-provided values in those commands. Failure to do so could allow an attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed. Unhappily LDAP doesn't provide any prepared statement interfaces like SQL to easily remove this risk. So each time a LDAP query is built dynamically this rule logs an issue.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public User lookupUser(String username, String base, String [] requestedAttrs) {

  // ...
  DirContext dctx = new InitialDirContext(env);

  SearchControls sc = new SearchControls();
  sc.setReturningAttributes(requestedAttrs);  // Noncompliant
  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);

  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username + "))";

  NamingEnumeration results = dctx.search(base,  // Noncompliant
        filter,  // Noncompliant; parameter concatenated directly into string
        sc);
</pre>
<h2>Compliant Solution</h2>

<pre>
public User lookupUser(String username, String base, String [] requestedAttrs) {

  // ...
  DirContext dctx = new InitialDirContext(env);

  SearchControls sc = new SearchControls();
  sc.setReturningAttributes(buildAttrFilter(requestedAttrs));  // Compliant; method presumably scrubs input
  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
  
  String useBase = "ou=People";
  if (! base.startsWith(useBase)) {
    useBase = base;
  }
  
  String filter = "(&amp;(objectClass=user)(sAMAccountName=" + username.replaceAll("[()| ]","") + "))";

  NamingEnumeration results = dctx.search(useBase,  // Compliant; originally value used conditionally
        filter,  // Compliant; parameter NOT concatenated directly into string
        sc);
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/90">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#LDAP_INJECTION">Potential LDAP Injection</a></li>
</ul>
Ô
squid:S3047ﬂ
squidS30473Multiple loops over the same set should be combined"MAJOR*java2S3047:Ö<p>
  When a method loops multiple over the same set of data,
  whether it's a list or a set of numbers,
  it is highly likely that the method could be made more efficient by combining
  the loops into a single set of iterations.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
  }
  for (String str : strings) {  // Noncompliant
    doStep2(str);
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomethingToAList(List&lt;String&gt; strings) {
  for (String str : strings) {
    doStep1(str);
    doStep2(str);
  }
}
</pre>
õ
squid:S2197ã
squidS21979Modulus results should not be checked for direct equality"CRITICAL*java2S2197:®When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for equality with a positive number (or a negative one) could result in false negatives. 

<h2>Noncompliant Code Example</h2>
<pre>
public boolean isOdd(int x) {
  return x % 2 == 1;  // Noncompliant; if x is negative, x % 2 == -1
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public boolean isOdd(int x) {
  return x %2 != 0;
}
</pre>

or

<pre>
public boolean isOdd(int x) {
  return Math.abs(x %2) != 1;
}
</pre>
Ÿ
squid:S2076…
squidS20760Values passed to OS commands should be sanitized"CRITICAL*java2S2076:Ô<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands, or exposes sensitive data.</p>
<p>This rule logs an issue as soon as a command is built dynamically. it's then up to the auditor to figure out if the command execution is secure or not. </p>
<h2>Noncompliant Code Example</h2>

<pre>
public void listContent(String input) {
  Runtime rt = Runtime.getRuntime();
  rt.exec("ls " + input); // Noncompliant; input could easily contain extra commands
  ...
}

public void execute(String command, String argument) {
  ProcessBuilder pb = new ProcessBuilder(command, argument); // Noncompliant
  ...
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/78">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command</li>
<li> <a href="http://cwe.mitre.org/data/definitions/88">MITRE, CWE-88</a> - Argument Injection or Modification</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>
<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components</li>
<li> Derived from the FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#COMMAND_INJECTION">Potential Command Injection</a></li>
</ul>
±
squid:S2077°
squidS20771Values passed to SQL commands should be sanitized"CRITICAL*java2S2077:∆<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>
<p>This rule checks that method parameters are not used directly in non-Hibernate SQL statements, and that parameter binding, rather than concatenation is used in Hibernate statements.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  Statement stmt2 = null;
  PreparedStatement pstmt;
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery("GETDATE()"); // Compliant; parameters not used here

    stmt2 = con.createStatement();
    ResultSet rs2 = stmt2.executeQuery("select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query

    pstmt = con.prepareStatement("select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=" + user);  // Noncompliant; parameter concatenated directly into query
    ResultSet rs3 = pstmt.executeQuery();

    //...
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query = session.createQuery(  // Compliant
            "FROM students where fname = " + userInput);  // Noncompliant; parameter binding should be used instead
  // ...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public User getUser(Connection con, String user) throws SQLException {

  Statement stmt1 = null;
  PreparedStatement pstmt = null;
  String query = "select FNAME, LNAME, SSN " +
                 "from USERS where UNAME=?"
  try {
    stmt1 = con.createStatement();
    ResultSet rs1 = stmt1.executeQuery("GETDATE()");

    pstmt = con.prepareStatement(query);
    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.
    ResultSet rs2 = pstmt.executeQuery();

    //...
  }
}

public User getUserHibernate(org.hibernate.Session session, String userInput) {

  org.hibernate.Query query =  session.createQuery("FROM students where fname = ?");
  query = query.setParameter(0,userInput);  // Parameter binding escapes all input
  // ...
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/89">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command</li>
<li> <a href="http://cwe.mitre.org/data/definitions/564.html">MITRE, CWE-564</a> - SQL Injection: Hibernate</li>
<li> <a href="http://cwe.mitre.org/data/definitions/20.html">MITRE, CWE-20</a> - Improper Input Validation</li>
<li> <a href="http://cwe.mitre.org/data/definitions/943.html">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top Ten 2013 Category A1</a> - Injection</li>
<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Insecure Interaction Between Components</li>
<li> Derived from FindSecBugs rules <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA">Potential SQL/JPQL Injection (JPA)</a>, <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO">Potential SQL/JDOQL Injection (JDO)</a>, <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE">Potential SQL/HQL Injection (Hibernate)</a></li>
</ul>
¡
squid:S1309±
squidS13093The @SuppressWarnings annotation should not be used"INFO*java2S1309:ÿ<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>
<h2>Noncompliant Code Example</h2>
<p>In case &quot;listOfWarnings=unchecked&quot;</p>
<pre>
@SuppressWarnings("all")
</pre>
<h2>Compliant Solution</h2>
<p>In case &quot;listOfWarnings=unchecked&quot;</p>
<pre>
@SuppressWarnings("unchecked")
</pre>
˛
squid:S2638Ó
squidS2638,Method overrides should not change contracts"MAJOR*java2S2638:õ<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the same contracts as the ones in the superclass. Specifically, if the parameters or return type of the superclass method are marked with any of the following, that should not be changed in a subclass: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and <code>@Nonnull</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {

  private Season ripe;
  private String color;

  public void setRipe(@NotNull Season ripe) {
    this.ripe = ripe;
  }

  public @NotNull Integer getProtein() {
    return 12;
  }
}

public class Raspberry extends Fruit {

  public void setRipe(@Nullable Season ripe) {  // Noncompliant
    this.ripe = ripe;
  }

  public @Nullable Integer getProtein() {  // Noncompliant
    return null;
  }
}
</pre>
˚
squid:EmptyStatementUsageCheckÿ
squidEmptyStatementUsageCheck"Empty statements should be removed"MINOR*java2EmptyStatementUsageCheck:È<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>
<ul>
<li> It was meant to be replaced by an actual statement, but this was forgotten.</li>
<li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.</li>
</ul>
<h2>Noncompliant Code Example</h2>
<pre>
void doSomething() {
  ;                                                       // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse() {
  System.out.println("Hello, world!");;                     // Noncompliant - double ;
  ...
  for (int i = 0; i &lt; 3; System.out.println(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body
  ...
}
</pre>
<h2>Compliant Solution</h2>
<pre>
void doSomething() {}

void doSomethingElse() {
  System.out.println("Hello, world!");
  ...
  for (int i = 0; i &lt; 3; i++){
    System.out.println(i);
  }
  ...
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</li>
<li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
±
squid:S2639°
squidS26394Inappropriate regular expressions should not be used"CRITICAL*java2S2639:√<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>
<p>The following should not be used as regular expressions:</p>
<ul>
<li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em>
</li><li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters
</li><li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character
</li></ul>

<h2>Noncompliant Code Example</h2>
<pre>
String str = "/File|Name.txt";

String clean = str.replaceAll(".",""); // Noncompliant; probably meant to remove only dot chars, but returns an empty string
String clean2 = str.replaceAll("|","_"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_
String clean3 = str.replaceAll(File.separator,""); // Noncompliant; exception on Windows
</pre>
Ω
squid:S3282≠
squidS3282<EJB interceptor exclusions should be declared as annotations"MAJOR*java2S3282: <p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they are preferred.</p>

<h2>Noncompliant Code Example</h2>
<pre>
&lt;assembly-descriptor&gt;
      &lt;interceptor-binding&gt;
         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;
         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;
         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;
         &lt;method&gt;
           &lt;method-name&gt;doTheThing&lt;/method-name&gt;
         &lt;/method&gt;
      &lt;/interceptor-binding&gt;

&lt;/assembly-descriptor&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
@ExcludeDefaultInterceptors
public class MyExcludedClass implements MessageListener
{

  @ExcludeClassInterceptors
  @ExcludeDefaultInterceptors
  public void doTheThing() {
    // ...
  }
</pre>
ô
squid:S2070â
squidS2070;SHA-1 and Message-Digest hash algorithms should not be used"CRITICAL*java2S2070:§<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2, MD4, MD6.</p>
<p>This rule tracks usage of the <code>java.security.MessageDigest</code>, and <code>org.apache.commons.codec.digest.DigestUtils</code> classes  to instantiate MD or SHA-1 algorithms, and of Guava's <code>com.google.common.hash.Hashing sha1</code> and <code>md5</code> methods. </p>
<h2>Noncompliant Code Example</h2>

<pre>
MessageDigest md = MessageDigest.getInstance("SHA1");  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
MessageDigest md = MessageDigest.getInstance("SHA-256");
</pre>
<p>or</p>
<pre>
Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash</li>
<li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
<li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>
<li> Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a></li>
</ul>
Ü	
squid:S3281ˆ
squidS3281<Default EJB interceptors should be declared in "ejb-jar.xml""MAJOR*java2S3281:ì<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated as default. </p>
<p>This rule applies to projects that contain JEE Beans  (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>, <code>Stateless</code> or <code>Stateful</code>).</p>

<h2>Noncompliant Code Example</h2>
<pre>
// file: ejb-interceptors.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
// file: ejb-jar.xml
&lt;assembly-descriptor&gt;
 &lt;interceptor-binding&gt;
      &lt;ejb-name&gt;*&lt;/ejb-name&gt;
      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;
   &lt;/interceptor-binding&gt;
&lt;/assembly-descriptor&gt;
</pre>
©
squid:S1994ô
squidS1994\"for" loop incrementers should modify the variable being tested in the loop's stop condition"MAJOR*java2S1994:ñ<p>It is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i < 10; j++) {  // Noncompliant
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
for (i = 0; i < 10; i++) {
  // ...
}
</pre>
 	
squid:S1872∫	
squidS1872&Classes should not be compared by name"CRITICAL*java2S1872:Í<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted class and thereby gain trusted access. </p>
<p>Instead, the <code>instanceof</code> operator should be used to check the object's underlying type.</p>
<h2>Noncompliant Code Example</h2>

<pre>
package computer;
class Pear extends Laptop { ... }

package food;
class Pear extends Fruit { ... }

class Store {

  public boolean hasSellByDate(Object item) {
    if ("Pear".equals(item.getClass().getSimpleName())) {  // Noncompliant
      return true;  // Results in throwing away week-old computers
    }
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class Store {

  public boolean hasSellByDate(Object item) {
    if (item instanceof food.Pear) {
      return true;
    }
  }
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/486.html">MITRE, CWE-486</a> - Comparison of Classes by Name</li>
</ul>
°
squid:S1873ë
squidS1873)"static final" arrays should be "private""CRITICAL*java2S1873:æ
<p>Public arrays, even ones declared <code>static final</code> can have their contents edited by malicious programs. The <code>final</code> keyword on an array declaration means that the array object itself may only be assigned once, but its contents are still mutable. Therefore making arrays <code>public</code> is a security risk.</p>
<p>Instead, arrays should be private and accessed through methods.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Estate {
  // Noncompliant; array contents can be modified
  public static final String [] HEIRS = new String [] { 
    "Betty", "Suzy" };
}

public class Malicious {
  public void changeWill() {
    Estate.HEIRS[0] = "Biff";
    if (Estate.HEIRS.length &gt; 1) {
      for (int i = 1; i &lt; Estate.HEIRS.length; i++) {
        Estate.HEIRS[i] = "";
      }
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Estate {
  private static final String [] HEIRS = new String [] { 
    "Betty", "Suzy" };

  public String [] getHeirs() {
    // return copy of HEIRS
  }
}

</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/582.html">MITRE, CWE-582</a> - Array Declared Public, Final, and Static</li>
<li> <a href="http://cwe.mitre.org/data/definitions/607.html">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object</li>
</ul>
À
squid:S1871ª
squidS1871^Two branches in the same conditional structure should not have exactly the same implementation"MAJOR*java2S1871:∂<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined, for an <code>if</code> structure or one should fall through to the other for a <code>switch</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
switch (i) {
  case 1: 
    doSomething();
    break;
  case 2: 
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doSomething(); 
    break;
  default: 
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doTheThing();
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest(); 
}
</pre>
<h2>Compliant Solution</h2>

<pre>
switch (i) {
  case 1: 
  case 3:
    doSomething();
    break;
  case 2: 
    doSomethingDifferent();
    break;
  default: 
    doTheRest();
}

if ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {
  doTheThing();
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else {
  doTheRest(); 
}
</pre>
<p>or </p>
<pre>
switch (i) {
  case 1: 
    doSomething();
    break;
  case 2: 
    doSomethingDifferent();
    break;
  case 3:
    doThirdThing(); 
    break;
  default: 
    doTheRest();
}

if (a &gt;= 0 &amp;&amp; a &lt; 10) {
  doTheThing();
else if (a &gt;= 10 &amp;&amp; a &lt; 20) {
  doTheOtherThing();
}
else if (a &gt;= 20 &amp;&amp; a &lt; 50) {
  doTheThirdThing();
}
else {
  doTheRest(); 
}
</pre>
µ	
squid:S2166•	
squidS2166FClasses named like "Exception" should extend "Exception" or a subclass"MAJOR*java2S2166:∏Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code. Using "exception" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation that a class' name will indicate what it is and/or does.

<h2>Noncompliant Code Example</h2>
<pre>
public class FruitException {  // Noncompliant; this has nothing to do with Exception
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException {  // Noncompliant; the extends clause was forgotten?
  public CarException(String message, Throwable cause) {
  // ...
</pre>

<h2>Compliant Solution</h2>
<pre>
public class FruitSport {
  private Fruit expected;
  private String unusualCharacteristics;
  private boolean appropriateForCommercialExploitation;
  // ...
}

public class CarException extends Exception {
  public CarException(String message, Throwable cause) {
  // ...
</pre>
Ω
squid:S1199≠
squidS1199%Nested code blocks should not be used"MAJOR*java2S1199:·<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD: {                                // Noncompliant - nested code block '{' ... '}'
        int a = stack.pop();
        int b = stack.pop();
        int result = a + b;
        stack.push(result);
        break;
      }
    /* ... */
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public void evaluate(int operator) {
  switch (operator) {
    /* ... */
    case ADD:                                  // Compliant
      evaluateAdd();
      break;
    /* ... */
  }
}

private void evaluateAdd() {
  int a = stack.pop();
  int b = stack.pop();
  int result = a + b;
  stack.push(result);
}
</pre>
·
squid:S2167—
squidS21671"compareTo" should not return "Integer.MIN_VALUE""CRITICAL*java2S2167:ˆ<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code> does not convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes inversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields <code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return Integer.MIN_VALUE;  // Noncompliant
  }
</pre>

<h2>Compliant Solution</h2>
<pre>
public int compareTo(MyClass) {
  if (condition) {
    return -1;
  }
</pre>
°

squid:S3374ë

squidS33740Struts validation forms should have unique names"CRITICAL*java2S3374:∑	<p>According to the Common Weakness Enumeration,</p>
<blockquote>If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer's expectations...</blockquote>
<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>

<h2>Noncompliant Code Example</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
&lt;form-validation&gt;
  &lt;formset&gt;
    &lt;form name="BookForm"&gt; ... &lt;/form&gt;
  &lt;/formset&gt;
&lt;/form-validation&gt;
</pre>

<h2>See</h2>
<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/102.html">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms
</li><li> <a href="https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms">OWASP, Improper Data Validation</a> - Struts: Duplicate Validation Forms
</li></ul>
Ê
squid:S2164÷
squidS2164&Math should not be performed on floats"CRITICAL*java2S2164:ÜFor small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not. <code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.

<h2>Noncompliant Code Example</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
float c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7

double d = a + b; // Noncompliant; addition is still between 2 floats
</pre>

<h2>Compliant Solution</h2>
<pre>
float a = 16777216.0f;
float b = 1.0f;
BigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));

double d = (double)a + (double)b;
</pre>
ã
squid:S1197˚
squidS1197>Array designators "[]" should be on the type, not the variable"MINOR*java2S1197:ñ<p>
  Array designators should always be located on the type for better code readability.
  Otherwise, developers must look both at the type and the variable name to know whether or
  not a variable is an array.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
int matrix[][];   // Noncompliant
int[] matrix[];   // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
int[][] matrix;   // Compliant
</pre>
•
squid:S2165ï
squidS2165*"finalize" should not set fields to "null""MAJOR*java2S2165:ƒ<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary - the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Foo {
  private String name;

  @Override
  void finalize() {
    name = null;  // Noncompliant; completely unnecessary
</pre>
∫
squid:S1996™
squidS1996?Files should contain only one top-level class or interface each"MAJOR*java2S1996:ƒ<p>
  A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
  This is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or interface per file.
</p>
ò
squid:S2162à
squidS2162<"equals" methods should be symmetric and work for subclasses"CRITICAL*java2S2162:¢<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is symmetric. </p>
<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the parent is not an <code>intanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a new implementation of <code>equals</code>):</p>
<pre>
Fruit fruit = new Fruit();
Raspberry raspberry = new Raspberry();

if (raspberry instanceof Fruit) { ... } // true
if (fruit instanceof Raspberry) { ... } // false
</pre>
<p>If similar <code>instanceof</code> checks were used in the classes' <code>equals</code> methods, the symmetry principle would be broken:</p>
<pre>
raspberry.equals(fruit); // false
fruit.equals(raspberry); //true
</pre>
<p>Additionally, non <code>final</code> classes shouldn't use a hardcoded class name in the <code>equals</code> method because doing so breaks the method for subclasses. Instead, make the comparison dynamic.</p>
<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while <code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes
      return ripe.equals(((Fruit)obj).getRipe());
    }
    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class
      // ...
    }
    //...
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Fruit extends Food {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj == null) {
      return false;
    }
    if (this.getClass() == obj.getClass()) {
      return ripe.equals(((Fruit)obj).getRipe());
    }
    return false;
}
</pre>
Ÿ
squid:UnusedProtectedMethodπ
squidUnusedProtectedMethod*Unused protected methods should be removed"MAJOR*java2UnusedProtectedMethod:»<p>Protected methods that are never used by any of the classes in the same project are suspected to be dead code. Dead code is unnecessary, inoperative code that should be removed. Removing dead code makes maintenance easier by decreasing the size of the maintained code base, thereby making it easier to understand the program and preventing the introduction of bugs.</p>
<p>Unused protected methods are not considered dead code in the following cases:</p>
<ul>
<li> Protected methods which override a parent class method.</li>
<li> Protected methods of an abstract class.</li>
</ul>
Ω
squid:S1195≠
squidS1195LArray designators "[]" should be located after the type in method signatures"MINOR*java2S1195:∫<p>According to the Java Language Specification: </p>
<blockquote>
<p>For compatibility with older versions of the Java SE platform,</p>
<p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the array type after the formal parameter list.</p>
<p>This obsolescent syntax should not be used in new code.</p>
</blockquote>

<h2>Noncompliant Code Example</h2>
<pre>
public int getVector()[] { /* ... */ }    // Noncompliant

public int[] getMatrix()[] { /* ... */ }  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
public int[] getVector() { /* ... */ }

public int[][] getMatrix() { /* ... */ } 
</pre>
ÿ
squid:CommentedOutCodeLineπ
squidCommentedOutCodeLine.Sections of code should not be "commented out""MAJOR*java2CommentedOutCodeLine:∆<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>
<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>
<li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>
<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>
</ul>
ä
squid:S1194˙
squidS1194("java.lang.Error" should not be extended"CRITICAL*java2S1194:®<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be encountered by the Java Virtual Machine.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class MyException extends Error { /* ... */ }       // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
public class MyException extends Exception { /* ... */ }   // Compliant
</pre>
∆
squid:S3373∂
squidS3373<"action" mappings should not have too many "forward" entries"MAJOR*java2S3373:”<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of CRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it becomes difficult to maintain a transparent naming convention. </p>
<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of <code>&lt;forward/&gt;</code> tags.</p>

<h2>Noncompliant Code Example</h2>
<p>With the default threshold of 4:</p>
<pre>
&lt;action path='/book' type='myapp.BookDispatchAction' name='form' parameter='method'&gt;
  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;
  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;
  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;
  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;
  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;  &lt;!-- Noncompliant --&gt;
&lt;/action&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
&lt;action path='/book' type='myapp.BookDispatchAction' name='bookForm' parameter='method'&gt;
  &lt;forward name='create' path='/WEB-INF/jsp/BookCreate.jspx' redirect='false'/&gt;
  &lt;forward name='read' path='/WEB-INF/jsp/BookDetails' redirect='false'/&gt;
  &lt;forward name='update' path='/WEB-INF/jsp/BookUpdate.jspx' redirect='false'/&gt;
  &lt;forward name='delete' path='/WEB-INF/jsp/BookDelete.jspx' redirect='false'/&gt;
&lt;/action&gt;

&lt;action path='/author' type='myapp.AuthorDispatchAction' name='authorForm' parameter='method'&gt;
  &lt;forward name='authorRead' path='WEB-INF/jsp/AuthorDetails' redirect='false'/&gt;
&lt;/action&gt;
</pre>
˘
squid:S2160È
squidS21603Subclasses that add fields should override "equals""MAJOR*java2S2160:è<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>

<p>This rule looks for classes that do all of the following:</p>
<ul>
    <li>extend classes that override <code>equals</code>.</li>
    <li>do not themselves override <code>equals</code>.</li>
    <li>add fields.</li>
</ul>

<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit's equals method
  private Color ripeColor;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (this.class != obj.class) {
      return false;
    }
    Fruit fobj = (Fruit) obj;
    if (ripe.equals(fobj.getRipe()) {
      return true;
    }
    return false;
  }
}

public class Raspberry extends Fruit {
  private Color ripeColor;

  public boolean equals(Object obj) {
    if (! super.equals(obj)) {
      return false;
    }
    Raspberry fobj = (Raspberry) obj;
    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested
      return true;
    }
    return false;
  }
}
</pre>
∫
squid:S1193™
squidS1193GException types should not be tested using "instanceof" in catch blocks"MAJOR*java2S1193:º<p>
Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.
</p>

<p>For example, following code:</p>

<pre>
try {
  /* ... */
} catch (Exception e) {
  if(e instanceof IOException) { /* ... */ }         // Noncompliant
  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant
}
</pre>

<p>should be refactored into:</p>

<pre>
try {
  /* ... */
} catch (IOException e) { /* ... */ }                // Compliant
} catch (NullPointerException e) { /* ... */ }       // Compliant
</pre>
í
squid:S1192Ç
squidS1192(String literals should not be duplicated"MINOR*java2S1192:≥
<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>
<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>
<h2>Noncompliant Code Example</h2>

<p>With the default threshold of 3:</p>
<pre>
public void run() {
  prepare("action1");                              // Noncompliant - "action1" is duplicated 3 times
  execute("action1");
  release("action1");
}

@SuppressWarning("all")                            // Compliant - annotations are excluded
private void method1() { /* ... */ }
@SuppressWarning("all")
private void method2() { /* ... */ }

public String method3(String a) {
  System.out.println("'" + a + "'");               // Compliant - literal "'" has less than 5 characters and is excluded
  return "";                                       // Compliant - literal "" has less than 5 characters and is excluded
}
</pre>
<h2>Compliant Solution</h2>

<pre>
private static final String ACTION_1 = "action1";  // Compliant

public void run() {
  prepare(ACTION_1);                               // Compliant
  execute(ACTION_1);
  release(ACTION_1);
}
</pre>
<h2>Exceptions</h2>

<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>

squid:S1190‡
squidS1190+Future keywords should not be used as names"MAJOR*java2S1190:é<p>Through Java's evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java, it will not be under modern versions. </p>
<table>
<tr><th>Keyword</th><th>Added</th></tr>
<tr><td>assert</td><td>1.4</td></tr>
<tr><td>const</td><td>reserved</td></tr>
<tr><td>enum</td><td>5.0</td></tr>
<tr><td>goto</td><td>reserved</td></tr>
<tr><td>strictfp</td><td>1.2</td></tr>
</table>

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething() {
  int enum = 42;            // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomething() {
  int magic = 42;
}
</pre>
ø
squid:S1191Ø
squidS11910Classes from "sun.*" packages should not be used"MAJOR*java2S1191:ÿ<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>
<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause problems when moving to a different Java vendor, such as OpenJDK.</p>
<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>
<h2>Noncompliant Code Example</h2>

<pre>
import com.sun.jna.Native;     // Noncompliant
import sun.misc.BASE64Encoder; // Noncompliant
</pre>
æ
squid:S2973Æ
squidS2973-Escaped Unicode characters should not be used"MAJOR*java2S2973:⁄<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>
<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a printable character.</p>

<h2>Noncompliant Code Example</h2>
<pre>
String prefix = "n\u00E9e"; // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
String prefix = "n√©e";
</pre>

squid:S1764‡
squidS1764KIdentical expressions should not be used on both sides of a binary operator"CRITICAL*java2S1764:Î<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>
<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>
<h2>Noncompliant Code Example</h2>

<pre>
if ( a == a ) { // always true
  doZ();
}
if ( a != a ) { // always false
  doY();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  doX();
}
if ( a == b || a == b ) { // if the first one is true, the second one is too
  doW();
}

int j = 5 / 5; //always 1
int k = 5 - 5; //always 0
</pre>
<h2>Compliant Solution</h2>

<pre>
doZ();

if ( a == b ) {
  doX();
}
if ( a == b ) {
  doW();
}

int j = 1;
int k = 0;
</pre>
<h2>Exceptions</h2>

<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>
<pre>
float f;
if(f != f) { //test for NaN value
  System.out.println("f is NaN");
}

int i = 1 &lt;&lt; 1; // Compliant
int j = a &lt;&lt; a; // Noncompliant
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
<li> Rule S1656 - Implements a check on <code>=</code>. </li>
</ul>
ó
squid:S1643á
squidS16436Strings should not be concatenated using '+' in a loop"MAJOR*java2S1643:™<p>Strings are immutable objects in Java, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is preferred.</p>

<h2>Noncompliant Code Example</h2>
<pre>
String str = "";
for (int i = 0; i < arrayOfStrings.length ; ++i) {
  str = str + arrayOfStrings[i];
}
</pre>

<h2>Compliant Solution</h2>
<pre>
StringBuilder bld = new StringBuilder();
for (int i = 0; i < arrayOfStrings.length; ++i) {
  bld.append(arrayOfStrings[i]);
}
String str = bld.toString();
</pre>
ñ
squid:S2974Ü
squidS29747Classes without "public" constructors should be "final""MAJOR*java2S2974:®<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class PrivateConstructorClass {  // Noncompliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public final class PrivateConstructorClass {  // Compliant
  private PrivateConstructorClass() {
    // ...
  }

  public static int magic(){
    return 42;
  }
}
</pre>
±
squid:S2972°
squidS2972,Inner classes should not have too many lines"MAJOR*java2S2972:Œ<p>
  Inner classes should be short and sweet, to manage complexity in the overall file.
  An inner class that has grown longer than a certain threshold should probably be externalized to its own file.
</p>
—
squid:S1640¡
squidS1640CMaps with keys that are enum values should be replaced with EnumMap"MAJOR*java2S1640:◊<p>
  When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>,
  which can be much more efficient than other sets because the underlying data structure is a simple array.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  public enum COLOR {
    RED, GREEN, BLUE, ORANGE;
  }

  public void mapMood() {
    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);
  }
}
</pre>
Í	
squid:S2059⁄	
squidS2059G"Serializable" inner classes of "Serializable" classes should be static"MAJOR*java2S2059:Ï<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually serializable, then the serialization will succeed but possibly write out far more data than was intended.</p>

<p>Making the inner class <code>static</code> (i.e. "nested") avoids this problem, therefore inner classes should be <code>static</code> if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: 
<ul>
  <li>an inner class can only be instantiated within the context of an instance of the outer class.</li>
  <li>a nested (<code>static</code>) class can be instantiated independently of the outer class.</li>
</ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public class Drupelet implements Serializable {  // Noncompliant; output may be too large
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Raspberry implements Serializable {
  // ...

  public static class Drupelet implements Serializable {
    // ...
  }
}
</pre>
©
squid:S2970ô
squidS2970Assertions should be complete"CRITICAL*java2S2970:“<p>
  It is very easy to write incomplete assertions when using some test frameworks.
  This rule enforces complete assertions in the following cases:
</p>
<ul>
  <li>Fest: <code>assertThat</code> is not followed by an assertion invocation</li>
  <li>AssertJ: <code>assertThat</code> is not followed by an assertion invocation</li>
  <li>Mockito: <code>verify</code> is not followed by a method invocation</li>
</ul>
<p>
  In such cases, what is intended to be a test doesn't actually verify anything.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result); // Noncompliant; nothing is actually checked, the test passes whether "result" is true or false

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let's check that "add" and "clear" methods are actually called
Mockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()
</pre>

<h2>Compliant Solution</h2>
<pre>
// Fest
boolean result = performAction();
// let's now check that result value is true
assertThat(result).isTrue();

// Mockito
List mockedList = Mockito.mock(List.class);
mockedList.add("one");
mockedList.clear();
// let's check that "add" and "clear" methods are actually called
Mockito.verify(mockedList).add("one");
Mockito.verify(mockedList).clear();
</pre>

<h2>Exceptions</h2>
<p>Variable assignments and return statements are skipped to allow helper methods.</p>
<pre>
private BooleanAssert check(String filename, String key) {
  String fileContent = readFileContent(filename);
  performReplacements(fileContent);
  return assertThat(fileContent.contains(key)); // No issue is raised here
}

@Test
public void test() {
  check("foo.txt", "key1").isTrue();
  check("bar.txt", "key2").isTrue();
}
</pre>
ª
squid:S2057´
squidS2057/"Serializable" classes should have a version id"MAJOR*java2S2057:’<p>A <code>serialVersionUID</code> field is required in all <code>Serializable</code> classes. If you do not provide one, one will be calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the class.</p>

<p><code>serialVersionUID</code>'s should be declared with all of these modifiers: <code>static final long</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Raspberry extends Fruit  // Noncompliant; no serialVersionUID. 
        implements Serializable {
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}

public class Raspberry extends Fruit
        implements Serializable {
  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Raspberry extends Fruit
        implements Serializable {
  private static final long serialVersionUID = 1;
  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>

<h2>Exceptions</h2>
Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s), and classes marked with <code>@SuppressWarnings("serial")</code> are ignored.
â
squid:S2178˘
squidS21786Short-circuit logic should be used in boolean contexts"CRITICAL*java2S2178:ôThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances.

<h2>Noncompliant Code Example</h2>
<pre>
if(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated
</pre>

<h2>Compliant Solution</h2>
<pre>
if(getTrue() || getFalse()) { ... }  // true short-circuit logic
</pre>
à
squid:S2175¯
squidS21753Inappropriate "Collection" calls should not be made"CRITICAL*java2S2175:õ<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of using the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is unrelated to the type used for the list declaration.</p>
<h2>Noncompliant Code Example</h2>

<pre>
List&lt;String&gt; list = new ArrayList&lt;String&gt;();
Integer integer = Integer.valueOf(1);

if (list.contains(integer)) {  // Noncompliant. Always false.
  list.remove(integer); // Noncompliant. list.add(integer) doesn't compile, so this will always return false
}
</pre>
Ô
squid:S2055ﬂ
squidS2055`The non-serializable super class of a "Serializable" class should have a no-argument constructor"CRITICAL*java2S2055:’<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the object from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until the final object has been instantiated.</p>

<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a <code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit 
        implements Serializable {  // Noncompliant; nonserializable ancestor doesn't have no-arg constructor
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) { ...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Fruit {
  private Season ripe;

  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor
  public Fruit (Season ripe) {...}
  public void setRipe(Season ripe) {...}
  public Season getRipe() {...}
}

public class Raspberry extends Fruit 
        implements Serializable {
  private static final long serialVersionUID = 1;

  private String variety;

  public Raspberry(Season ripe, String variety) {...}
  public void setVariety(String variety) {...}
  public String getVarity() {...}
}
</pre>
ó
squid:S2176á
squidS21768Class names should not shadow interfaces or superclasses"MAJOR*java2S2176:®While it's perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it's confusing and could cause problems in the future. 

<h2>Noncompliant Code Example</h2>
<pre>
package my.mypackage;

public class Foo implements a.b.Foo { // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
package my.mypackage;

public class FooJr implements a.b.Foo {
</pre>
Ÿ
squid:S2737…
squidS2737+"catch" clauses should do more than rethrow"MAJOR*java2S2737:˜<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>
<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>

<h2>Noncompliant Code Example</h2>
<pre>
string s = "";
try {
  s = File.ReadAllText(fileName);
}
catch (Exception e) {  // Noncompliant
  throw e;
}
</pre>

<h2>Compliant Code Example</h2>
<pre>
string s = "";
try {
  s = File.ReadAllText(fileName);
}
catch (Exception e) {  // Compliant
  logger.LogError(e);
  throw e;
}
</pre>
<p>or</p>
<pre>
string s = File.ReadAllText(fileName);
</pre>
ó
"squid:ClassVariableVisibilityCheck
squidClassVariableVisibilityCheck:Class variable fields should not have public accessibility"MAJOR*java2ClassVariableVisibilityCheck:·
<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>
<ul>
<li> Additional behavior such as validation cannot be added.</li>
<li> The internal representation is exposed, and cannot be changed afterwards.</li>
<li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions.</li>
</ul>
<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  public String firstName;                       // Noncompliant

}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class MyClass {

  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked

  private String firstName;                      // Compliant

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

}
</pre>
<h2>Exceptions</h2>
<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>

<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/493.html">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier</li>
</ul>
Ú
2squid:RightCurlyBraceDifferentLineAsNextBlockCheckª
squid,RightCurlyBraceDifferentLineAsNextBlockCheckfClose curly brace and the next "else", "catch" and "finally" keywords should be on two different lines"MINOR*java2,RightCurlyBraceDifferentLineAsNextBlockCheck:‡<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>
<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on two different lines.</p>
<p>The following code snippet illustrates this rule:</p>
<pre>
public void myMethod() {
  if(something) {
    executeTask();
  } else if (somethingElse) {          // Noncompliant
    doSomethingElse();
  }
  else {                               // Compliant
     generateError();
  }

  try {
    generateOrder();
  } catch (Exception e) {              // Noncompliant
    log(e);
  }
  finally {                            // Compliant
    closeConnection();
  }
}
</pre>
Å
squid:S2975Ò
squidS2975 "clone" should not be overridden"MAJOR*java2S2975:™<p>
  Many consider <code>clone</code> and <code>Cloneable</code> broken in Java,
  largely because the rules for overriding <code>clone</code> are tricky and difficult to get right, according to Joshua Bloch:
</p>
<blockquote>
  Object's clone method is very tricky. It's based on field copies, and it's "extra-linguistic."
  It creates an object without calling a constructor.
  There are no guarantees that it preserves the invariants established by the constructors.
  There have been lots of bugs over the years, both in and outside Sun,
  stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object,
  you have a shallow copy of the object.  The clone generally shares state with the object being cloned.
  If that state is mutable, you don't have two independent objects.
  If you modify one, the other changes as well. And all of a sudden, you get random behavior.
</blockquote>
<p>
  A copy constructor or copy factory should be used instead.
</p>
<p>
  This rule raises an issue when <code>clone</code> is overridden,
  whether or not <code>Cloneable</code> is implemented.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  // ...

  public Object clone() { // Noncompliant
    //...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  // ...

  MyClass (MyClass source) {
    //...
  }
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://www.artima.com/intv/bloch13.html">Copy Constructor versus Cloning</a></li>
</ul>

<h3>See Also</h3>
<ul>
  <li>S2157 - "Cloneables" should implement "clone"</li>
  <li>S1182 - Classes that override "clone" should be "Cloneable" and call "super.clone()"</li>
</ul>
¡

squid:S2976±

squidS2976>"File.createTempFile" should not be used to create a directory"CRITICAL*java2S2976:…	<p>
  Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition
  and is inherently unreliable and insecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or
  a library function such as Guava's similarly-named <code>Files.createTempDir</code> should be used.
</p>
<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>
<ul>
  <li>call to <code>File.createTempFile</code></li>
  <li>delete resulting file</li>
  <li>call <code>mkdir</code> on the File object</li>
</ul>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
File tempDir;
tempDir = File.createTempFile("", ".");
tempDir.delete();
tempDir.mkdir();  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
Path tempPath = Files.createTempDirectory("");
File tempDir = tempPath.toFile();
</pre>

<h2>See</h2>
<ul>
  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWAPS Top Ten 2013 Category A9 - Using Components with Known Vulnerabilities</a></li>
</ul>
π
"squid:LeftCurlyBraceStartLineCheckí
squidLeftCurlyBraceStartLineCheck@An open curly brace should be located at the beginning of a line"MINOR*java2LeftCurlyBraceStartLineCheck:˝<p>Shared coding conventions make it possible to collaborate efficiently. This rule make it mandatory to place the open curly brace at the beginning of a line.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void myMethod {  // Noncompliant
  if(something) {  // Noncompliant
    executeTask();
  } else {  // Noncompliant
    doSomethingElse();
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void myMethod
{
  if(something)
  {
    executeTask();
  } else
  {
    doSomethingElse();
  }
}
</pre>
—	
4squid:ObjectFinalizeOverridenCallsSuperFinalizeCheckò	
squid.ObjectFinalizeOverridenCallsSuperFinalizeCheckQsuper.finalize() should be called at the end of Object.finalize() implementations"BLOCKER*java2.ObjectFinalizeOverridenCallsSuperFinalizeCheck:Ã<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>
<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also dispose some system resources.</p>
<h2>Noncompliant Code Example</h2>

<pre>
protected void finalize() {   // Noncompliant; no call to super.finalize();
  releaseSomeResources();
}

protected void finalize() {
  super.finalize();  // Noncompliant; this call should come last
  releaseSomeResources();
}
</pre>
<h2>Compliant Solution</h2>

<pre>
protected void finalize() {
  releaseSomeResources();
  super.finalize();    
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/568.html">MITRE, CWE-568</a> - finalize() Method Without super.finalize()</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/H4cbAQ">CERT, MET12-J</a> - Do not use finalizers</li>
</ul>
“
%squid:RedundantThrowsDeclarationCheck®
squidRedundantThrowsDeclarationCheck-Throws declarations should not be superfluous"MINOR*java2RedundantThrowsDeclarationCheck:†<p>
An exception in a <code>throws</code> declaration in Java is superfluous if it is:
</p>

<ul>
  <li>listed multiple times</li>
  <li>a subclass of another listed exception</li>
  <li>a <code>RuntimeException</code>, or one of its descendants</li>
  <li>completely unnecessary because the declared exception type cannot actually be thrown</li>
</ul>

<h2>Noncompliant Code Example</h2>

<pre>
void foo() throws MyException, MyException {}  // Noncompliant; should be listed once
void bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable
void baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown
</pre>

<h2>Compliant Solution</h2>

<pre>
void foo() throws MyException {}
void bar() throws Throwable {}
void baz() {}
</pre>
·
squid:S2293—
squidS2293*The diamond operator ("<>") should be used"MAJOR*java2S2293:Ä<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare a <code>List</code>'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>, and the compiler will infer the type.</p>

<p>
  <strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
List&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
List&lt;String&gt; strings = new ArrayList&lt;&gt;();
Map&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();
</pre>
Ö
squid:EmptyFileÒ
squid	EmptyFileFiles should not be empty"MAJOR*java2	EmptyFile:©<p>Files with no lines of code clutter a project and should be removed. </p>
<h2>Noncompliant Code Example</h2>

<pre>
//package org.foo;
//
//public class Bar {}
</pre>
œ
squid:S1698ø
squidS1698*Objects should be compared with "equals()""MAJOR*java2S1698:Ó<p>Using the equality (<code>==</code>) and inequality (<code>!=</code>) operators to compare two objects does not check to see if they have the same values. Rather it checks to see if both object references point to exactly the same object in memory. The vast majority of the time, this is not what you want to do. Use the .equals() method to compare the values of two objects or to compare a string object to a string literal.</p>

<h2>Noncompliant Code Example</h2>
<pre>
String str1 = "blue";
String str2 = "blue";
String str3 = str1;

if (str1 == str2)
{
  System.out.println("they're both 'blue'"); // this doesn't print because the objects are different
}

if (str1 == "blue")
{
  System.out.println("they're both 'blue'"); // this doesn't print because the objects are different
}

if (str1 == str3)
{
  System.out.println("they're the same object"); // this prints
}
</pre>

<h2>Compliant Solution</h2>
<pre>
String str1 = "blue";
String str2 = "blue";
String str3 = str1;

if (str1.equals(str2))
{
  System.out.println("they're both 'blue'"); // this prints
}

if (str1.equals("blue"))
{
  System.out.println("they're both 'blue'"); // this prints
}

if (str1 == str3)
{
  System.out.println("they're the same object"); // this still prints, but it's probably not what you meant to do
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/595.html">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents</li>
  <li><a href="http://cwe.mitre.org/data/definitions/597">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/wwD1AQ">CERT, EXP03-J</a> - Do not use the equality operators when comparing values of boxed primitives</li>
</ul>
™
squid:S2786ö
squidS2786,Nested "enum"s should not be declared static"MAJOR*java2S2786:«<p>According to <a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9">the docs</a>:</p>
<blockquote>Nested enum types are implicitly <code>static</code>.</blockquote>
<p>So there's no need to declare them <code>static</code> explicitly.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Flower {
  static enum Color { // Noncompliant; static is redundant here
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Flower {
  enum Color { // Compliant
    RED, YELLOW, BLUE, ORANGE
  }

  // ...
}
</pre>
º

squid:S1214¨

squidS1214-Constants should not be defined in interfaces"MINOR*java2S1214:ÿ	<p>According to Joshua Bloch, author of "Effective Java":</p>

<blockquote>
<p>
The constant interface pattern is a poor use of interfaces.
</p>

<p>
That a class uses some constants internally is an implementation detail.
Implementing a constant interface causes this implementation detail to leak into the class's exported API.
It is of no consequence to the users of a class that the class implements a constant interface.
In fact, it may even confuse them.
Worse, it represents a commitment:
if in a future release the class is modified so that it no longer needs to use the constants,
it still must implement the interface to ensure binary compatibility.
If a nonfinal class implements a constant interface,
all of its subclasses will have their namespaces polluted by the constants in the interface.
</p>
</blockquote>

<h2>Noncompliant Code Example</h2>

<pre>
interface Status {                      // Noncompliant
   int OPEN = 1;
   int CLOSED = 2;
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public enum Status {                    // Compliant
  OPEN,
  CLOSED;
}
</pre>

<p>or</p>

<pre>
public final class Status {             // Compliant
   public static final int OPEN = 1;
   public static final int CLOSED = 2;
}
</pre>
ñ
squid:S1213Ü
squidS1213UThe members of an interface declaration or class should appear in a pre-defined order"MINOR*java2S1213:ä<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order in the source files:</p>
<ul>
<li> Class and instance variables</li>
<li> Constructors</li>
<li> Methods</li>
</ul>
<h2>Noncompliant Code Example</h2>

<pre>
public class Foo{ 
   private int field = 0;
   public boolean isTrue() {...}     
   public Foo() {...}                         // Noncompliant, constructor defined after methods
   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Foo{ 
   public static final int OPEN = 4;
   private int field = 0;
   public Foo() {...}
   public boolean isTrue() {...}
}
</pre>
—
squid:S1697¡
squidS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"BLOCKER*java2S1697:¡<p>
  When either the equality operator in a null test or the logical operator that follows it is reversed,
  the code has the appearance of safely null-testing the object before dereferencing it.
  Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced
  <em>only</em> if it is null, leading to a guaranteed null pointer dereference.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (str == null &amp;&amp; str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null || str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (str == null || str.length() == 0) {
  System.out.println("String is empty");
}

if (str != null &amp;&amp; str.length() &gt; 0) {
  System.out.println("String is not empty");
}
</pre>
¶	
squid:S1696ñ	
squidS1696+"NullPointerException" should not be caught"MAJOR*java2S1696:ƒ<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the "is null" branch of the conditional.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;
  try {
    len += str.length();
  }
  catch (NullPointerException e) {
    log.info("argument was null");
  }
  return len;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public int lengthPlus(String str) {
  int len = 2;

  if (str != null) {
    len += str.length();
  }
  else {
    log.info("argument was null");
  }
  return len;
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/395.html">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer Dereference</li>
  <li> <a href="https://www.securecoding.cert.org/confluence/x/BIB3AQ">CERT, ERR08-J</a> - Do not catch NullPointerException or any of its ancestors</li>
</ul>
©	
squid:S2301ô	
squidS23014Public methods should not contain selector arguments"MAJOR*java2S2301:æ<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a parameter may seem innocuous, particularly if it's well named.</p>

<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at the meaning or to take extra time to look the method up.</p>

<p>Instead, separate methods should be written.</p>

<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void tempt(String name, boolean ofAge) {
  if (ofAge) {
    offerLiquor(name);
  } else {
    offerCandy(name);
  }
}

// ...
public void corrupt() {
  tempt("Joe", false); // does this mean not to temp Joe?
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void temptAdult(String name) {
  offerLiquor(name);
}

public void temptChild(String name) {
    offerCandy(name);
}

// ...
public void corrupt() {
  offerCandy("Joe");
}
</pre>
â
squid:S1695˘
squidS16956"NullPointerException" should not be explicitly thrown"MAJOR*java2S1695:ú<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates that code is structured to avoid NPE's. </p>
<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely throw an NPE.</p>
<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation instead.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomething (String aString) throws NullPointerException {
     throw new NullPointerException();
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomething (@NotNull String aString) {
}
</pre>
°
squid:S1694ë
squidS1694@An abstract class should have both abstract and concrete methods"MINOR*java2S1694:™
<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>
<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the <code>abstract</code> keyword) with a private constructor.</p>
<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal {  // Noncompliant; should be an interface
  abstract void move();
  abstract void feed();
}

public abstract class Color {  // Noncompliant; should be concrete with a private constructor
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int getRed() {
    return red;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public interface Animal {
  void move();
  void feed();
}

public class Color {
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color () {}

  public int getRed() {
    return red;
  }
}

public abstract class Lamp {

  private boolean switchLamp=false;

  public abstract void glow();

  public void flipSwitch() {
    switchLamp = !switchLamp;
    if (switchLamp) {
      glow();
    }
  }
}
</pre>
ù

squid:S1210ç

squidS1210R"equals(Object obj)" should be overridden along with the "compareTo(T obj)" method"CRITICAL*java2S1210:ë	<p>
According to the Java <code>Comparable.compareTo(T o)</code> documentation:
</p>

<blockquote>
It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.
Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.
The recommended language is "Note: this class has a natural ordering that is inconsistent with equals."
</blockquote>

<p>
If this rule is violated, weird and unpredictable failures can occur.
For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it relies on <code>equals()</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public class Foo implements Comparable&lt;Foo&gt; {
  @Override
  public int compareTo(Foo foo) { /* ... */ }      // Compliant

  @Override
  public boolean equals(Object obj) { /* ... */ }
}
</pre>
Í
squid:S1452⁄
squidS1452>Generic wildcard types should not be used in return parameters"MAJOR*java2S1452:ı<p>Using a wildcard as a return type implicitly means that the return parameter should be considered as read-only but without any way to enforce this contract. </p>
<p>Let's take the example of method returning a "List&lt;? extends Animal&gt;". Is it possible on this list to add a Dog, a Cat, ... we simply don't know. The consumer of a method should not have to deal with such disruptive questions. </p>
<h2>Noncompliant Code Example</h2>

<pre>
List&lt;? extends Animal&gt; getAnimals(){...}
</pre>
ï
squid:S1219Ö
squidS12196"switch" statements should not contain non-case labels"MAJOR*java2S1219:®
<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable 
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>

<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}

switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled "for" statement in a dedicated method
    break;

    /* ... */
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.
</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.
</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed
</li></ul>
ı	
squid:S1451Â	
squidS1451/Copyright and license headers should be defined"BLOCKER*java2S1451:ç	<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>
<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>
<h2>Compliant Solution</h2>

<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>
—
squid:S1217¡
squidS1217=Thread.run() and Runnable.run() should not be called directly"CRITICAL*java2S1217:⁄<p>The purpose of the <code>Thread.run()</code> and <code>Runnable.run()</code> methods is to execute code in a separate, dedicated thread. Calling those methods directly doesn't make sense because it causes their code to be executed in the current thread. </p>
<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>
<h2>Noncompliant Code Example</h2>

<pre>
Thread myThread = new Thread(runnable);
myThread.run(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
Thread myThread = new Thread(runnable);
myThread.start(); // Compliant
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/572.html">MITRE, CWE-572</a> - Call to Thread run() instead of start()</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/KQAiAg">CERT THI00-J</a> - Do not invoke Thread.run()</li>
</ul>
ç
squid:S1215˝
squidS1215FExecution of the Garbage Collector should be triggered only by the JVM"MAJOR*java2S1215:ê<p>
Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason:
there is no way to know exactly what will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:
</p>

<ul>
  <li>Will the whole application be frozen during the call?</li>
  <li>Is the -XX:DisableExplicitGC option activated?</li>
  <li>Will the JVM simply ignore the call?</li>
  <li>...</li>
</ul>

<p>An application relying on those unpredictable methods is also unpredictable and therefore broken.</p>

<p>The task of running the garbage collector should be left exclusively to the JVM.</p>
ã

squid:S1699˚	
squidS16995Constructors should only call non-overridable methods"MAJOR*java2S1699:ü	<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.</p>
<p>For example:</p>
<ul>
<li> The subclass class constructor starts by contract by calling the parent class constructor.</li>
<li> The parent class constructor calls the method, which has been overridden in the child class.</li>
<li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a <code>NullPointerException</code>) can result, because the fields aren't initialized yet.</li>
</ul>

<h2>Noncompliant Code Example</h2>
<pre>
public class Parent {

  public Parent () {
    doSomething();  // Noncompliant
  }

  public void doSomething () {  // not final; can be overridden
    ...
  }
}

public class Child extends Parent {

  private String foo;

  public Child(String foo) {
    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized
    this.foo = foo;
  }

  public void doSomething () {
    System.out.println(this.foo.length());
  }

}
</pre>
˛
squid:TrailingCommentCheckﬂ
squidTrailingCommentCheck:Comments should not be located at the end of lines of code"INFO*java2TrailingCommentCheck:·<p>This rule verifies that single-line comments are not located at the end of a line of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>

<pre>
int a1 = b + c; // This is a trailing comment that can be very very long
</pre>
<h2>Compliant Solution</h2>

<pre>
// This very long comment is better placed before the line of code
int a2 = b + c;
</pre>
<h2>Exceptions</h2>

<p>By default, the property "legalTrailingCommentPattern" allows to ignore comments containing only one word :</p>
<pre>
doSomething(); //FIXME
</pre>
ñ
squid:S2676Ü
squidS2676SNeither "Math.abs" nor negation should be used on numbers that could be "MIN_VALUE""CRITICAL*java2S2676:â<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll still have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>
<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and <code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods is similarly ill-advised.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public void doSomething(String str) {
  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public void doSomething(String str) {
  if (str.hashCode() != 0) {
    // ...
  }
}
</pre>
ñ	
squid:S2677Ü	
squidS26772"read" and "readLine" return values should be used"BLOCKER*java2S2677:´<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of action is surely a bug.</p>
<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>, <code>Reader.read()</code>, and these methods in any child classes.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    while (buffReader.readLine() != null) { // Noncompliant
      // ...
    }
  } catch (IOException e) {
    // ...
  }
} 
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomethingWithFile(String fileName) {
  BufferedReader buffReader = null;
  try {
    buffReader = new BufferedReader(new FileReader(fileName));
    String line = null;
    while ((line = buffReader.readLine()) != null) {
      // ...
    }
  } catch (IOException e) {
    // ...
  }
}
</pre>
¯
squid:S3400Ë
squidS3400#Methods should not return constants"MAJOR*java2S3400:û<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method into thinking that something more is done. Declare a constant instead.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public int getBestNumber() {
return 12;  // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public static int bestNumber = 12;
</pre>


<h2>Exceptions</h2>
<p><code>@Override</code> methods are ignored by this rule, since they may be required by an interface or needed to replace the value returned by a parent class.</p>
È
squid:S1223Ÿ
squidS1223LNon-constructor methods should not have the same name as the enclosing class"MAJOR*java2S1223:Ê<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or was the methods supposed to be a constructor.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Foo {
   public Foo() {...}
   public void Foo(String label) {...}  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Foo {
   public Foo() {...}
   public void foo(String label) {...}  // Compliant
}
</pre>
ß
squid:S2674ó
squidS26747The value returned from a stream read should be checked"BLOCKER*java2S2674:∑
<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>

<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned from the method.</p>

<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not checked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child classes.</p>

<h2>Noncompliant Code Example</h2>

<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    is.read(buffer);  // Noncompliant
    // ...
  } catch (IOException e) { ... }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public void doSomething(String fileName) {
  try {
    InputStream is = new InputStream(file);
    byte [] buffer = new byte[1000];
    int count = 0;
    while (count = is.read(buffer) &gt; 0) {
      // ...
    }
  } catch (IOException e) { ... }
}
</pre>
£
squid:S2675ì
squidS2675)"readObject" should not be "synchronized""MAJOR*java2S2675:√<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file.
It should be the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method,
and the <code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing.
If this is not the case, the method should be refactored to make it the case.</p>

<h2>Noncompliant Code Example</h2>

<pre>
private synchronized void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Noncompliant
  //...
}
</pre>

<h2>Compliant Solution</h2>

<pre>
private void readObject(java.io.ObjectInputStream in)
     throws IOException, ClassNotFoundException { // Compliant
  //...
}
</pre>
ü
squid:S1221è
squidS12211Methods should not be named "hashcode" or "equal""CRITICAL*java2S1221:¥<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>
<ul>
<li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected.</li>
<li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.</li>
</ul>
<p>In both cases, the method should be renamed.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public int hashcode() { /* ... */ }  // Noncompliant

public boolean equal(Object obj) { /* ... */ }  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
@Override
public int hashCode() { /* ... */ }

public boolean equals(Object obj) { /* ... */ } 
</pre>
í
squid:S1220Ç
squidS1220.The default unnamed package should not be used"MINOR*java2S1220:≠<p>According to the Java Language Specification:</p>

<blockquote>
Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just beginning development.
</blockquote>

<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass { /* ... */ }
</pre>

<h2>Compliant Solution</h2>
<pre>
package org.example;

public class MyClass{ /* ... */ }
</pre>
ó

squid:S2438á

squidS2438;"Threads" should not be used where "Runnables" are expected"MAJOR*java2S2438:•	<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>

<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>.</p>

<h2>Noncompliant Code Example</h2>

<pre>
    public static void main(String[] args) {
        Thread r =new Thread() {
            int p;
            @Override
            public void run() {
                while(true)
                    System.out.println("a");
            }
        };
        new Thread(r).start();  // Noncompliant
</pre>

<h2>Compliant Solution</h2>

<pre>
    public static void main(String[] args) {
        Runnable r =new Runnable() {
            int p;
            @Override
            public void run() {
                while(true)
                    System.out.println("a");
            }
        };
        new Thread(r).start();
</pre>
—
squid:S1228¡
squidS12287Packages should have a javadoc file 'package-info.java'"MINOR*java2S1228:„<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using javadoc and declare package annotations.</p>

<h2>Compliant Solution</h2>
<pre>
/**
* This package has non null parameters and is documented.
**/
@ParametersAreNonnullByDefault
package org.foo.bar;
</pre>
˛
squid:S2437Ó
squidS2437,Silly bit operations should not be performed"MAJOR*java2S2437:õ<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>

<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and <code>anyValue | 0</code>.</p>
˙
squid:S1226Í
squidS1226SMethod parameters, caught exceptions and foreach variables should not be reassigned"MAJOR*java2S1226:<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.</p>
<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.</p>
<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.</p>
<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.</p>
<p>All parameters should be treated as <code>final</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
class MyClass {
  public String name;

  public MyClass(String name) {
    name = name;                    // Noncompliant - useless identity assignment
  }

  public int add(int a, int b) {
    a = a + b;                      // Noncompliant

    /* additional logic */

    return a;                       // Seems like the parameter is returned as is, what is the point?
  }

  public static void main(String[] args) {
    MyClass foo = new MyClass();
    int a = 40;
    int b = 2;
    foo.add(a, b);                  // Variable "a" will still hold 40 after this call
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {
  public String name;

  public MyClass(String name) {
    this.name = name;               // Compliant
  }

  public int add(int a, int b) {
    return a + b;                   // Compliant
  }

  public static void main(String[] args) {
    MyClass foo = new MyClass();
    int a = 40;
    int b = 2;
    foo.add(a, b);
  }
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2012, 17.8 - A function parameter should not be modified</li>
</ul>
ƒ
 squid:ForLoopCounterChangedCheckü
squidForLoopCounterChangedCheck."for" loop stop conditions should be invariant"MAJOR*java2ForLoopCounterChangedCheck:†
<p><code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>
<p>Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.</p>
<p>This rule tracks three types of non-invariant stop conditions:</p>
<ul>
<li> When the loop counters are updated in the body of the <code>for</code> loop
</li><li> When the stop condition depend upon a method call
</li><li> When the stop condition depends on an object property, since such properties could change during the execution of the loop.
</li></ul>

<h2>Noncompliant Code Example</h2>
<pre> 
for (int i = 0; i &lt; 10; i++) {
  ...
  i = i - 1; // Noncompliant; counter updated in the body of the loop
  ...
} 
</pre>

<h2>Compliant Solution</h2>
<pre> 
for (int i = 0; i &lt; 10; i++) {...} 
</pre>

<h2>See</h2>
<ul>
<li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the loop.
</li><li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>.
</li></ul>
í
"squid:ObjectFinalizeOverridenCheckÎ
squidObjectFinalizeOverridenCheck4The Object.finalize() method should not be overriden"MAJOR*java2ObjectFinalizeOverridenCheck:‚<p>This Object.finalize() method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be few microseconds to few minutes later. So when some system resources need to be disposed by an object, it's better to not rely on this asynchronous mechanism to dispose them.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class MyClass {
  ...
  protected void finalize() {
    releaseSomeResources();    // Noncompliant
  }
  ...
}
</pre>
<h2>See</h2>

<ul>
<li> CERT Java Secure Coding, MET12-J - Do not use finalizers</li>
</ul>
É
squid:ArchitecturalConstraint·
squidArchitecturalConstraint,Architectural constraints should be followed"MAJOR*java2ArchitecturalConstraint:Ë<p>A source code comply to an architectural model when it fully
	adheres to a set of architectural constraints. A constraint allows to
	deny references between classes by pattern.</p>
<p>You can for instance use this rule to :</p>
<ul>
	<li>forbid access to **.web.** from **.dao.** classes</li>
	<li>forbid access to java.util.Vector, java.util.Hashtable and
		java.util.Enumeration from any classes</li>
	<li>forbid access to java.sql.** from **.ui.** and **.web.**
		classes</li>
</ul>@
≥
squid:S2885£
squidS28852"Calendars" and "DateFormats" should not be static"CRITICAL*java2S2885:«<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data problems or exceptions at runtime.</p>
<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or <code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {
  static private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");  // Noncompliant
  static private Calendar calendar = Calendar.getInstance();  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass {
  private SimpleDateFormat format = new SimpleDateFormat("HH-mm-ss");
  private Calendar calendar = Calendar.getInstance();
</pre>
º
squid:S1313¨
squidS1313$IP addresses should not be hardcoded"CRITICAL*java2S1313:ﬁ<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>
<ul>
<li> a recompile is required if the address changes</li>
<li> it forces the same address to be used in every environment (dev, sys, qa, prod)</li>
<li> it places the responsibility of setting the value to use in production on the shoulders of the developer</li>
<li> it allows attackers to decompile the code and thereby discover a potentially sensitive address</li>
</ul>
<h2>Noncompliant Code Example</h2>

<pre>
String ip = "127.0.0.1";
Socket socket = new Socket(ip, 6667);
</pre>
<h2>Compliant Solution</h2>

<pre>
String ip = System.getProperty("myapplication.ip");
Socket socket = new Socket(ip, 6667);
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J</a> - Never hard code sensitive information</li>
</ul>
∆
squid:S1312∂
squidS1312MLoggers should be "private static final" and should share a naming convention"MINOR*java2S1312:¬<p>Loggers should:</p>
<ul>
  <li><code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own logger.</li>
  <li><code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.</li>
  <li><code>final</code>: be created once and only once per class.</li>
</ul>

<h2>Noncompliant Code Example</h2>
<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>
<pre>
public Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
private static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);
</pre>

<h2>Exceptions</h2>
<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>
˜
squid:S1310Á
squidS1310/"NOPMD" suppression comments should not be used"MINOR*java2S1310:ë<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>

<pre>
// NOPMD
</pre>
Œ

squid:S2089æ

squidS2089%HTTP referers should not be relied on"CRITICAL*java2S2089:Ô	<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may be safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>
<p>This rule flags uses of the referer header field.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public class MyServlet extends HttpServlet {
  protected void doPost(HttpServletRequest request, HttpServletResponse response) 
        throws ServletException, IOException {
    String referer = request.getHeader("referer");  // Noncompliant
    if(isTrustedReferer(referer)){
      //..
    }
    //...
  }
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/807">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision
</li><li> <a href="http://cwe.mitre.org/data/definitions/293">MITRE, CWE-293</a> - Using Referer Field for Authentication
</li><li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses
</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management
</li></ul>
Î

squid:S1319€

squidS1319ÇDeclarations should use Java collection interfaces such as "List" rather than specific implementation classes such as "LinkedList""MAJOR*java2S1319:±	<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>
<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose type is a Java Collection interface.</p>
<p>This rule raises an issue when an implementation class:</p>
<ul>
<li> is returned from a <code>public</code> method.</li>
<li> is accepted as an argument to a <code>public</code> method.</li>
<li> is exposed as a <code>public</code> member.</li>
</ul>
<h2>Noncompliant Code Example</h2>

<pre>
public class Employees {
  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - "employees" should have type "Set" rather than "HashSet"

  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant
    return employees;
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Employees {
  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant

  public Set&lt;Employee&gt; getEmployees() {                           // Compliant
    return employees;
  }
}
</pre>
Á
squid:S1317◊
squidS1317N"StringBuilder" and "StringBuffer" should not be instantiated with a character"MAJOR*java2S1317:‚<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect the character to be the initial value of the <code>StringBuffer</code>. </p>
<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>
<h2>Noncompliant Code Example</h2>

<pre>
StringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);
</pre>
<h2>Compliant Solution</h2>

<pre>
StringBuffer foo = new StringBuffer("x");
</pre>
Ω
squid:S1318≠
squidS1318@"object == null" should be used instead of "object.equals(null)""CRITICAL*java2S1318:√<p>Inexperienced Java developers might expect the <code>Object.equals(Object obj)</code> method to correctly handle the case where the left hand side is null, but that is not the case.</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (variable.equals(null)) { /* ... */ }   // Noncompliant - "variable" is really null, a NullPointerException is thrown
</pre>

<h2>Compliant Solution</h2>
<pre>
if (variable == null) { /* ... */ }        // Compliant
</pre>

<h2>Deprecated</h2>
<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=squid:S2159'>S2159</a> instead.
</p>
ö
squid:S1314ä
squidS1314Octal values should not be used"MAJOR*java2S1314:ƒ<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>
<h2>Noncompliant Code Example</h2>

<pre>
int myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?
</pre>
<h2>Compliant Solution</h2>

<pre>
int myNumber = 8;
</pre>

<h2>See</h2>
<ul>
<li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used.
</li><li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used
</li><li> MISRA C:2012, 7.1 - Octal constants shall not be used
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value
</li></ul>
ê
squid:S1315Ä
squidS13158"CHECKSTYLE:OFF" suppression comments should not be used"MINOR*java2S1315:°<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>
<h2>Noncompliant Code Example</h2>

<pre>
// CHECKSTYLE:OFF
</pre>
€
squid:MaximumInheritanceDepthπ
squidMaximumInheritanceDepth2Inheritance tree of classes should not be too deep"MAJOR*java2MaximumInheritanceDepth:º<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming.</p>
<p>It's a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes.</p>
<p>But abusing of this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code.</p>
<p>Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use 'inheritance' when 'composition' would suit better.</p>
∞
squid:S3052†
squidS30522Fields should not be initialized to default values"MINOR*java2S3052:«<p>
  The compiler automatically initializes class fields to their default values before setting them with any initialization values,
  so there is no need to explicitly set a field to its default value. Further, under the logic that cleaner code is better code,
  it's considered poor style to do so.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass {

  int count = 0;  // Noncompliant
  // ...

}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass {

  int count;
  // ...

}
</pre>

<h2>Exceptions</h2>
<p><code>final</code> fields are ignored.</p>
¬
squid:ModifiersOrderCheck§
squidModifiersOrderCheck1Modifiers should be declared in the correct order"MINOR*java2ModifiersOrderCheck:∞<p>The Java Language Specification recommends listing modifiers in the following order:</p>
<p>1. Annotations</p>
<p>2. public</p>
<p>3. protected</p>
<p>4. private</p>
<p>5. abstract</p>
<p>6. static</p>
<p>7. final</p>
<p>8. transient</p>
<p>9. volatile</p>
<p>10. synchronized</p>
<p>11. native</p>
<p>12. strictfp</p>
<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard order.</p>
<h2>Noncompliant Code Example</h2>

<pre>
static public void main(String[] args) {   // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public static void main(String[] args) {   // Compliant
}
</pre>
∂

squid:S888ß
squidS888HRelational operators should be used in "for" loop termination conditions"CRITICAL*java2S888:∑<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.</p>
<h2>Noncompliant Code Example</h2>

<pre>
for (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
} 
</pre>
<h2>Compliant Solution</h2>

<pre>
for (int i = 1; i &lt;= 10; i += 2)  // Compliant
{
  //...
} 
</pre>
<h2>Exceptions</h2>

<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>
<ul>
<li> starts below the ending value and is incremented by 1 on each iteration.</li>
<li> starts above the ending value and is decremented by 1 on each iteration.</li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (int i = 0; arr[i] != null; i++) {
  // ...
}

for (int i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C++:2008, 6-5-2</li>
<li> <a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop')</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C</a> - Use robust loop termination conditions</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP</a> - Use inequality to terminate a loop whose counter changes by more than one</li>
</ul>
ú
squid:S1444å
squidS1444)"public static" fields should be constant"CRITICAL*java2S1444:π<p>There is no good reason to declare a field "public" and "static" without also declaring it "final". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>. </p>
<h2>Noncompliant Code Example</h2>

<pre>
public class Greeter {
  public static Foo foo = new Foo();
  ...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public class Greeter {
  public static final Foo FOO = new Foo();
  ...
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/500.html">MITRE, CWE-500</a> - Public Static Field Not Marked Final</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/QQBqAQ">CERT OBJ10-J</a> - Do not use public static nonfinal variables</li>
</ul>
±
#squid:StringEqualityComparisonCheckâ
squidStringEqualityComparisonCheck+Strings should be compared using "equals()""CRITICAL*java2StringEqualityComparisonCheck:Ñ<p>Strings, just like any other <code>Object</code>, should be compared using the <code>equals()</code> method.</p>
<p>Using <code>==</code> and <code>!=</code> compares references rather than values, and usually does not work.</p>

<h2>Noncompliant Code Example</h2>

<pre>
if (variable == "foo") { /* ... */ }
if (variable != "foo") { /* ... */ }
</pre>

<h2>Compliant Solution</h2>

<pre>
if ("foo".equals(variable)) { /* ... */ }    // Compliant
if (!"foo".equals(variable)) { /* ... */ }   // Compliant
</pre>

<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/597.html">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison</li>
</ul>

<p>This rule is deprecated, use <a href='/coding_rules#rule_key=squid:S1698'>S1698</a> instead.</p>
®

squid:S1201ò

squidS1201<Methods named "equals" should override Object.equals(Object)"MAJOR*java2S1201:µ	<p>"equals" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>
<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check. However, this will not work as expected.</p>
<h2>Noncompliant Code Example</h2>

<pre>
class MyClass {
  private int foo = 1;

  public boolean equals(MyClass o) {                    // Noncompliant - "equals" method which does not override Object.equals(Object)
    return o != null &amp;&amp; o.foo == this.foo;
  }

  public static void main(String[] args) {
    MyClass o1 = new MyClass();
    Object o2 = new MyClass();
    System.out.println(o1.equals(o2));                  // Will display "false" because "o2" is of type "Object" and not "MyClass"
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {
  private int foo = 1;

  @Override
  public boolean equals(Object o) {                     // Compliant - overrides Object.equals(Object)
    if (o == null || !(o instanceof MyClass)) {
      return false;
    }

    MyClass other = (MyClass)o;
    return this.foo == other.foo;
  }

  /* ... */
}
</pre>
ê	
squid:S2653Ä	
squidS26530Web applications should not have a "main" method"CRITICAL*java2S2653:¶<p>
  There is no reason to have a <code>main</code> method in a web application.
  It may have been useful for debugging during application development,
  but such a method should never make it into production.
  Having a <code>main</code> method in a web application opens a door to the application logic
  that an attacker may never be able to reach (but watch out if one does!),
  but it is a sloppy practice and indicates that other problems may be present.
</p>
<p>
  This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyServlet extends HttpServlet {
  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
    if (userIsAuthorized(req)) {
      updatePrices(req);
    }
  }

  public static void main(String[] args) { // Noncompliant
    updatePrices(req);
  }
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>
</ul>
‡
squid:S1200–
squidS1200YClasses should not be coupled to too many other classes (Single Responsibility Principle)"MAJOR*java2S1200:–
<p>
  According to the Single Responsibility Principle, introduced by Robert C. Martin in his book "Principles of Object Oriented Design", a class should have only one responsibility:
</p>

<blockquote>
If a class has more than one responsibility, then the responsibilities become coupled.
Changes to one responsibility may impair or inhibit the class' ability to meet the others.
This kind of coupling leads to fragile designs that break in unexpected ways when changed.
</blockquote>

<p>
  Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.
</p>
<p>
  Nested classes dependencies are not counted as dependencies of the outer class.
</p>

<h2>Noncompliant Code Example</h2>
<p>With a threshold of 5:</p>
<pre>
class Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7
  T1 a1;                           // Foo is coupled to T1
  T2 a2;                           // Foo is coupled to T2
  T3 a3;                           // Foo is coupled to T3

  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6
    T7 result = a.getResult(b);    // Foo is coupled to T7
    return result;
  }

  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9
    T8 a8;
    T9 a9;
  }
}
</pre>
Õ	
squid:IndentationCheck≤	
squidIndentationCheck+Source code should be indented consistently"MINOR*java2IndentationCheck: <p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier. </p>
<p>By default this rule checks that each block of code is indented but not the size of this indent. The parameter "indentSize" allows the expected indent size to be defined. Only the first line of a badly indented section is reported.</p>
<p>The following code illustrates this rule when the expected indent size is set to 2:</p>
<h2>Noncompliant Code Example</h2>

<pre>
class Foo {
  public int a; 
   public int b;   // Noncompliant, expected to start at column 4

...

  public void doSomething() {
    if(something) {
          doSomethingElse();  // Noncompliant, expected to start at column 6
  }   // Noncompliant, expected to start at column 4
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
class Foo {
  public int a; 
  public int b; 

...

  public void doSomething() {
    if(something) {
        doSomethingElse();
    } 
  }
}
</pre>
æ
squid:S2658Æ
squidS2658(Classes should not be loaded dynamically"CRITICAL*java2S2658:‹<p>
  Dynamically loaded classes could contain malicious code executed by a static class initializer.
  I.E. you wouldn't even have to instantiate or explicitly invoke methods on such classes to be vulnerable to an attack.
</p>

<p>This rule raises an issue for each use of dynamic class loading.</p>

<h2>Noncompliant Code Example</h2>
<pre>
String className = System.getProperty("messageClassName");
Class clazz = Class.forName(className);  // Noncompliant
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/545.html">MITRE, CWE-545</a> - Use of Dynamic Class Loading</li>
  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection">OWASP Top 10 2013 Category A1</a> - Injection</li>
</ul>
˛
squid:S1448Ó
squidS1448(Classes should not have too many methods"MAJOR*java2S1448:ü<p>
  A class that grows too much tends to aggregate too many responsibilities
  and inevitably becomes harder to understand and therefore to maintain.
  Above a specific threshold, it is strongly advised to refactor the class
  into smaller ones which focus on well defined topics.
</p>
ä
squid:S1206˙
squidS1206C"equals(Object obj)" and "hashCode()" should be overridden in pairs"BLOCKER*java2S1206:é<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>
<blockquote>
<p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce the same integer result. </p>
<p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>
<p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.</p>
</blockquote>
<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>
<h2>Noncompliant Code Example</h2>

<pre>
class MyClass {    // Noncompliant - should also override "hashCode()"

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

}
</pre>
<h2>Compliant Solution</h2>

<pre>
class MyClass {    // Compliant

  @Override
  public boolean equals(Object obj) {
    /* ... */
  }

  @Override
  public int hashCode() {
    /* ... */
  }

}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/581.html">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined</li>
<li> CERT Java Secure Coding, MET09-J - Classes that define an equals() method must also define a hashCode() method</li>
</ul>
ˇ
squid:S2096Ô
squidS2096""main" should not "throw" anything"CRITICAL*java2S2096:£<p>There's no reason for a <code>main</code> method to <code>throw</code> anything. After all, what's going to catch it?</p>

<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and perform whatever logging or user communication is necessary.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public static void main(String args[]) throws Exception { // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
public static void main(String args[]) {
</pre>
◊
squid:S2097«
squidS2097."equals(Object obj)" should test argument type"BLOCKER*java2S2097:<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method should not assume it will only be used to test objects of its class type. It must instead check the parameter's type.</p>
<h2>Noncompliant Code Example</h2>

<pre>
public boolean equals(Object obj) {
  MyClass mc = (MyClass)obj;  // Noncompliant
  // ...
}
</pre>
<h2>Compliant Solution</h2>

<pre>
public boolean equals(Object obj) {
  if (obj == null)
    return false;

  if (this.getClass() != obj.getClass())
    return false;

  MyClass mc = (MyClass)obj;
  // ...
}
</pre>
Ü
squid:S2094ˆ
squidS2094Classes should not be empty"MAJOR*java2S2094:¥<p>There is no good excuse for an empty class. If it's being used simply as a common extension point, it should be replaced with an <code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be eliminated.</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Nothing {  // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public interface Nothing {
}
</pre>

<h2>Exceptions</h2>

<p>Empty classes can be used as marker types (for spring for instance), therefore annotated empty classes won't raise any issue.</p>
<pre>
@Configuration
@EnableWebMvc
public class ApplicationConfiguration {

}
</pre>
å
squid:S2095¸
squidS2095Resources should be closed"BLOCKER*java2S2095:π<p>Java's garbage collection cannot be relied on to clean up everything. Specifically, connections, streams, files and other classes that implement the <code>Closeable</code> interface or it's super-interface, <code>AutoCloseable</code>, must be manually closed after creation. Failure to do so will result in a resource leak which could bring first the application and then perhaps the box it's on to their knees.</p>

<h2>Noncompliant Code Example</h2>

<pre>
OutputStream stream = null;
try{
  for (String property : propertyList) {
    stream = new FileOutputStream("myfile.txt");  // Noncompliant
    // ...
  }
}catch(Exception e){
  // ...
}finally{
  stream.close();  // Multiple streams were opened. Only the last is closed.
}
</pre>

<h2>Compliant Solution</h2>

<pre>
OutputStream stream = null;
try{
  stream = new FileOutputStream("myfile.txt");
  for (String property : propertyList) {
    // ...
  }
}catch(Exception e){
  // ...
}finally{
  stream.close();
}
</pre>

<h2>Exceptions</h2>

<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources statement are ignored by this rule.</p>

<pre>
try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
  //...
}
catch ( ... ) {
  //...
}
</pre>

<h2>See</h2>

<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/9gFqAQ">CERT, FIO04-J</a> - Release resources when they are no longer needed</li>
</ul>
ÿ
squid:S2092»
squidS2092Cookies should be "secure""CRITICAL*java2S2092:Ñ<p>The "secure" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon. Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>
<h2>Noncompliant Code Example</h2>

<pre>
Cookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure
response.addCookie(c);
</pre>
<h2>Compliant Solution</h2>

<pre>
Cookie c = new Cookie(SECRET, secret);
c.setSecure(true);
response.addCookie(c);
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/614">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without 'Secure' Attribute
</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management
</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure
</li></ul>
È	
squid:S2093Ÿ	
squidS2093!Try-with-resources should be used"MAJOR*java2S2093:ë	<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>
<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>

<h2>Noncompliant Code Example</h2>
<pre>
FileReader fr = null;
BufferedReader br = null;
try {
  fr = new FileReader(fileName);
  br = new BufferedReader(fr);
  return br.readLine();
} catch (...) {
} finally {
  if (br != null) {
    try {
      br.close();
    } catch(IOException e){...}
  }
  if (fr != null ) {
    try {
      br.close();
    } catch(IOException e){...}
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
try (
    FileReader fr = new FileReader(fileName);
    BufferedReader br = new BufferedReader(fr)
  ) {
  return br.readLine();
}
catch (...) {}
</pre>
<p>or</p>
<pre>
try (BufferedReader br = 
        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don't want to
  return br.readLine();
}
catch (...) {}
</pre>
Û
csharpsquid:S2225›
csharpsquidS2225*"ToString()" method should not return null"CRITICAL*cs:å<p>
    Calling <code>ToString()</code> on an object should always return a string. Returning <code>null</code> instead contravenes the method's implicit contract.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public override string ToString ()
{
  if (this.collection.Count == 0)
  {
    return null; // Noncompliant
  }
  else
  {
    // ...

</pre>

<h2>Compliant Solution</h2>
<pre>
public override string ToString ()
{
  if (this.collection.Count == 0)
  {
    return "";
  }
  else
  {
    // ...

</pre>

<h2>See</h2>

<ul>
    <li><a href="http://cwe.mitre.org/data/definitions/476.html">MITRE CWE-476</a> - NULL Pointer Dereference</li>
</ul>
ü
csharpsquid:S2346â
csharpsquidS2346<Flags enumerations zero-value members should be named "None""MINOR*cs:©<p>
    Consisitent use of "None" in flags enumerations indicates that all flag values are cleared.
    The value 0 should not be used to indicate any other state, since there is no way to check that the bit <code>0</code> is set.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
[Flags]
enum FruitType
{
    Void = 0,       // Non-Compliant
    Banana = 1,
    Orange = 2,
    Strawberry = 4
}
</pre>

<h2>Compliant Solution</h2>

<pre>
[Flags]
enum FruitType
{
    None = 0,       // Compliant
    Banana = 1,
    Orange = 2,
    Strawberry = 4
}
</pre>
≥
csharpsquid:S2743ù
csharpsquidS27431Static fields should not be used in generic types"CRITICAL*cs:≈<p>
    A static field in a generic type is not shared among instances of different closed constructed types, thus <code>LengthLimitedSingletonCollection&lt;int&gt;.instances</code>
    and <code>LengthLimitedSingletonCollection&lt;string&gt;.instances</code> will point to different objects, even though <code>instances</code> is seemingly shared among all
    <code>LengthLimitedSingletonCollection&lt;&gt;</code> generic classes.
</p>
<p>
    If you need to have a static field shared among instances with different generic arguments, define a non-generic base class to store your static members, then set your generic type to inherit from the base class.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class LengthLimitedSingletonCollection&lt;T&gt; where T : new()
{
  protected const int MaxAllowedLength = 5;
  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;(); // Noncompliant
  public static T GetInstance()
  {
    object instance;
    if (!instances.TryGetValue(typeof(T), out instance))
    {
      if (instances.Count >= MaxAllowedLength)
      {
        throw new Exception();
      }
      instance = new T();
      instances.Add(typeof(T), instance);
    }
    return (T)instance;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class SingletonCollectionBase
{
  protected static Dictionary&lt;Type, object&gt; instances = new Dictionary&lt;Type, object&gt;();
}
public class LengthLimitedSingletonCollection&lt;T&gt; : SingletonCollectionBase where T : new()
{
  protected const int MaxAllowedLength = 5;
  public static T GetInstance()
  {
    object instance;
    if (!instances.TryGetValue(typeof(T), out instance))
    {
      if (instances.Count >= MaxAllowedLength)
      {
        throw new Exception();
      }
      instance = new T();
      instances.Add(typeof(T), instance);
    }
    return (T)instance;
  }
}
</pre>

<h2>Exception</h2>
<p>
    If the static field or property uses a type parameter, then the developer is assumed to understand that the static member is not shared among the closed constructed types.
</p>
<pre>
public class Cache&lt;T&gt;
{
  private static Dictionary&lt;string, T&gt; CacheDictionary { get; set; } // Compliant
}
</pre>
Ã
csharpsquid:S2223∂
csharpsquidS22230Non-constant static fields should not be visible"MAJOR*cs:‚<p>
    A <code>static</code> field that is neither constant nor read-only is not thread-safe. Correctly accessing
    these fields from different threads needs synchronization with <code>lock</code>s. Improper synchronization
    may lead to unexpected results, thus publicly visible static fields are best suited for storing non-changing
    data shared by many consumers. To enforce this intent, these fields should be marked <code>readonly</code> or
    converted to a constant.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Math
{
  public static double Pi = 3.14;  // Noncompliant
}
</pre>
or
<pre>
public class Shape
{
  public static Shape Empty = new EmptyShape();  // Noncompliant

  private class EmptyShape : Shape
  {
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Math
{
  public const double Pi = 3.14;
}
</pre>
or
<pre>
public class Shape
{
  public static readonly Shape Empty = new EmptyShape();

  private class EmptyShape : Shape
  {
  }
}
</pre>
÷
csharpsquid:S2344¿
csharpsquidS2344AEnumeration type names should not have "Flags" or "Enum" suffixes"MINOR*cs:€<p>
    The information that an enumeration type is actually an enumeration or a set of flags should not be duplicated in its name.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
enum FooFlags // Noncompliant
{
    Foo = 1
    Bar = 2
    Baz = 4
}
</pre>

<h2>Compliant Solution</h2>

<pre>
enum Foo
{
    Foo = 1
    Bar = 2
    Baz = 4
}
</pre>
ñ
csharpsquid:S1135Ä
csharpsquidS1135"TODO" tags should be handled"INFO*cs:¿<p>
    <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the
    developer wants to implement later.
</p>
<p>
    Sometimes the developer will not have the time or will simply forget to get back to that tag.
</p>
<p>
    This rule is meant to track those tags, and ensure that they do not go unnoticed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething()
{
  // TODO
}
</pre>
¶

csharpsquid:S2345ê

csharpsquidS2345AFlags enumerations should explicitly initialize all their members"CRITICAL*cs:®	<p>
    Flags enumerations should not rely on the language to initialize the values of their members. Implicit initialization
    will set the first member to 0, and increment the value by one for each subsequent member. This implicit behavior does
    not allow members to be combined using the bitwise or operator.
</p>
<p>
    Instead, powers of two, i.e. 1, 2, 4, 8, 16, etc. should be used to explicitly initialize all the members.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
[Flags]
enum FruitType    // Non-Compliant
{
    Banana,
    Orange,
    Strawberry
}
class Program
{
    static void Main()
    {
        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;
        // Will display only Strawberry!
        Console.WriteLine(bananaAndStrawberry.ToString());
    }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
[Flags]
enum FruitType    // Non-Compliant
{
    Banana = 1,
    Orange = 2,
    Strawberry = 4
}
class Program
{
    static void Main()
    {
        var bananaAndStrawberry = FruitType.Banana | FruitType.Strawberry;
        // Will display Banana and Strawberry, as expected.
        Console.WriteLine(bananaAndStrawberry.ToString());
    }
}
</pre>
ı
csharpsquid:S1134ﬂ
csharpsquidS1134"FIXME" tags should be handled"MAJOR*cs:ù<p>
    <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with
    later.
</p>
<p>
    Sometimes the developer will not have the time or will simply forget to get back to that tag.
</p>
<p>
    This rule is meant to track those tags, and ensure that they do not go unnoticed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
private int Divide(int numerator, int denominator)
{
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
¡
csharpsquid:S3397´
csharpsquidS3397f"base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object""CRITICAL*cs:û<p>
    <code>object.Equals()</code> overrides can be optimized by checking first for reference equality between <code>this</code> and the
    parameter. This check can be implemented by calling <code>object.ReferenceEquals()</code> or <code>base.Equals()</code>, where
    <code>base</code> is <code>object</code>. However, using <code>base.Equals()</code> is a maintenance hazard because while it works
    if you extend <code>Object</code> directly, if you introduce a new base class that overrides <code>Equals</code>, it suddenly stops
    working.
</p>
<p>
    This rule raises an issue if <code>base.Equals()</code> is used but <code>base</code> is not <code>object</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  private int baseField;

  public override bool Equals(object other)
  {
    if (base.Equals(other)) // Okay; base is object
    {
      return true;
    }

    return this.baseField == ((Base)other).baseField;
  }
}

class Derived : Base
{
  private int derivedField;

  public override bool Equals(object other)
  {
    if (base.Equals(other))  // Noncompliant
    {
      return true;
    }

    return this.derivedField == ((Derived)other).derivedField;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Base
{
  private int baseField;

  public override bool Equals(object other)
  {
    if (object.ReferenceEquals(this, other))  // base.Equals is okay here, but object.ReferenceEquals is better
    {
      return true;
    }

    return this.baseField == ((Base)other).baseField;
  }
}

class Derived : Base
{
  private int derivedField;

  public override bool Equals(object other)
  {
    if (object.ReferenceEquals(this, other))
    {
      return true;
    }

    return base.Equals(other) &amp;&amp; this.derivedField == ((Derived)other).derivedField;
  }
}
</pre>
¯
csharpsquid:S1659‚
csharpsquidS1659:Multiple variables should not be declared on the same line"MINOR*cs:Ñ<p>
    Declaring multiple variable on one line is difficult to read.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  private int a, b; // Noncompliant

  public void Method()
  {
    int c, d; // Noncompliant
  }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass
{
  private int a;
  private int b;

  public void Method()
  {
    int c;
    int d;
  }
}
</pre>
ƒ
csharpsquid:S1656Æ
csharpsquidS1656%Variables should not be self-assigned"CRITICAL*cs:‚<p>
There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void setName(string name)
{
    name = name;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void setName(string name)
{
    this.name = name;
}
</pre>

<h2>See</h2>

<ul>
    <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
    <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
ï
csharpsquid:S2228ˇ
csharpsquidS2228"Console logging should not be used"CRITICAL*cs:∂<p>
    Debug statements are always useful during development. But include them in production code - particularly
    in code that runs client-side - and you run the risk of inadvertently exposing sensitive information.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
private void DoSomething ()
{
  // ...
  Console.WriteLine ("so far, so good..."); // Noncompliant
  // ...
}
</pre>


<h2>See</h2>

<ul>
    <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
</ul>
™
csharpsquid:S907ï
csharpsquidS907#"goto" statement should not be used"MAJOR*cs:œ<p>
    <code>goto</code> is an unstructured control flow statement. It makes code less readable and maintainable.
    Structured control flow statements such as <code>if</code>, <code>for</code>, <code>while</code>,
    <code>continue</code> or <code>break</code> should be used instead.
</p>

<h2>See</h2>

<ul>
    <li>MISRA C:2004, 14.4 - The goto statement shall not be used.</li>
    <li>MISRA C:2012, 15.1 - The goto statement should not be used</li>
</ul>
…
csharpsquid:S103¥
csharpsquidS103Lines should not be too long"MINOR*cs:v<p>
Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.
</p>
ê
csharpsquid:S105˚
csharpsquidS105(Tabulation characters should not be used"MINOR*cs:∞<p>
Developers should not need to configure the tab width of their text editors in order to be able to read source code.
So the use of tabulation character must be banned.
</p>
◊
csharpsquid:S104¬
csharpsquidS104$Files should not have too many lines"MAJOR*cs:˚<p>
A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.
Those smaller files will not only be easier to understand but also probably easier to test.
</p>
Ò
csharpsquid:S107‹
csharpsquidS107+Methods should not have too many parameters"MAJOR*cs:é<p>
A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.
</p>

<h2>Noncompliant Code Example</h2>
<p>The following code snippet illustrates this rule with a maximum number of 4 parameters:</p>
<pre>
public void doSomething(int param1, int param2, int param3, string param4, long param5)
{
...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, string param4)
{
...
}
</pre>
‰
csharpsquid:S108œ
csharpsquidS108.Nested blocks of code should not be left empty"MAJOR*cs:˛<p>
Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (int i = 0; i < 42; i++) {}  // Empty on purpose or missing piece of code ?
</pre>

<h2>Exceptions</h2>
<p>
    When a block contains a comment, this block is not considered to be empty.
</p>
 
csharpsquid:S2995¥
csharpsquidS2995;"Object.ReferenceEquals" should not be used for value types"CRITICAL*cs:“<p>
    Using <code>Object.ReferenceEquals</code> to compare the references of two value types simply won't return the
    expected results most of the time because such types are passed by value, not by reference.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private MyStruct myStruct;

  public void DoSomething(MyStruct s1) {
    int a = 1;
    int b = 1;

    if (Object.ReferenceEquals(myStruct, s1))  // Noncompliant; this can never be true
    {
      // ...
    }
    else if (Object.ReferenceEquals(a,b)) // Noncompliant
    {
      // ...
    }
  }
}
</pre>
å
csharpsquid:S2357ˆ
csharpsquidS2357Fields should be private"MAJOR*cs:∫<p>
    Fields should not be part of an API, and therefore should always be private. Indeed, they
    cannot be added to an interface for instance, and validation cannot be added later on without
    breaking backward compatiblity. Instead, developers should encapsulate their fields into
    properties. Explicit property getters and setters can be introduced for validation purposes
    or to smooth the transition to a newer system.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  public int MagicNumber = 42;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  public int MagicNumber
  {
    get { return 42; }
  }
}
</pre>
or
<pre>
public class Foo
{
  private int MagicNumber = 42;
}
</pre>

<h2>Exceptions</h2>
<p>
    <code>static</code> and <code>const</code> fields are ignored.
</p>
≥
csharpsquid:S1940ù
csharpsquidS1940%Boolean checks should not be inverted"MINOR*cs:‘<p>
    It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if ( !(a == 2)) { ... }  // Noncompliant
bool b = !(i < 10);  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
if (a != 2) { ... }
bool b = (i >= 10);
</pre>
¨
csharpsquid:S2996ñ
csharpsquidS2996/"ThreadStatic" fields should not be initialized"CRITICAL*cs:¿<p>
    When an object has a field annotated with <code>ThreadStatic</code>, that field is shared within a given thread,
    but unique across threads. Since a class' static initializer is only invoked for the
    first thread created, it also means that only the first thread will have the expected initial values.
</p>
<p>
    Instead, allow such fields to be initialized to their default values or make the initialization lazy.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
  [ThreadStatic]
  public static object PerThreadObject = new object(); // Noncompliant. Will be null in all the threads except the first one.
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Foo
{
  [ThreadStatic]
  public static object _perThreadObject;
  public static object PerThreadObject
  {
    get
    {
      if (_perThreadObject == null)
      {
        _perThreadObject = new object();
      }
      return _perThreadObject;
    }
  }
}
</pre>
∞
csharpsquid:S1301ö
csharpsquidS13019"switch" statements should have at least 3 "case" clauses"MINOR*cs:Ω<p>
    <code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.
</p>
<p>
    For just one or two cases however, the code will be more readable with <code>if</code> statements.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch (variable)
{
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (variable == 0)
{
  doSomething();
} else
{
  doSomethingElse();
}
</pre>

<h2>See</h2>
<ul>
    <li>MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>
    <li>MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>
    <li>MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>
</ul>
Ù
csharpsquid:S2234ﬁ
csharpsquidS22340Parameters should be passed in the correct order"BLOCKER*cs:à<p>
    When the names of parameters in a method call match the names of the method arguments,
    it contributes to clearer, more readable code. However, when the names match, but are
    passed in a different order than the method arguments, it indicates a mistake in the
    parameter order which will likely lead to unexpected results.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public double divide(int divisor, int dividend)
{
  return divisor/dividend;
}

public void doTheThing()
{
  int divisor = 15;
  int dividend = 5;

  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public double divide(int divisor, int dividend)
{
  return divisor/dividend;
}

public void doTheThing()
{
  int divisor = 15;
  int dividend = 5;

  double result = divide(divisor, dividend);
  //...
}
</pre>
ç
csharpsquid:S3169˜
csharpsquidS3169+Multiple "OrderBy" calls should not be used"CRITICAL*cs:•<p>
    There's no point in chaining multiple <code>OrderBy</code> calls in a LINQ; only the last one will be reflected in the result
    because each subsequent call completely reorders the list. Thus, calling <code>OrderBy</code> multiple times is a performance
    issue as well, because all of the sorting will be executed, but only the result of the last sort will be kept.
</p>
<p>
    Instead, use <code>ThenBy</code> for each call after the first.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var x = personList
  .OrderBy(person => person.Age)
  .OrderBy(person => person.Name)  // Noncompliant
  .ToList();  // x is sorted by Name, not sub-sorted
</pre>

<h2>Compliant Solution</h2>
<pre>
var x = personList
  .OrderBy(person => person.Age)
  .ThenBy(person => person.Name)
  .ToList();
</pre>
Ã
csharpsquid:S1145∂
csharpsquidS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*cs:Ã<p>
  <code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. This can be useful during debugging, but should not be checked in. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.
</p>
<p>
In either case, unconditional <code>if</code> statements should be removed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (true)
{
  doSomething();
}
...
if (false)
{
  doSomethingElse();
}
</pre>

<h2>Compliant Solution</h2>
<pre>
doSomething();
...
</pre>
¢
csharpsquid:S1541å
csharpsquidS1541!Methods should not be too complex"MAJOR*cs:«<p>The cyclomatic complexity of a function should not exceed a defined threshold.</p>
<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>
í
csharpsquid:S121˝
csharpsquidS121*Control structures should use curly braces"MAJOR*cs:∞<p>
  While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
// the two statements seems to be attached to the if statement, but that is only true for the first one:
if (condition)
  executeSomething();
  checkSomething();
</pre>

<h2>Compliant Solution</h2>
<pre>
if (condition)
{
  executeSomething();
  checkSomething();
}
</pre>

<h2>See</h2>

<ul>
    <li>MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>
    <li>MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>
    <li>MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>
    <li>MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>
    <li>MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>
    <li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement</li>
    <li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>
</ul>
©
csharpsquid:S3168ì
csharpsquidS3168("async" methods should not return "void""CRITICAL*cs:ƒ<p>
    An async method with a void return type is a "fire and forget" method best reserved for event handlers because there's no way to wait for the method's execution to complete and respond accordingly. There's also no way to catch exceptions thrown from the method.
</p>
<p>
    Having an async void method that is not an event handler could mean your program works some times and not others because of timing issues. Instead, async methods should return Task.
</p>
<p>
    This rule raises an issue when non-event handler methods are both async and void.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class HttpPrinter
{
  private string content;

  public async void CallNetwork(string url) //Noncompliant
  {
    var client = new HttpClient();
    var response = await client.GetAsync(url);
    content = await response.Content.ReadAsStringAsync();
  }

  public async Task PrintContent(string url)  // works correctly if web request finishes in under 1 second, otherwise content will be null
  {
    CallNetwork(url);
    await Task.Delay(1000);
    Console.Write(content);
  }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
class HttpPrinter
{
  private string content;

  public async Task CallNetwork(string url)
  {
    var client = new HttpClient();
    var response = await client.GetAsync(url);
    content = await response.Content.ReadAsStringAsync();
  }

  public async Task PrintContent(string url)
  {
    await CallNetwork(url); // &lt;----- call changed here. If await is not added warning CS4014 will be triggered
    await Task.Delay(1000);
    Console.Write(content);
  }
}
</pre>
¢
csharpsquid:S2197å
csharpsquidS21979Modulus results should not be checked for direct equality"MAJOR*cs:Ø<p>
    When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus
    of a variable for equality with a positive number (or a negative one) could result in unexpected results.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public boo IsOdd(int x)
{
  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public bool IsOdd(int x)
{
  return x % 2 != 0;
}
</pre>
or
<pre>
public bool IsOdd(uint x)
{
  return x % 2 == 1;
}
</pre>
î
csharpsquid:S122ˇ
csharpsquidS122&Statements should be on separate lines"MINOR*cs:∂<p>
    For better readability, do not put more than one statement on a single line.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if(someCondition) doSomething();
</pre>

<h2>Compliant Solution</h2>

<pre>
if(someCondition) {
  doSomething();
}
</pre>

<h2>Exceptions</h2>
<p>
    Anonymous functions containing a single statement are ignored. Block statements are not considered either.
</p>
<pre>
Func&lt;object, bool&gt; item1 = o =&gt; { return true; }; // Compliant
Func&lt;object, bool&gt; item1 = o =&gt; { var r = false; return r; }; // Noncompliant
</pre>
‡
csharpsquid:S2757 
csharpsquidS2757%Reversed operators should not be used"CRITICAL*cs:˛<p>
    The use of operators pairs (<code>=+</code> or <code>=-</code>) where the reversed, single operator
    was meant (<code>+=</code> or <code>-=</code>) will compile and run, but not produce the expected results.
</p>
<p>
    This rule raises an issue when <code>=+</code>, and <code>=-</code> are used, but ignores the operators
    when they're spaced out: <code>= +</code>, <code>= -</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
int target = -5;
int num = 3;

target =- num; // Noncompliant; target = -3. Is that really what's meant?
target =+ num; // Noncompliant; target = 3
</pre>

<h2>Compliant Solution</h2>
<pre>
int target = -5;
int num = 3;

target = -num; // Compliant; intent to assign inverse value of num is clear
target += num;
</pre>
¥
csharpsquid:S2758û
csharpsquidS2758QThe ternary operator should not return the same value regardless of the condition"CRITICAL*cs:¶<p>
    When the second and third operands of a ternary operator are the same, the operator will always
    return the same value regardless of the condition. Either the operator itself is pointless, or a
    mistake was made in coding it.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public boolean canVote(Person person)
{
  return person.getAge > 18 ? true : true; // Noncompliant; is this what was intended?
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public boolean canVote(Person person)
{
  return person.getAge > 18 ? true : false;
}
</pre>
˙
csharpsquid:S2997‰
csharpsquidS2997D"IDisposables" created in a "using" statement should not be returned"BLOCKER*cs:˙<p>
    Typically you want to use <code>using</code> to create a local <code>IDisposable</code> variable; it will trigger
    disposal of the object when control passes out of the block's scope. The exception to this rule is when your
    method returns that <code>IDisposable</code>. In that case <code>using</code> disposes of the object before the
    caller can make use of it, likely causing exceptions at runtime. So you should either remove <code>using</code> or
    avoid returning the <code>IDisposable</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public FileStream WriteToFile(string path, string text)
{
  using (var fs = File.Create(path)) // Noncompliant
  {
    var bytes = Encoding.UTF8.GetBytes(text);
    fs.Write(bytes, 0, bytes.Length);
    return fs;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public FileStream WriteToFile(string path, string text)
{
  var fs = File.Create(path);
  var bytes = Encoding.UTF8.GetBytes(text);
  fs.Write(bytes, 0, bytes.Length);
  return fs;
}
</pre>
—
csharpsquid:S1939ª
csharpsquidS1939(Inheritance list should not be redundant"MINOR*cs:Ô<p>
    An inheritance list entry is redundant if:
    <ul>
        <li>It is <code>Object</code> - all classes extend <code>Object</code> implicitly.</li>
        <li>It is <code>int</code> for an <code>enum</code></li>
        <li>It is a base class of another listed inheritance.</li>
    </ul>
    Such redundant declarations should be removed because they needlessly clutter the code and can be confusing.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass : Object  // Noncompliant

enum MyEnum : int  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass

enum MyEnum
</pre>
≠
csharpsquid:S1994ó
csharpsquidS1994\"for" loop incrementers should modify the variable being tested in the loop's stop condition"MAJOR*cs:ó<p>
It is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i < 10; j++) // Noncompliant
{
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
for (i = 0; i < 10; i++)
{
  // ...
}
</pre>
ã
csharpsquid:S2070ı
csharpsquidS2070;SHA-1 and Message-Digest hash algorithms should not be used"CRITICAL*cs:ì<p>
    The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to
    create hash collisions with them. That is, it takes too little computational effort to come up with a
    different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an
    attacker the same access as if he had the originally-hashed value. This applies as well to the other
    Message-Digest algorithms: MD2, MD4, MD6.
</p>

<p>
    This rule tracks usage of the <code>System.Security.Cryptography.CryptoConfig.CreateFromName()</code>, and <code>System.Security.Cryptography.HashAlgorithm.Create()</code> methods to instantiate MD5 or SHA-1 algorithms, and of derived class instances of <code>System.Security.Cryptography.SHA1</code> and <code>System.Security.Cryptography.MD5</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var hashProvider1 = new MD5CryptoServiceProvider(); //Noncompliant
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("MD5"); //Noncompliant
var hashProvider3 = new SHA1Managed(); //Noncompliant
var hashProvider4 = HashAlgorithm.Create("SHA1"); //Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
var hashProvider1 = new SHA256Managed();
var hashProvider2 = (HashAlgorithm)CryptoConfig.CreateFromName("SHA256Managed");
var hashProvider3 = HashAlgorithm.Create("SHA256Managed");
</pre>

<h2>See</h2>

<ul>
    <li> <a href="http://cwe.mitre.org/data/definitions/328">MITRE, CWE-328</a> - Reversible One-Way Hash</li>
    <li> <a href="http://cwe.mitre.org/data/definitions/327">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>
    <li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
    <li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Porous Defenses</li>
    <li>Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST">MessageDigest Is Weak</a></li>
</ul>
—
csharpsquid:S1871ª
csharpsquidS1871^Two branches in the same conditional structure should not have exactly the same implementation"MAJOR*cs:π<p>
    Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure
    with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for
    both instances, then in an <code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall
    through to the other.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch (i)
{
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doSomething();
    break;
  default:
    doTheRest();
}

if (a >= 0 &amp;&amp; a < 10)
{
  doTheThing();
}
else if (a >= 10 &amp;&amp; a < 20)
{
  doTheOtherThing();
}
else if (a >= 20 &amp;&amp; a < 50)
{
  doTheThing();  // Noncompliant; duplicates first condition
}
else
{
  doTheRest();
}

if (b == 0)
{
  doOneMoreThing();
}
</pre>

<h2>Compliant Solution</h2>
<pre>
switch (i) {
  case 1:
  case 3:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  default:
    doTheRest();
}

if ((a >= 0 &amp;&amp; a < 10) || (a >= 20 &amp;&amp; a < 50))
{
  doTheThing();
}
else if (a >= 10 &amp;&amp; a < 20)
{
  doTheOtherThing();
}
else
{
  doTheRest();
}

doOneMoreThing();
</pre>
or
<pre>
switch (i)
{
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:
    doThirdThing();
    break;
  default:
    doTheRest();
}

if (a >= 0 &amp;&amp; a < 10)
{
  doTheThing();
}
else if (a >= 10 &amp;&amp; a < 20)
{
  doTheOtherThing();
}
else if (a >= 20 &amp;&amp; a < 50)
{
  doTheThirdThing();
}
else
{
  doTheRest();
}
</pre>
∞	
csharpsquid:S3376ö	
csharpsquidS3376VAttribute, EventArgs, and Exception type names should end with the type being extended"MINOR*cs:†<p>
    Adherence to the standard naming conventions makes your code not only more readable, but more usable. For instance,
    <code>class FirstAttribute : Attribute</code> can be used simply with <code>First</code>, but you must use the full
    name for <code>class AttributeOne : Attribute</code>.
</p>
<p>
    This rule raises an issue when classes extending <code>Attribute</code>, <code>EventArgs</code>, or
    <code>Exception</code>, do not end with their parent class names.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class AttributeOne : Attribute  // Noncompliant
{
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class FirstAttribute : Attribute
{
}
</pre>

<h2>Exceptions</h2>
<p>
    If a class' direct base class doesn't follow the convention, then no issue is reported on the class itself, regardless of
    whether or not it conforms to the convention.
</p>
<pre>
class Timeout : Exception // Noncompliant
{
}
class ExtendedTimeout : Timeout // Ignored; doesn't conform to convention, but the direct base doesn't conform either
{
}
</pre>
ó
csharpsquid:S2681Å
csharpsquidS26813Multiline blocks should be enclosed in curly braces"CRITICAL*cs:ß<p>
Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs.
This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

string str = null;
for (int i = 0; i < array.length; i++)
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>

<h2>Compliant Solution</h2>
<pre>
if (condition)
{
  firstActionInBlock();
  secondAction();
}
thirdAction();

string str = null;
for (int i = 0; i < array.length; i++)
{
  str = array[i];
  doTheThing(str);
}
</pre>
ª
csharpsquid:S3253•
csharpsquidS32538"base()" constructor calls should not be explicitly made"MINOR*cs:…<p>
    Since the compiler will automatically invoke the base type's no-argument constructor, there's no need to specify its invocation explicitly. Doing so just clutters the code.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class X
{
  public X()
  {
    /* ... */
  }
}

class Y : X
{
  public Y(int parameter) : base() // Noncompliant
  {
    /* does something with the parameter */
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class X
{
  public X()
  {
    /* ... */
  }
}

class Y : X
{
  public Y(int parameter)
  {
    /* does something with the parameter */
  }
}
</pre>
“
csharpsquid:S3254º
csharpsquidS3254:Default parameter values should not be passed as arguments"MINOR*cs:ﬁ<p>
    Specifying the default parameter values in a method call is redundant. Such values should be omitted in the interests of readability.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void M(int x, int y = 5, int z = 7) { /* ... */ }

// ...
M(1, 5); //Noncompliant, y has the default value
M(1, z: 7); //Noncompliant, z has the default value
</pre>

<h2>Compliant Solution</h2>
<pre>
public void M(int x, int y=5, int z = 7) { /* ... */ }

// ...
M(1);
M(1);
</pre>
¥	
csharpsquid:S1118û	
csharpsquidS11183Utility classes should not have public constructors"MAJOR*cs:«<p>
    Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even
    <code>abstract</code> utility classes, which can be extended, should not have <code>public</code> constructors.
</p>
<p>
    C# adds an implicit public constructor to every class which does not explicitly define at least one constructor. Hence, at
    least one <code>protected</code> constructor should be defined if you wish to subclass this utility class. Or the
    <code>static</code> keyword should be added to the class declaration to prevent subclassing.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class StringUtils // Noncompliant
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public static class StringUtils
{
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
or
<pre>
public class StringUtils
{
  protected StringUtils()
  {
  }
  public static string Concatenate(string s1, string s2)
  {
    return s1 + s2;
  }
}
</pre>
¥
csharpsquid:S2328û
csharpsquidS23281"GetHashCode" should not reference mutable fields"CRITICAL*cs:∆<p>
    <code>GetHashCode</code> is used to file an object in a <code>Dictionary</code> or <code>Hashtable</code>.
    If <code>GetHashCode</code> uses non-<code>readonly</code> fields and those fields change after the object
    is stored, the object immediately becomes mis-filed in the <code>Hashtable</code>. Any subsequent test to
    see if the object is in the <code>Hashtable</code> will return a false negative.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class Person
{
  public int age;
  public string name;

  public override int GetHashCode()
  {
    int hash = 12;
    hash += this.age.GetHashCode(); // Noncompliant
    hash += this.name.GetHashCode(); // Noncompliant
    return hash;
  }
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Person
{
  public readonly DateTime birthday;
  public string name;

  public override int GetHashCode()
  {
    int hash = 12;
    hash += this.birthday.GetHashCode();
    return hash;
  }
</pre>
ˆ
csharpsquid:S1117‡
csharpsquidS1117.Local variables should not shadow class fields"MAJOR*cs:é<p>
    Shadowing fields with a local variable or with a method parameter is a bad practice that
    reduces code readability: It makes it confusing to know whether the field or the variable
    is being used.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
  public int myField;

  public void doSomething()
  {
    int myField = 0;
    ...
  }

  public void doSomethingElse(int myField)
  {
    ...
  }
}
</pre>

<h2>Exceptions</h2>
<p>
    Constructors are exceptions; it is common practice to name arguments for the fields the
    values will be assigned to. Static methods are also excepted.
</p>

<pre>
class Foo {
  public int myField;

  public Foo(int myField)
  {
    this.myField = myField;
  }

  public static Foo build(int myField)
  {
    ...
  }
}
</pre>
Å
csharpsquid:S2326Î
csharpsquidS2326(Unused type parameters should be removed"MAJOR*cs:ü<p>
    Type parameters that aren't used are dead code, which can only distract and possibly confuse
    developers during maintenance. Therefore, unused type parameters should be removed.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
public class MoreMath&lt;T&gt; // Noncompliant; &lt;T&gt;is ignored
{
  public int Add&lt;T&gt;(int a, int b) // Noncompliant; &lt;T&gt; is ignored
  {
    return a + b;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MoreMath
{
  public int Add (int a, int b)
  {
    return a + b;
  }
}
</pre>
ﬁ
csharpsquid:S1479»
csharpsquidS1479;"switch" statements should not have too many "case" clauses"MAJOR*cs:È<p>
  When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.
</p>
ñ
csharpsquid:S1116Ä
csharpsquidS1116"Empty statements should be removed"MINOR*cs:∫<p>
  Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:
  <ul>
    <li>It was meant to be replaced by an actual statement, but this was forgotten.</li>
    <li>There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.</li>
  </ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
void doSomething()
{
  ; // Noncompliant - was used as a kind of TODO marker
}

void doSomethingElse()
{
  Console.WriteLine("Hello, world!");;  // Noncompliant - double ;
  ...
  // Rarely, they are used on purpose as the body of a loop. It is a bad practice to
  // have side-effects outside of the loop body
  for (int i = 0; i < 3; Console.WriteLine(i), i++); // Noncompliant
  ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
void doSomething()
{
}

void doSomethingElse()
{
  Console.WriteLine("Hello, world!");
  ...
  for (int i = 0; i < 3; i++)
  {
    Console.WriteLine(i);
   }
  ...
}
</pre>

<h2>See</h2>

<ul>
    <li>MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.</li>
    <li>MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
Î
csharpsquid:S1643’
csharpsquidS16436Strings should not be concatenated using "+" in a loop"MAJOR*cs:˚<p>
    <code>StringBuilder</code> is more efficient than string concatenation, especially when the operator is repeated over and over as in loops.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
string str = "";
for (int i = 0; i &lt; arrayOfStrings.Length; ++i)
{
  str = str + arrayOfStrings[i];
}
</pre>

<h2>Compliant Solution</h2>

<pre>
StringBuilder bld = new StringBuilder();
for (int i = 0; i &lt; arrayOfStrings.Length; ++i)
{
  bld.Append(arrayOfStrings[i]);
}
string str = bld.ToString();
</pre>
˛
csharpsquid:S1905Ë
csharpsquidS1905"Redundant casts should not be used"MINOR*cs:¢<p>
    Unnecessary casting expressions make the code harder to read and understand.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public int Example(int i)
{
  return (int) (i + 42); // Noncompliant
}
public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
  return coll.Reverse().OfType&lt;int&gt;(); // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public int Example(int i)
{
  return i + 42;
}
public IEnumerable&lt;int&gt; ExampleCollection(IEnumerable&lt;int&gt; coll)
{
  return coll.Reverse();
}
</pre>
ä
csharpsquid:S1764Ù
csharpsquidS1764KIdentical expressions should not be used on both sides of a binary operator"CRITICAL*cs:Ç<p>
Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.
</p>
<p>
This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) // always true
{
  doZ();
}
if ( a != a ) // always false
{
  doY();
}
if ( a == b &amp;&amp; a == b ) // if the first one is true, the second one is too
{
  doX();
}
if ( a == b || a == b ) // if the first one is true, the second one is too
{
  doW();
}

int j = 5 / 5; //always 1
int k = 5 - 5; //always 0
</pre>

<h2>Compliant Solution</h2>
<pre>
doZ();

if ( a == b )
{
  doX();
}
if ( a == b )
{
  doW();
}

int j = 1;
int k = 0;
</pre>

<h2>Exceptions</h2>
Left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.
<pre>
int i = 1 << 1; // Compliant
int j = a << a; // Noncompliant
</pre>

<h2>See</h2>

<ul>
    <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
    <li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
    <li>Rule S1656 - Implements a check on <code>=</code>.</li>
</ul>
æ
csharpsquid:S1125®
csharpsquidS1125(Boolean literals should not be redundant"MINOR*cs:‹<p>
    Redundant Boolean literals should be removed from expressions to improve readability.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (booleanVariable == true) { /* ... */ }
if (booleanVariable != true) { /* ... */ }
if (booleanVariable || false) { /* ... */ }
doSomething(!false);

booleanVariable = condition ? true : exp;
booleanVariable = condition ? false : exp;
booleanVariable = condition ?  exp : true;
booleanVariable = condition ?  exp : false;
booleanVariable = condition ?  true : false;
</pre>

<h2>Compliant Solution</h2>
<pre>
if (booleanVariable) { /* ... */ }
if (!booleanVariable) { /* ... */ }
if (booleanVariable) { /* ... */ }
doSomething(true);

booleanVariable = condition || exp;
booleanVariable = !condition && exp;
booleanVariable = !condition ||  exp;
booleanVariable = condition && exp;
booleanVariable = condition;
</pre>
˙
csharpsquid:S2696‰
csharpsquidS26964Instance members should not write to "static" fields"CRITICAL*cs:â<p>
    Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to
    bugs if there are multiple class instances and/or multiple threads in play.
</p>
<p>
    This rule raises an issue each time a <code>static</code> field is updated from a non-static method or property.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private static int count = 0;

  public void DoSomething()
  {
    //...
    count++;  // Noncompliant
  }
}
</pre>
ë
csharpsquid:S2333˚
csharpsquidS2333%Redundant modifiers should be removed"MINOR*cs:≤<p>
    Unnecessary keywords simply clutter the code and should be removed. Specifically:
    <ul>
        <li><code>virtual</code> on members of classes that are never overridden</li>
        <li><code>partial</code> on type declarations that are completely defined in one place</li>
        <li><code>sealed</code> on members of <code>sealed</code> classes</li>
    </ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
internal partial class MyClass // Noncompliant;
{
  public virtual void DoSomething()  // Noncompliant; virtual is gratuitous
  {
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
internal class MyClass
{
  public void DoSomething()
  {
    // ...
  }
}
</pre>
ı
csharpsquid:S1244ﬂ
csharpsquidS12448Floating point numbers should not be tested for equality"CRITICAL*cs:Ä<p>
    Floating point math is imprecise because of the challenges of storing such values in a binary
    representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code>
    through a series of simple mathematical operations and the answer will be different based on
    the order of those operation because of the rounding that takes place at each step.
</p>
<p>
    Even simple floating point assignments are not simple:
</p>
<pre>
float f = 0.1f; // 0.100000001490116119384765625
double d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625
</pre>

<p>
    (Results will vary based on compiler and compiler settings)
</p>
<p>
    Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on
    <code>float</code> or <code>double</code> values is almost always an error.
</p>
<p>
    This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.
</p>


<h2>Noncompliant Code Example</h2>
<pre>
float myNumber = 3.146f;
if ( myNumber == 3.146f ) //Noncompliant. Because of floating point imprecision, this will be false
{
  // ...
}

if (myNumber &lt;= 3.146f &amp;&amp; mNumber &gt;= 3.146f) // Noncompliant indirect equality test
{
  // ...
}

if (myNumber &lt; 4 || myNumber &gt; 4) // Noncompliant indirect inequality test
{
  // ...
}
</pre>

<h2>See</h2>
<ul>
    <li>MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.</li>
    <li>MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality</li>
</ul>
ø
csharpsquid:S2971©
csharpsquidS2971("IEnumerable" LINQs should be simplified"MAJOR*cs:›<p>
    In the interests of readability, code that can be simplified should be simplified. To that end, there are several
    ways <code>IEnumerable LINQ</code>s can be simplified
</p>
<ul>
    <li>Use <code>OfType</code> instead of using <code>Select</code> with <code>as</code> to type cast elements and then
    null-checking in a query expression to choose elements based on type.</li>
    <li>Use <code>OfType</code> instead of using <code>Where</code> and the <code>is</code> operator, followed by a cast
    in a <code>Select</code></li>
    <li>Use an expression in <code>Any</code> instead of <code>Where(element => [expression]).Any()</code>.</li>
    <li>Use <code>Count</code> instead of <code>Count()</code> when it's available.</li>
    <li>Don't call <code>ToArray()</code> or <code>ToList()</code> in the middle of a query chain.</li>
</ul>

<h2>Noncompliant Code Example</h2>
<pre>
seq1.Select(element => element as T).Any(element => element != null);  // Noncompliant; use OfType
seq2.Select(element => element as T).Any(element => element != null &amp;&amp; CheckCondition(element));  // Noncompliant; use OfType
seq3.Where(element => element is T).Select(element => element as T); // Noncompliant; use OfType
seq4.Where(element => element is T).Select(element => (T)element); // Noncompliant; use OfType
seq.Where(element => [expression]).Any();  // Noncompliant; use Any([expression])
</pre>

<h2>Compliant Solution</h2>
<pre>
seq1.OfType&lt;T&gt;().Any();
seq2.OfType&lt;T&gt;().Any(element => CheckCondition(element));
seq3.OfType&lt;T&gt;();
seq4.OfType&lt;T&gt;();
seq.Any(element => [expression])
</pre>
Ê
csharpsquid:S1121–
csharpsquidS1121:Assignments should not be made from within sub-expressions"MAJOR*cs:Ú<p>
    Assignments within sub-expressions are hard to spot and therefore make the code less readable.
    It is also a common mistake to write <code>=</code> when <code>==</code> was meant.
    Ideally, expressions should should not have side-effects.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
doSomething(i = 42);
</pre>

<h2>Compliant Solution</h2>
<pre>
i = 42;
doSomething(i);
// or
doSomething(i == 42);  // Perhaps in fact the comparison operator was expected
</pre>

<h2>Exceptions</h2>
Assignments inside lambda and delegate expressions are allowed.

<h2>See</h2>
<ul>
    <li>MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>
    <li>MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>
    <li>MISRA C:2012, 13.4 - The result of an assignment operator should not be used</li>
    <li><a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing</li>
</ul>
º
csharpsquid:S2692¶
csharpsquidS26923"IndexOf" checks should not be for positive numbers"CRITICAL*cs:Ã<p>
    Most checks against an <code>IndexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for
    values <code>&gt;0</code> ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a
    value in a <code>string</code>, <code>List</code>, or an array, consider using the <code>Contains</code> method instead.
</p>
<p>
    This rule raises an issue when an <code>IndexOf</code> value retrieved from a <code>string</code>, <code>List</code>,
    or array is tested against <code>&gt;0</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
string color = "blue";
string name = "ishmael";

List&lt;string&gt; strings = new List&lt;string&gt; ();
strings.add(color);
strings.add(name);
string[] stringArray = strings.ToArray();

if (strings.IndexOf(color) &gt; 0) // Noncompliant
{
  // ...
}
if (name.IndexOf("ish") &gt; 0) // Noncompliant
{
  // ...
}
if (name.IndexOf("ae") &gt; 0) // Noncompliant
{
  // ...
}
if (Array.IndexOf(stringArray, color) &gt; 0) // Noncompliant
{
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
string color = "blue";
string name = "ishmael";
List&lt;string&gt; strings = new List&lt;string&gt; ();
strings.add(color);
strings.add(name);
string[] stringArray = strings.ToArray();
if (strings.IndexOf(color) &gt; -1)
{
  // ...
}
if (name.IndexOf("ish") &gt;= 0)
{
  // ...
}
if (name.Contains("ae")
{
  // ...
}
if (Array.IndexOf(stringArray, color) &gt;= 0)
{
  // ...
}
</pre>
æ
csharpsquid:S101©
csharpsquidS1012Class names should comply with a naming convention"MINOR*cs:‘<p>
Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.
This rule allows to check that all class names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^([A-HJ-Z][a-zA-Z0-9]+|I[a-z0-9][a-zA-Z0-9]*|[A-Z][a-zA-Z0-9]+Extensions)$</code>:</p>
<pre>
class my_class {...}
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass {...}
</pre>
†
csharpsquid:S100ã
csharpsquidS1002Method name should comply with a naming convention"MINOR*cs:∂<p>
    Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided
    regular expression.
</p>

<p>The following code:</p>

<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9_]*[a-zA-Z0-9]$</code>:</p>
<pre>
public int doSomething(){...}
</pre>

<p>should be refactored into:</p>

<pre>
public int DoSomething(){...}
</pre>
⁄
csharpsquid:S2330ƒ
csharpsquidS2330#Array covariance should not be used"MAJOR*cs:˝<p>
    Array covariance is the principle that if an implicit or explicit reference conversion exits from type <code>A</code> to
    <code>B</code>, then the same conversion exists from the array type <code>A[]</code> to <code>B[]</code>.
</p>
<p>
    While this array conversion can be useful in readonly situations to pass instances of <code>A[]</code> wherever
    <code>B[]</code> is expected, it must be used with care, since assigning an instance of <code>B</code> into an array of
    <code>A</code> will cause an <code>ArrayTypeMismatchException</code> to be thrown at runtime.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
abstract class Fruit { }
class Apple : Fruit { }
class Orange : Fruit { }

class Program
{
  static void Main(string[] args)
  {
    Fruit[] fruits = new Apple[1]; // Noncompliant - array covariance is used
    FillWithOranges(fruits);
  }

  // Just looking at the code doesn't reveal anything suspicious
  static void FillWithOranges(Fruit[] fruits)
  {
    for (int i = 0; i < fruits.Length; i++)
    {
      fruits[i] = new Orange(); // Will throw an ArrayTypeMismatchException
    }
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
abstract class Fruit { }
class Apple : Fruit { }
class Orange : Fruit { }

class Program
{
  static void Main(string[] args)
  {
    Orange[] fruits = new Orange[1]; // Compliant
    FillWithOranges(fruits);
  }

  static void FillWithOranges(Orange[] fruits)
  {
    for (int i = 0; i < fruits.Length; i++)
    {
      fruits[i] = new Orange();
    }
  }
}
</pre>
∏
csharpsquid:S2737¢
csharpsquidS2737+"catch" clauses should do more than rethrow"MAJOR*cs:”<p>
A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads.
Such clauses should either be eliminated or populated with the appropriate logic.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
string s = "";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e) // Noncompliant
{
  throw;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
string s = "";
try
{
  s = File.ReadAllText(fileName);
}
catch (Exception e)
{
  logger.LogError(e);
  throw;
}
</pre>
or
<pre>
string s = File.ReadAllText(fileName);
</pre>
ﬂ

csharpsquid:S2339…

csharpsquidS2339*Public constant members should not be used"MAJOR*cs:˚	<p>
    Constant members are copied at compile time to the call sites, instead of being fetched at runtime.
</p>
<p>
    As an example, say you have a library with a constant <code>Version</code> member set to <code>1.0</code>, and a
    client application linked to it. This library is then updated and <code>Version</code> is set to <code>2.0</code>.
    Unfortunately, even after the old DLL is replaced by the new one, <code>Version</code> will still be <code>1.0</code>
    for the client application. In order to see <code>2.0</code>, the client application would need to be rebuilt
    against the new version of the library.
</p>
<p>
    This means that you should use constants to hold values that by definition will never change, such as <code>Zero</code>.
    In practice, those cases are uncommon, and therefore it is generally better to avoid constant members.
</p>
<p>
    This rule only reports issues on public constant fields, which can be reached from outside the defining assembly.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Foo
{
    public const double Version = 1.0;           // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public class Foo
{
    public static double Version
    {
      get { return 1.0; }
    }
}
</pre>
˘
csharpsquid:S2219„
csharpsquidS2219A"Type.IsAssignableFrom()" should not be used to check object type"MAJOR*cs:˛<p>
    To check the type of an object there are at least three options:
    <ul>
        <li>The simplest and shortest one uses the <code>expr is SomeType</code> operator</li>
        <li>The slightly longer <code>typeInstance.IsInstanceOfType(expr)</code></li>
        <li>The cumbersome and error-prone one uses <code>expr1.GetType().IsAssignableFrom(expr2.GetType())</code></li>
    </ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
A expr1;
B expr2;
if (expr2.GetType().IsAssignableFrom(expr1.GetType())) { /* ... */ } // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
A expr;
if (expr is MyType) { /* ... */ }
</pre>

or, when the type is not known at compile time:

<pre>
A expr;
Type myType;
if (myType.IsInstanceOfType(expr)) { /* ... */ }
</pre>
°
csharpsquid:S3427ã
csharpsquidS3427AMethod overloads with default parameter values should not overlap"MAJOR*cs:¶<p>
    The rules for method resolution are complex and perhaps not properly understood by all coders. Having overloads with
    optional parameter values make the matter even harder to understand. An overload with default parameter values can be
    hidden by one without the optional parameters.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  void Print(string[] messages) {...}
  void Print(string[] messages, string delimiter = "\n") {...} // Noncompliant; default parameter value is hidden by overload
}

// ...
MyClass myClass = new MyClass();

myClass.Print(new string[3] {"yes", "no", "maybe"});  // which version of Print will be called?
</pre>
˘
csharpsquid:S1481„
csharpsquidS1481(Unused local variables should be removed"MAJOR*cs:ó<p>
If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public int numberOfMinutes(int hours)
{
  int seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public int numberOfMinutes(int hours)
{
  return hours * 60;
}
</pre>

<h2>Exceptions</h2>
<p>
    Unused locally created resources in a <code>using</code> statement are not reported.
</p>
<pre>
using(var t = new Timer()) // t never used, but compliant.
{
  //...
}
</pre>
Ú
csharpsquid:S3262‹
csharpsquidS3262$"params" should be used on overrides"MINOR*cs:î<p>
    Overriding methods automatically inherit the <code>params</code> behavior. To ease readability, this modifier should be explicitly used in
    the overriding method as well.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Base
{
  public virtual void Method(params int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(int[] numbers) // Noncompliant, the params is missing.
  {
    ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Base
{
  public virtual void Method(params int[] numbers)
  {
    ...
  }
}
class Derived : Base
{
  public override void Method(params int[] numbers)
  {
    ...
  }
}
</pre>
¨
csharpsquid:S3263ñ
csharpsquidS3263AStatic fields should appear in the order they must be initialized"BLOCKER*cs:Ø<p>
    Static field initializers are executed in the order in which they appear in the class from top to bottom. Thus,
    placing a static field in a class above the field or fields required for its initialization will yield unexpected
    results.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  public static int X = Y; // Noncompliant; Y at this time is still assigned default(int), i.e. 0
  public static int Y = 42;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  public static int Y = 42;
  public static int X = Y;
}
</pre>
or
<pre>
class MyClass
{
  public static int X;
  public static int Y = 42;

  static MyClass()
  {
    X = Y;
  }
}
</pre>
…
csharpsquid:S2292≥
csharpsquidS2292-Trivial properties should be auto-implemented"MINOR*cs:‚<p>
    Trivial properties, which include no logic but setting and getting a backing field should be converted to auto-implemented
    properties, yielding cleaner and more readable code.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Car
{
  private string _make;
  public string Make // Noncompliant
  {
    get { return _make; }
    set { _make = value; }
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Car
{
  public string Make { get; set; }
}
</pre>
ë
csharpsquid:S2290˚
csharpsquidS2290'Field-like events should not be virtual"CRITICAL*cs:≠<p>
    Field-like events are events that do not have explicit <code>add</code> and <code>remove</code> methods. The compiler
    generates a <code>private</code> <code>delegate</code> field to back the event, as well as generating the implicit
    <code>add</code> and <code>remove</code> methods.
</p>
<p>
    When a <code>virtual</code> field-like <code>event</code> is overridden by another field-like <code>event</code>,
    the behavior of the C# compiler is to generate a new <code>private</code> <code>delegate</code> field in the derived
    class, separate from the parent's field. This results in multiple and separate events being created, which is rarely
    what's actually intended.
</p>
<p>
    To prevent this, remove the <code>virtual</code> designation from the parent class event.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
abstract class Car
{
  public virtual event EventHandler OnRefueled; // Noncompliant

  public void Refuel()
  {
    // This OnRefueld will always be null
     if (OnRefueled != null)
     {
       OnRefueled(this, null);
     }
  }
}

class R2 : Car
{
  public override event EventHandler OnRefueled;
}

class Program
{
  static void Main(string[] args)
  {
    var r2 = new R2();
    r2.OnRefueled += new EventHandler((o, a) =>
    {
      Console.WriteLine("This event will never be called");
    });
    r2.Refuel();
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
abstract class Car
{
  public event EventHandler OnRefueled; // Compliant

  public void Refuel()
  {
    if (OnRefueled != null)
    {
      OnRefueled(this, null);
    }
  }
}

class R2 : Car {}

class Program
{
  static void Main(string[] args)
  {
    var r2 = new R2();
    r2.OnRefueled += new EventHandler((o, a) =>
    {
      Console.WriteLine("This event will be called");
    });
    r2.Refuel();
  }
}
</pre>
⁄

csharpsquid:S2291ƒ

csharpsquidS2291=Overflow checking should not be disabled for "Enumerable.Sum""CRITICAL*cs:‡	<p>
    <code>Enumerable.Sum()</code> always executes addition in a <code>checked</code> context, so an
    <code>OverflowException</code> will be thrown if the value exceeds <code>MaxValue</code> even if an
    <code>unchecked</code> context was specified. Using an <code>unchecked</code> context anyway represents
    a misunderstanding of how <code>Sum</code> works.
</p>
<p>
    This rule raises an issue when an <code>unchecked</code> context is specified for a <code>Sum</code> on
    integer types.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
void Add(List&lt;int&gt; list)
{
  int d = unchecked(list.Sum());  // Noncompliant

  unchecked
  {
    int e = list.Sum();  // Noncompliant
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
void Add(List&lt;int&gt; list)
{
  int d = list.Sum();

  try
  {
    int e = list.Sum();
  }
  catch (System.OverflowException e)
  {
    // exception handling...
  }
}
</pre>

<h2>Exceptions</h2>
<p>
    When the <code>Sum()</code> call is inside a <code>try-catch</code> block, no issues are reported.
</p>

<pre>
void Add(List&lt;int&gt; list)
{
  unchecked
  {
    try
    {
      int e = list.Sum();
    }
    catch (System.OverflowException e)
    {
      // exception handling...
    }
  }
}
</pre>
»
csharpsquid:S3237≤
csharpsquidS3237!"value" parameters should be used"CRITICAL*cs:Í<p>
    In property and indexer <code>set</code> methods, and in event <code>add</code> and <code>remove</code> methods, the implicit
    <code>value</code> parameter holds the value the accessor was called with. Not using the <code>value</code> means that the
    accessor ignores the caller's intent which could cause unexpected results at runtime.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
private int count;
public int Count
{
  get { return count; }
  set { count = 42; } // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>
<pre>
private int count;
public int Count
{
  get { return count; }
  set { count = value; }
}
</pre>
or
<pre>
public int Count
{
  get { return count; }
  set { throw new InvalidOperationException(); }
}
</pre>
∞
csharpsquid:S1697ö
csharpsquidS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"BLOCKER*cs:ù<p>
When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it.
Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is null, leading to a guaranteed null pointer dereference.
</p>

<h2>Noncompliant Code Sample</h2>
<pre>
if (str == null &amp;&amp; str.Length == 0)
{
  Console.WriteLine("String is empty");
}

if (str != null || str.Length > 0)
{
  Console.WriteLine("String is not empty");
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (str == null || str.Length == 0)
{
  Console.WriteLine("String is empty");
}

if (str != null &amp;&amp; str.Length > 0)
{
  Console.WriteLine("String is not empty");
}
</pre>
∆
csharpsquid:S3235∞
csharpsquidS3235(Redundant parentheses should not be used"MINOR*cs:‰<p>
    Redundant parentheses are simply wasted keystrokes, and should be removed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
[MyAttribute()] //Noncompliant
class MyClass
{
  public int MyProperty { get; set; }
  public static MyClass CreateNew(int propertyValue)
  {
    return new MyClass() //Noncompliant
    {
      MyProperty = propertyValue
    };
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
[MyAttribute]
class MyClass
{
  public int MyProperty { get; set; }
  public static MyClass CreateNew(int propertyValue)
  {
    return new MyClass
    {
      MyProperty = propertyValue
    };
  }
}
</pre>
ï	
csharpsquid:S3236ˇ
csharpsquidS3236QMethods with caller info attributes should not be invoked with explicit arguments"MAJOR*cs:ä<p>
    Caller information attributes (<code>CallerFilePathAttribute</code>, <code>CallerLineNumberAttribute</code>, and
    <code>CallerMemberNameAttribute</code>) provide a way to get information about the caller of a method through optional parameters.
    But the arguments for these optional parameters are only generated if they are not explicitly defined in the call. Thus, specifying
    the argument values defeats the purpose of the attributes.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
void TraceMessage(string message,
  [CallerMemberName] string memberName = "",
  [CallerFilePath] string filePath = "",
  [CallerLineNumber] int lineNumber = 0)
{
  /* ... */
}

void MyMethod()
{
  TraceMessage("my message", "MyMethod"); // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
void TraceMessage(string message,
  [CallerMemberName] string memberName = "",
  [CallerFilePath] string filePath = "",
  [CallerLineNumber] int lineNumber = 0)
{
  /* ... */
}

void MyMethod()
{
  TraceMessage("my message");
}
</pre>
√
csharpsquid:S1694≠
csharpsquidS1694@An abstract class should have both abstract and concrete methods"MINOR*cs:…
<p>
    The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be
    implemented by sub-classes.
</p>
<p>
    A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a
    concrete class (i.e. remove the <code>abstract</code> keyword) with a private constructor.
</p>
<p>
    A class with only abstract methods and no inheritable behavior should be converted to an interface.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public abstract class Animal //Noncompliant; should be an interface
{
  abstract void Move();
  abstract void Feed();
}

public abstract class Color //Noncompliant; should be concrete with a private constructor
{
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  public int GetRed()
  {
    return red;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public interface Animal
{
  void Move();
  void Feed();
}

public class Color
{
  private int red = 0;
  private int green = 0;
  private int blue = 0;

  private Color()
  {}

  public int GetRed()
  {
    return red;
  }
}

public abstract class Lamp
{
  private bool switchLamp = false;

  public abstract void Glow();

  public void FlipSwitch()
  {
    switchLamp = !switchLamp;
    if (switchLamp)
    {
      Glow();
    }
  }
}
</pre>
§
csharpsquid:S3234é
csharpsquidS3234I"GC.SuppressFinalize" should not be invoked for types without destructors"MINOR*cs:°<p>
    <code>GC.SuppressFinalize</code> asks the Common Language Runtime not to call the finalizer of an object. This is useful when
    implementing the dispose pattern where object finalization is already handled in <code>IDisposable.Dispose</code>. However, it
    has no effect if there is no finalizer defined in the object's type, so using it in such cases is just confusing.
</p>
<p>
    This rule raises an issue when <code>GC.SuppressFinalize</code> is called for objects of <code>sealed</code> types without a finalizer.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
sealed class MyClass
{
  public void Method()
  {
    ...
    GC.SuppressFinalize(this); //Noncompliant
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
sealed class MyClass
{
  public void Method()
  {
    ...
  }
}
</pre>
ã
csharpsquid:S2387ı
csharpsquidS2387:Child class members should not shadow parent class members"MAJOR*cs:ó<p>
    Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy
    and you'll get confusion at best, chaos at worst. Perhaps even worse is the case where a child class field varies from
    the name of a parent class only by case.
</p>
<p>
    This rule ignores <code>private</code> parent class members, but in all other such cases, the child class field should
    be renamed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripe;  // Noncompliant
  private static Color FLESH; // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Fruit
{
  protected Season ripe;
  protected Color flesh;

  // ...
}

public class Raspberry : Fruit
{
  private bool ripened;
  private static Color FLESH_COLOR;
}
</pre>
†
csharpsquid:S2306ä
csharpsquidS23065"async" and "await" should not be used as identifiers"MAJOR*cs:±<p>
Since C# 5.0, <code>async</code> and <code>await</code> are contextual keywords.
Contextual keywords do have a particular meaning in some contexts, but can still be used as variable names for example.
Keywords, on the other hand, are always reserved, and therefore are not valid variable names.
To avoid any confusion though, it is best to not use <code>async</code> and <code>await</code> as identifiers.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
int await = 42; // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
int someOtherName = 42;
</pre>
›

csharpsquid:S1854«

csharpsquidS1854Dead stores should be removed"MAJOR*cs:Ü
<p>
    A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction.
    Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in
    the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
void calculateRate(int a, int b)
{
  int i;

  i = a + b; // Noncompliant; calculation result not used before value is overwritten
  i = doSomething();  // Noncompliant; retrieved value not used
  for (i = 0; i &lt; 10; i++)
  {
    //  ...
  }
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
void calculateRate(int a, int b)
{
  int i;

  i = doSomething();
  i += a + b;
  storeI(i)

  for (i = 0; i &lt; 10; i++)
  {
    //  ...
  }
}
</pre>

<h2>See</h2>

<ul>
    <li><a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C</a> - Detect and remove unused values</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP</a> - Detect and remove unused values</li>
</ul>
¢

csharpsquid:S1699å

csharpsquidS16995Constructors should only call non-overridable methods"MAJOR*cs:≥	<p>
    Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.
</p>
<p>
    For example:
</p>
<ul>
    <li>The subclass class constructor starts by calling the parent class constructor.</li>
    <li>The parent class constructor calls the method, which has been overridden in the child class.</li>
    <li>
        If the behavior of the child class method depends on fields that are initialized in the child class constructor,
        unexpected behavior (like a <code>NullReferenceException</code>) can result, because the fields aren't initialized yet.
    </li>
</ul>

<h2>Noncompliant Code Example</h2>
<pre>
public class Parent
{
  public Parent()
  {
    DoSomething();  // Noncompliant
  }

  public virtual void DoSomething() // can be overridden
  {
    ...
  }
}

public class Child : Parent
{
  private string foo;

  public Child(string foo) // leads to call DoSomething() in Parent constructor which triggers a NullReferenceException as foo has not yet been initialized
  {
    this.foo = foo;
  }

  public override void DoSomething()
  {
    Console.WriteLine(this.foo.Length);
  }
}
</pre>
Ì
csharpsquid:S1172◊
csharpsquidS1172*Unused method parameters should be removed"MAJOR*cs:â<p>
    Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
void DoSomething(int a, int b) // "b" is unused
{
  Compute(a);
}
</pre>

<h2>Compliant Solution</h2>
<pre>
void DoSomething(int a)
{
  Compute(a);
}
</pre>

<h2>Exceptions</h2>
<p>
    <code>virtual</code>, <code>override</code> methods and interface implementations are ignored.
</p>
<pre>
override void DoSomething(int a, int b) // no issue reported on b
{
  Compute(a);
}
</pre>

<p>
    Furthermore, the <code>this</code> parameter of extension methods is also ignored.
</p>
<pre>
public static class Extensions
{
  public static void MyHelper(this HtmlHelper helper) //no issue reported here
  {
    // no use of helper here
  }
}
</pre>

<h2>See</h2>

<ul>
    <li>MISRA C++:2008, 0-1-11</li>
    <li>MISRA C:2012, 2.7</li>
</ul>
›

csharpsquid:S3249«

csharpsquidS3249WClasses directly extending "Object" should not call "base" in "GetHashCode" or "Equals""CRITICAL*cs:…	<p>
    Making a <code>base</code> call in an overridden method is generally a good idea, but not in <code>GetHashCode</code> and
    <code>Equals</code> for classes that directly extend <code>Object</code> because those methods are based on the object reference.
    Meaning that no two <code>Objects</code> that use those <code>base</code> methods will ever be equal or have the same hash.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Point
{
  private readonly int x;
  public MyClass(int x)
  {
    this.x = x;
  }
  public override int GetHashCode()
  {
    return x.GetHashCode() ^ base.GetHashCode(); //Noncompliant
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class Point
{
  private readonly int x;
  public MyClass(int x)
  {
    this.x = x;
  }
  public override int GetHashCode()
  {
    return x.GetHashCode();
  }
}
</pre>

<h2>Exceptions</h2>
<p>
    This rule doesn't report on guard conditions checking for reference equality.
</p>
<pre>
public class Point
{
  public override bool Equals(object obj)
  {
    if (base.Equals(obj)) // Compliant, although it could be replaced with object.ReferenceEquals(obj, this), which is clearer
    {
      return true;
    }
    ...
  }
}
</pre>
ﬂ

csharpsquid:S2952…

csharpsquidS2952KClasses should "Dispose" of members from the classes' own "Dispose" methods"CRITICAL*cs:◊	<p>
    It is possible in an <code>IDisposable</code> to call <code>Dispose</code> on class members from any method, but the
    contract of <code>Dispose</code> is that it will clean up all unmanaged resources. Move disposing of members to some
    other method, and you risk resource leaks.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void CleanUp()
  {
    this.fs.Dispose(); // Noncompliant; Dispose not called in class' Dispose method
  }

  public void Dispose()
  {
    // method added to satisfy demands of interface
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void Dispose()
  {
    this.fs.Dispose();
  }
}
</pre>

<h2>See</h2>
<ul>
    <li><a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>
</ul>
˙	
csharpsquid:S1862‰	
csharpsquidS1862BRelated "if/else if" statements should not have the same condition"CRITICAL*cs:˚<p>
A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>.
Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce
further bugs as the code is maintained, and obviously it could lead to unexpected behavior.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();
</pre>

<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();
</pre>

<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
«

csharpsquid:S2674±

csharpsquidS26748The length returned from a stream read should be checked"BLOCKER*cs:”	<p>
    You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method with
    the number of bytes requested. Instead, you must check the value returned by the read method to see how many bytes
    were read. Fail to do so, and you introduce a bug that is both harmful and difficult to reproduce.
</p>
<p>
    This rule raises an issue when a <code>Stream.Read</code> or a <code>Stream.ReadAsync</code> method is called, but
    the return value is not checked.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void DoSomething(string fileName)
{
  using (var stream = File.Open(fileName, FileMode.Open))
  {
    var result = new byte[stream.Length];
    stream.Read(result, 0, (int)stream.Length); // Noncompliant
    // ... do something with result
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void DoSomething(string fileName)
{
  using (var stream = File.Open(fileName, FileMode.Open))
  {
    var buffer = new byte[1024];
    using (var ms = new MemoryStream())
    {
        int read;
        while ((read = stream.Read(buffer, 0, buffer.Length)) > 0)
        {
            ms.Write(buffer, 0, read);
        }
        // ... do something with ms
    }
  }
}
</pre>
ó
csharpsquid:S2278Å
csharpsquidS2278GNeither DES (Data Encryption Standard) nor DESede (3DES) should be used"CRITICAL*cs:ì<p>
    According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer
    considered secure:
</p>
<blockquote>
    <p>
        Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn
        because it no longer provides the security that is needed to protect federal government information.
    </p>
    <p>
        Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS
        197 in 2001.
    </p>
</blockquote>

<h2>Noncompliant Code Example</h2>
<pre>
using (var tripleDES = new TripleDESCryptoServiceProvider()) //Noncompliant
{
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
using (var aes = new AesCryptoServiceProvider())
{
  //...
}
</pre>

<h2>See</h2>

<ul>
    <li><a href="http://cwe.mitre.org/data/definitions/326.html">MITRE CWE-326</a> - Inadequate Encryption Strength</li>
    <li><a href="http://cwe.mitre.org/data/definitions/327.html">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm</li>
    <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
    <li>Derived from FindSecBugs rule <a href="http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE">DES / DESede Unsafe</a></li>
</ul>
Ê
csharpsquid:S3246–
csharpsquidS3246@Generic type parameters should be co/contravariant when possible"MAJOR*cs:Ï<p>
    In the interests of making code as usable as possible, interfaces and delegates with generic parameters should use the
    <code>out</code> and <code>in</code> modifiers when possible to make the interfaces and delegates covariant and contravariant,
    respectively.
</p>
<p>
    The <code>out</code> keyword can be used when the type parameter is used only as a return type in the interface or delegate.
    Doing so makes the parameter covariant, and allows interface and delegate instances created with a sub-type to be used as
    instances created with a base type. The most notable example of this is <code>IEnumerable&lt;out T&gt;</code>, which allows
    the assignment of an <code>IEnumerable&lt;string&gt;</code> instance to an <code>IEnumerable&lt;object&gt;</code> variable,
    for instance.
</p>
<p>
    The <code>in</code> keyword can be used when the type parameter is used only as a method parameter in the interface or a
    parameter in the delegate. Doing so makes the parameter contravariant, and allows interface and delegate instances created
    with a base type to be used as instances created with a sub-type. I.e. this is the inversion of covariance. The most notable
    example of this is the <code>Action&lt;in T&gt;</code> delegate, which allows the assignment of an
    <code>Action&lt;object&gt;</code> instance to a <code>Action&lt;string&gt;</code> variable, for instance.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
interface IConsumer&lt;T&gt;  // Noncompliant
{
    bool Eat(T fruit);
}
</pre>

<h2>Compliant Solution</h2>
<pre>
interface IConsumer&lt;in T&gt;
{
    bool Eat(T fruit);
}
</pre>
ﬁ
csharpsquid:S3005»
csharpsquidS30056"ThreadStatic" should not be used on non-static fields"CRITICAL*cs:Î<p>
    When a non-<code>static</code> class field is annotated with <code>ThreadStatic</code>, the code seems to show that the
    field can have different values for different calling threads, but that's not the case, since the <code>ThreadStatic</code>
    attribute is simply ignored on non-<code>static</code> fields.
</p>
<p>
    So <code>ThreadStatic</code> should either be removed or replaced with a use of the <code>ThreadLocal&lt;T&gt;</code> class,
    which gives a similar behavior for non-<code>static</code> fields.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  [ThreadStatic]  // Noncompliant
  private int count = 0;

  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class MyClass
{
  private int count = 0;

  // ...
}
</pre>
or
<pre>
public class MyClass
{
  private readonly ThreadLocal&lt;int&gt; count = new ThreadLocal&lt;int&gt;();
  public int Count
  {
    get { return count.Value; }
    set { count.Value = value; }
  }
  // ...
}
</pre>
‚
csharpsquid:S2551Ã
csharpsquidS2551/Types and "this" should not be used for locking"CRITICAL*cs:ˆ<p>
    Locking on the current object instance (i.e. <code>this</code>), or on a <code>Type</code> object increases the chance
    of deadlocks because any other thread could acquire (or attempt to acquire) the same lock for another unrelated purpose.
</p>
<p>
    Instead, a new, private <code>object</code> should be created and used for the lock.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public void MyLockingMethod()
{
  lock (this) // Noncompliant
  {
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
object lockObj = new object();

public void MyLockingMethod()
{
  lock (lockObj)
  {
    // ...
  }
}
</pre>
è
csharpsquid:S1067˘
csharpsquidS1067%Expressions should not be too complex"MAJOR*cs:∞<p>
The complexity of an expression is defined by the number of <code>&&</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.<br/>
A single expression's complexity should not become too high to keep the code readable.
</p>

<h2>Noncompliant Code Example</h2>
<p>With the default threshold value 3</p>
<pre>
if (((condition1 && condition2) || (condition3 && condition4)) && condition5) { ... }
</pre>

<h2>Compliant Solution</h2>
<pre>
if ( (myFirstCondition() || mySecondCondition()) && myLastCondition()) { ... }
</pre>
Œ	
csharpsquid:S3244∏	
csharpsquidS3244AAnonymous delegates should not be used to unsubscribe from Events"CRITICAL*cs:–<p>
    It is possible to subscribe to events with anonymous delegates, but having done so, it is impossible to unsubscribe from them.
    That's because the process of subscribing adds the delegate to a list. The process of unsubscribing essentially says: remove
    this item from the subscription list. But because an anonymous delegate was used in both cases, the unsubscribe attempt tries
    to remove a different item from the list than was added. The result: <code>NOOP</code>.
</p>
<p>
    Instead, save the delegate to a variable and use the variable to subscribe and unsubscribe.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
listView.PreviewTextInput += (obj,args) =>
        listView_PreviewTextInput(obj,args,listView);

// ...

listView.PreviewTextInput -= (obj, args) =>
        listView_PreviewTextInput(obj, args, listView); // Noncompliant; this delegate was never subscribed
</pre>

<h2>Compliant Solution</h2>
<pre>
EventHandler func = (obj,args) => listView_PreviewTextInput(obj,args,listView);

listView.PreviewTextInput += func;

// ...

listView.PreviewTextInput -= func;
</pre>
Ñ
csharpsquid:S1066Ó
csharpsquidS1066,Collapsible "if" statements should be merged"MAJOR*cs:û<p>
    Merging collapsible <code>if</code> statements increases the code's readability.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (condition1)
{
  if (condition2)
  {
    ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (condition1 &amp;&amp; condition2)
{
  ...
}
</pre>
ê
csharpsquid:S1186˙
csharpsquidS1186Methods should not be empty"MAJOR*cs:ª<p>
There are several reasons for a method not to have a method body:
  <ul>
    <li>It is an unintentional omission, and should be fixed.</li>
    <li>It is not yet, or never will be, supported. In this case an <code>NotSupportedException</code> should be thrown.</li>
    <li>The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.</li>
  </ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public override void DoSomething()
{
}

public override void doSomethingElse()
{
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public override void DoSomething()
{
  // Do nothing because of X and Y.
}

public override void doSomethingElse()
{
  throw new NotSupportedException();
}
</pre>

<h2>Exceptions</h2>
<p>An abstract class' may have empty methods, in order to provide default implementations for child classes.</p>
<pre>
abstract class Animal
{
  public void Speak()
  {
  }
}
</pre>
Ã
csharpsquid:S2275∂
csharpsquidS2275?Format strings should be passed the correct number of arguments"CRITICAL*cs:–<p>
    Use fewer arguments than are expected in your format string, and you'll get an error at runtime. Use more arguments than are
    expected, and you probably won't get the output you expect. Either way, it's a bug.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var s1 = string.Format("{0} {1} {2}", 1, 2); // Noncompliant; too few arguments
var s2 = string.Format("{0}", 10, 11); // Noncompliant; too many arguments
</pre>

<h2>Compliant Solution</h2>
<pre>
// Pass the expected number of arguments
var s1 = string.Format("{0} {1} {2}", 1, 2, 3);
var s2 = string.Format("{0}", 10);
</pre>
or
<pre>
// Fix the format string
var s1 = string.Format("{0} {1}", 1, 2);
var s2 = string.Format("{0} {1}", 10, 11);
</pre>
Û
csharpsquid:S1109›
csharpsquidS1109@A close curly brace should be located at the beginning of a line"MINOR*cs:˘<p>
Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if(condition)
{
  doSomething();}
</pre>

<h2>Compliant Solution</h2>
<pre>
if(condition)
{
  doSomething();
}
</pre>

<h2>Exceptions</h2>
<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered.</p>
<pre>
if(condition) { doSomething(); }
</pre>
Î
csharpsquid:S2955’
csharpsquidS2955VGeneric parameters not constrained to reference types should not be compared to "null""CRITICAL*cs:ÿ<p>
    When constraints have not been applied to restrict a generic type parameter to be a reference type,
    then a value type, such as a <code>struct</code>, could also be passed. In such cases, comparing the
    type parameter to <code>null</code> would always be false, because a <code>struct</code> can
    be empty, but never <code>null</code>. If a value type is truly what's expected, then the comparison should use
    <code>default()</code>. If it's not, then constraints should be added so that no value type can be
    passed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
private bool IsDefault&lt;T&gt;(T value)
{
  if (value == null) // Noncompliant
  {
    // ...
  }
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
private bool IsDefault&lt;T&gt;(T value)
{
  if(object.Equals(value, default(T)))
  {
    // ...
  }
  // ...
}
</pre>
or
<pre>
private bool IsDefault&lt;T&gt;(T value) where T : class
{
  if (value == null)
  {
    // ...
  }
  // ...
}
</pre>
õ	
csharpsquid:S2953Ö	
csharpsquidS2953>Methods named "Dispose" should implement "IDisposable.Dispose""MAJOR*cs:£<p>
    <code>Dispose</code> as a method name should be used exclusively to implement <code>IDisposable.Dispose</code> to prevent
    any confusion.
</p>
<p>
    It may be tempting to create a <code>Dispose</code> method for other purposes, but doing so will result in confusion and
    likely lead to problems in production.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class GarbageDisposal
{
  private int Dispose()  // Noncompliant
  {
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class GarbageDisposal : IDisposable
{
  public void Dispose()
  {
    // ...
  }
}
</pre>
or
<pre>
public class GarbageDisposal
{
  private int Grind()
  {
    // ...
  }
}
</pre>

<h2>Exceptions</h2>
<p>
    Methods named <code>Dispose</code> and invoked from the <code>IDisposable.Dispose</code> implementation are not reported.
</p>
<pre>
public class GarbageDisposal : IDisposable
{
  protected virtual void Dispose(bool disposing)
  {
    //...
  }
  public void Dispose()
  {
    Dispose(true);
    GC.SuppressFinalize(this);
  }
}
</pre>
∏
csharpsquid:S1227¢
csharpsquidS1227;break statements should not be used except for switch cases"MAJOR*cs:√<p>
<code>break;</code> is an unstructured control flow statement which makes code harder to read.
Ideally, every loop should have a single termination condition.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
int i = 0;
while (true)
{
  if (i == 10)
  {
    break;      // Non-Compliant
  }

  Console.WriteLine(i);
  i++;
}
</pre>

<h2>Compliant Solution</h2>

<pre>
int i = 0;
while (i != 10) // Compliant
{
  Console.WriteLine(i);
  i++;
}
</pre>
ê
csharpsquid:S2437˙
csharpsquidS2437,Silly bit operations should not be performed"MAJOR*cs:™<p>
    Certain bit operations are just silly and should not be performed because their results are predictable.
</p>
<p>
    Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will
    <code>anyValue ^ 0</code> and <code>anyValue | 0</code>.
</p>
‹
csharpsquid:S1226∆
csharpsquidS1226@Method parameters and caught exceptions should not be reassigned"MAJOR*cs:‚<p>
    While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.
    This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.
    Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.
    Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.
    All parameters should be treated as <code>readonly</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  public string name;

  public MyClass(string name)
  {
    name = name;                    // Noncompliant - useless identity assignment
  }

  public int Add(int a, int b)
  {
    a = a + b;                      // Noncompliant

    /* additional logic */

    return a;                       // Seems like the parameter is returned as is, what is the point?
  }

  public static void Main()
  {
    MyClass foo = new MyClass();
    int a = 40;
    int b = 2;
    foo.Add(a, b);                  // Variable "a" will still hold 40 after this call
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class MyClass
{
  public string name;

  public MyClass(string name)
  {
    this.name = name;               // Compliant
  }

  public int Add(int a, int b)
  {
    return a + b;                   // Compliant
  }

  public static void Main()
  {
    MyClass foo = new MyClass();
    int a = 40;
    int b = 2;
    foo.Add(a, b);
  }
}
</pre>

<h2>See</h2>
<ul>
    <li>MISRA C:2012, 17.8 - A function parameter should not be modified</li>
</ul>
Ë
csharpsquid:S3240“
csharpsquidS32405The simplest possible condition syntax should be used"MINOR*cs:˘<p>
    In the interests of keeping code clean, the simplest possible conditional syntax should be used. That means using
    the <code>??</code> operator for an assign-if-not-null operator, and using the ternary operator <code>?:</code> for
    assignment to a single variable.
</p>

<h2>Noncompliant Code Sample</h2>
<pre>
object a = null, b = null, x;

if (a != null) // Noncompliant; needlessly verbose
{
  x = a;
}
else
{
  x = b;
}

x = a != null ? a : b; // Noncompliant; better but could still be simplified

x = (a == null) ? new object() : a; // Noncompliant

if (condition) // Noncompliant
{
  x = a;
}
else
{
  x = b;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
object x;

x = a ?? b;
x = a ?? b;
x = a ?? new object();
x = condition ? a : b;
</pre>
ˆ
csharpsquid:S2368‡
csharpsquidS2368@Public methods should not have multidimensional array parameters"MAJOR*cs:¸<p>
    Exposing methods with multidimensional array parameters require developers to have advanced knowledge about the language in
    order to be able to use them. Moreover, what exactly to pass to such parameters is not intuitive. Therefore, such methods
    should not be exposed, but can be used internally.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class Program
{
    public void WriteMatrix(int[][] matrix) // Non-Compliant
    {
    }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
public class Matrix
{
    // ...
}

public class Program
{
    public void WriteMatrix(Matrix matrix) // Compliant
    {
    }
}
</pre>
≠	
csharpsquid:S1313ó	
csharpsquidS1313$IP addresses should not be hardcoded"MAJOR*cs:œ<p>
    Hardcoding an IP address into source code is a bad idea for several reasons:
    <ul>
        <li>
            a recompile is required if the address changes
        </li>
        <li>
            it forces the same address to be used in every environment (dev, sys, qa, prod)
        </li>
        <li>
            it places the responsibility of setting the value to use in production on the shoulders of the developer
        </li>
        <li>
            it allows attackers to decompile the code and thereby discover a potentially sensitive address
        </li>
    </ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var ip = "127.0.0.1";
var address = IPAddress.Parse(ip);
</pre>

<h2>Compliant Solution</h2>
<pre>
var ip = ConfigurationManager.AppSettings["myapplication.ip"];
var address = IPAddress.Parse(ip);
</pre>

<h2>Exceptions</h2>
<p>
    Although "::" is a valid IPv6 address, the rule doesn't report on it.
</p>

<h2>See</h2>

<ul>
    <li> <a href="https://www.securecoding.cert.org/confluence/x/qQCHAQ">CERT, MSC03-J</a> - Never hard code sensitive information</li>
</ul>
†
csharpsquid:S3215ä
csharpsquidS3215:"interface" instances should not be cast to concrete types"MAJOR*cs:¨<p>
    Needing to cast from an <code>interface</code> to a concrete type indicates that something is wrong with the abstractions in
    use, likely that something is missing from the <code>interface</code>. Instead of casting to a discrete type, the missing
    functionality should be added to the <code>interface</code>. Otherwise there is the risk of runtime exceptions.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public interface IMyInterface
{
  void DoStuff();
}

public class MyClass1 : IMyInterface
{
  public int Data { get { return new Random().Next(); } }

  public void DoStuff()
  {
    // TODO...
  }
}

public static class DowncastExampleProgram
{
  static void EntryPoint(IMyInterface interfaceRef)
  {
    MyClass1 class1 = (MyClass1)interfaceRef;  // Noncompliant
    int privateData = class1.Data;

    class1 = interfaceRef as MyClass1;  // Noncompliant
    if (class1 != null)
    {
      // ...
    }
  }
}
</pre>
†
csharpsquid:S3216ä
csharpsquidS3216&"ConfigureAwait(false)" should be used"MAJOR*cs:¿<p>
    After an <code>await</code>ed <code>Task</code> has executed, you can continue execution in the original, calling
    thread or any arbitrary thread. Unless the rest of the code needs the context from which the <oode>Task</oode> was
    spawned, <code>Task.ConfigureAwait(false)</code> should be used to keep execution in the <code>Task</code> thread
    to avoid the need of context switching and the possibility of deadlocks.
</p>
<p>
    This rule raises an issue when code in a class library <code>await</code>s a <code>Task</code> and continues
    execution in the original calling thread.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var response = await httpClient.GetAsync(url);  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
var response = await httpClient.GetAsync(url).ConfigureAwait(false);
</pre>
™
csharpsquid:S2760î
csharpsquidS27604Sequential tests should not check the same condition"MAJOR*cs:º<p>
    When the same condition is checked twice in a row, it is either confusing - why have separate checks? - or an error - some other condition
    should have been checked in the second test.
</p>
<h2>Noncompliant Code Example</h2>
<pre>
if (a == b)
{
  doTheThing(b);
}
if (a == b) // Noncompliant; is this really what was intended?
{
  doTheThing(c);
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (a == b)
{
  doTheThing(b);
  doTheThing(c);
}
</pre>

or

<pre>
if (a == b)
{
  doTheThing(b);
}
if (b == c)
{
  doTheThing(c);
}
</pre>

<h2>Exceptions</h2>
<p>
    Since it is a common pattern to test a variable, reassign it if it fails the test, then re-test it, that pattern is ignored.
</p>
ı
csharpsquid:S1155ﬂ
csharpsquidS1155,"Any()" should be used to test for emptiness"MAJOR*cs:è<p>
    Using <code>.Count()</code> to test for emptiness works, but using <code>.Any()</code> makes the intent clearer,
    and the code more readable.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
private static bool HasContent(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() > 0; // Noncompliant
}
private static bool HasContent2(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() >= 1; // Noncompliant
}
private static bool IsEmpty(IEnumerable&lt;string&gt; strings)
{
  return strings.Count() == 0; // Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
private static bool HasContent(IEnumerable&lt;string&gt; strings)
{
  return strings.Any();
}

private static bool IsEmpty(IEnumerable&lt;string&gt; strings)
{
  return !strings.Any();
}
</pre>
í
csharpsquid:S2123¸
csharpsquidS2123*Values should not be uselessly incremented"CRITICAL*cs:´<p>
    A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public int pickNumber()
{
  int i = 0;
  int j = 0;

  i = i++; // Noncompliant; i is still zero

  return j++; // Noncompliant; 0 returned
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public int pickNumber()
{
  int i = 0;
  int j = 0;

  i++;
  return ++j;
}
</pre>
”
csharpsquid:S2761Ω
csharpsquidS27619Doubled prefix operators "!!" and "~~" should not be used"CRITICAL*cs:›<p>
    Calling the <code>!</code> or <code>~</code> prefix operator twice does nothing: the second invocation undoes the first.
    Such mistakes are typically caused by accidentally double-tapping the key in question without noticing.
</p>
<p>
    Either this is a bug, if the operator was actually meant to be called once, or misleading if done on purpose.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
int v1 = 0;
bool v2 = false;

var v3 = !!v1; // Noncompliant
var v4 = ~~v2; // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
int v1 = 0;
bool v2 = false;

var v3 = !v1;
var v4 = ~v2;
</pre>
–
csharpsquid:S131ª
csharpsquidS131G"switch/Select" statements should end with a "default/Case Else" clause"MAJOR*cs:—<p>
    The requirement for a final <code>default</code> clause is defensive programming. The clause should either take
    appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code>
    covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is
    no guarantee that the <code>enum</code> won't be extended.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
int foo = 42;
switch (foo) // Noncompliant
{
  case 0:
    Console.WriteLine("foo = 0");
    break;
  case 42:
    Console.WriteLine("foo = 42");
    break;
}
</pre>

<h2>Compliant Solution</h2>

<pre>
int foo = 42;
switch (foo) // Compliant
{
  case 0:
    Console.WriteLine("foo = 0");
    break;
  case 42:
    Console.WriteLine("foo = 42");
    break;
  default:
    throw new InvalidOperationException("Unexpected value foo = " + foo);
}
</pre>

<h2>See</h2>

<ul>
    <li>MISRA C:2004, 15.0 - The MISRA C switch syntax shall be used.</li>
    <li>MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>
    <li>MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>
    <li>MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>
    <li>MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>
    <li>MISRA C:2012, 16.4 - Every switch statement shall have a default label</li>
    <li>MISRA C:2012, 16.5 - A default label shall appear as either the first or the last switch label of a switch statement</li>
    <li><a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>
</ul>
±
csharpsquid:S2486õ
csharpsquidS2486 Exceptions should not be ignored"MAJOR*cs:◊<p>
When exceptions occur, it is usually a bad idea to simply ignore them. Instead, it is better to handle them properly, or at least to log them.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
string text = "";
try
{
  text = File.ReadAllText(fileName);
}
catch (Exception exc) // Noncompliant
{
}
</pre>

<h2>Compliant Solution</h2>
<pre>
string text = "";
try
{
  text = File.ReadAllText(fileName);
}
catch (Exception exc)
{
  logger.Log(exc);
}
</pre>

<h2>See</h2>

<ul>
    <li> <a href="http://cwe.mitre.org/data/definitions/391.html">MITRE, CWE-391</a> - Unchecked Error Condition</li>
</ul>
Û
csharpsquid:S3217›
csharpsquidS3217<"Explicit" conversions of "foreach" loops should not be used"MAJOR*cs:˝<p>
    The <code>foreach</code> statement was introduced in the C# language prior to generics. To make it easier to work with
    non-generic collections available at that time such as <code>ArrayList</code>, the <code>foreach</code> statements allows
    to downcast the collection's element of type <code>Object</code> into any other type. The problem is that, to achieve that,
    the <code>foreach</code> statements silently performs <code>explicit</code> type conversion, which at runtime can result in
    an <code>InvalidCastException</code> to be thrown.
</p>
<p>
    New C# code should use generics and not rely on <code>foreach</code> statement's silent <code>explicit</code> conversions.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
ArrayList list = new ArrayList();
list.Add(0);
list.Add(1);
// list.Add("surprise!"); // uncommenting this line will make both foreach below throw an InvalidCastException

foreach (object elementObject in list)
{
  int element = (int)elementObject; // This "explicit" conversion is hidden within the foreach loop
  Console.WriteLine(element);
}

// can be written in an equivalent but shorter way:

foreach (int element in list) // Noncompliant
{
  Console.WriteLine(element);
}
</pre>

<h2>Compliant Solution</h2>
<pre>
List&lt;int&gt; list = new List&lt;int&gt;();
list.Add(0);
list.Add(1);
// list.Add("surprise!"); // uncommenting this line won't compile

foreach (int element in list)
{
  Console.WriteLine(element);
}
</pre>
or
<pre>
ArrayList list = new ArrayList();
list.Add(0);
list.Add(1);
list.Add("surprise!");

foreach (int element in list.OfType&lt;int&gt;())
{
  Console.WriteLine(element);
}
</pre>
˜
csharpsquid:S3218·
csharpsquidS3218JInner class members should not shadow outer class "static" or type members"MAJOR*cs:Û<p>
    It's possible to name the members of an inner class the same as the <code>static</code> members of its enclosing class -
    possible, but a bad idea. That's because maintainers may be confused about which members are being used where. Instead the
    inner class' members should be renamed and all the references updated.
</p>

<h2>Noncompliant Code Sample</h2>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int A; //Noncompliant
    public int MyProp
    {
      get { return A; }  // Returns inner A. Was that intended?
    }
  }
}
</pre>
After a rename
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int B;
    public int MyProp
    {
      get { return A; }  // Still compiles and runs but functionality has changed
    }
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Outer
{
  public static int A;

  public class Inner
  {
    public int InnerA;
    public int MyProp
    {
      get { return InnerA; }
    }
  }
}
</pre>

csharpsquid:S927€
csharpsquidS927-"partial" method parameter names should match"CRITICAL*cs:à<p>
    When the parameters to the implementation of a <code>partial</code> method don't match those
    in the signature declaration, then confusion is almost guaranteed. Either the implementer was
    confused when he renamed, swapped or mangled the parameter names in the implementation, or
    callers will be confused.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
partial class Point
{
  partial void MoveVertically(int z);
}

partial class Point
{
  int x = 0;
  int y = 0;
  int z = 0;

  partial void MoveVertically(int y)  // Noncompliant
  {
    this.y = y;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
partial class Point
{
  partial void MoveVertically(int z);
}

partial class Point
{
  int x = 0;
  int y = 0;
  int z = 0;

  partial void MoveVertically(int z)
  {
    this.z = z;
  }
}
</pre>

<h2>See</h2>

<ul>
    <li>MISRA C:2004, 8.3 - For each function parameter the type given in the declaration and definition shall be identical, and the return types shall also be identical</li>
    <li>MISRA C:2004, 16.4 - The identifiers used in the declaration and definition of a function shall be identical.</li>
    <li>MISRA C++:2008, 8-4-2 - The identifiers used for the parameters in a re-declaration of a function shall be identical to those in the declaration.</li>
    <li>MISRA C:2012, 8.3 - All declarations of an object or function shall use the same names and type qualifiers.</li>
</ul>
ò

csharpsquid:S2360Ç

csharpsquidS2360&Optional parameters should not be used"MAJOR*cs:∏	<p>
    The overloading mechanism should be used in place of optional parameters for several reasons:
    <ul>
        <li>Optional parameter values are baked into the method call site code, thus, if a default value has been changed, all referencing assemblies need to be rebuilt, otherwise the original values will be used.</li>
        <li>The Common Language Specification (CLS) allows compilers to ignore default parameter values, and thus require the caller to explicitly specify the values.</li>
        <li>The concept of optional argument exists only in VB.Net and C#. In all other languages like C++ or Java, the overloading mechanism is the only way to get the same behavior.</li>
        <li>Optional parameters prevent muddying the definition of the function contract. Here is a simple example: if there are two optional parameters, when one is defined, is the second one still optional or mandatory?</li>
    </ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
void Notify(string company, string office = "QJZ") // Noncompliant
{
}
</pre>

<h2>Compliant Solution</h2>

<pre>
void Notify(string company)
{
  Notify(company, "QJZ");
}
void Notify(string company, string office = "QJZ")
{
}
</pre>
ª
csharpsquid:S125¶
csharpsquidS125.Sections of code should not be "commented out""MAJOR*cs:’<p>
    Programmers should not comment out code as it bloats programs and reduces readability.
    Unused code should be deleted and can be retrieved from source control history if required.
</p>

<h2>See</h2>
<ul>
    <li>MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>
    <li>MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>
    <li>MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>
    <li>MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>
</ul>
‚
csharpsquid:S127Õ
csharpsquidS127."for" loop stop conditions should be invariant"MAJOR*cs:¸<p>
    <code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.
</p>
<p>
    Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.
</p>
<p>
    This rule tracks three types of non-invariant stop conditions:
    <ul>
        <li>When the loop counters are updated in the body of the <code>for</code> loop</li>
        <li>When the stop condition depend upon a method call</li>
        <li>When the stop condition depends on an object property, since such properties could change during the execution of the loop.</li>
    </ul>
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
            if (condition)
            {
               i = 20;
           }
        }
    }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Foo
{
    static void Main()
    {
        for (int i = 1; i &lt;= 5; i++)
        {
            Console.WriteLine(i);
        }
    }
}
</pre>

<h2>See</h2>

<ul>
    <li>MISRA C:2004, 13.6 - Numeric variables being used within a for loop for iteration counting shall not be modified in the body of the loop.</li>
    <li>MISRA C++:2008, 6-5-3 - The loop-counter shall not be modified within condition or statement.</li>
</ul>
à

csharpsquid:S3172Ú	
csharpsquidS3172"Delegates should not be subtracted"CRITICAL*cs:©	<p>
    In C#, delegates can be added together to chain their execution, and subtracted to remove their execution from the chain.
</p>
<p>
    Subtracting a chain of delegates from another one might yield unexpected results as shown hereunder - and is likely to be a bug
</p>

<h2>Noncompliant Code Example</h2>
<pre>
MyDelegate first, second, third, fourth;
first = () => Console.Write("1");
second = () => Console.Write("2");
third = () => Console.Write("3");
fourth = () => Console.Write("4");

MyDelegate chain1234 = first + second + third + fourth; // Compliant - chain sequence = "1234"
MyDelegate chain12 = chain1234 - third - fourth; // Compliant - chain sequence = "12"

// The chain sequence of "chain23" will be "1234" instead of "23"!
// Indeed, the sequence "1234" does not contain the subsequence "14", so nothing is subtracted
// (but note that "1234" contains both the "1" and "4" subsequences)
MyDelegate chain23 = chain1234 - (first + fourth); // Noncompliant

chain23(); // will print "1234"!
</pre>

<h2>Compliant Solution</h2>
<pre>
MyDelegate chain23 = chain1234 - first - fourth; // Compliant - "1" is first removed, followed by "4"

chain23(); // will print "23"
</pre>
ó
csharpsquid:S126Ç
csharpsquidS1269"if ... else if" constructs should end with "else" clause"MAJOR*cs:¶<p>
  This rule applies whenever an <code>if</code> statement is followed by one or
  more <code>else if</code> statements, the final <code>else if</code> should be
  followed by an <code>else</code> statement.
</p>

<p>
The requirement for a final <code>else</code> statement is defensive programming.
The <code>else</code> statement should either take appropriate action or contain
a suitable comment as to why no action is taken. This is consistent with the
requirement to have a final <code>default</code> clause in a <code>switch</code>
statement.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0)
{
  doSomething();
} else if (x == 1)
{
  doSomethingElse();
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (x == 0)
{
  doSomething();
} else if (x == 1)
{
  doSomethingElse();
} else
{
  throw new IllegalStateException();
}
</pre>

<h2>See</h2>

<ul>
    <li>MISRA C:2004, 14.10 - All if...else if constructs shall be terminated with an else clause.</li>
    <li>MISRA C++:2008, 6-4-2 - All if...else if constructs shall be terminated with an else clause.</li>
    <li>MISRA C:2012, 15.7 - All if...else if constructs shall be terminated with an else statement</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC64-Java</a> - Strive for logical completeness</li>
</ul>
ã
csharpsquid:S3052ı
csharpsquidS30522Fields should not be initialized to default values"MINOR*cs:ü<p>
    The compiler automatically initializes class fields to their default values before setting them with any initialization
    values, so there is no need to explicitly set a field to its default value. Further, under the logic that cleaner code
    is better code, it's considered poor style to do so.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class X
{
  public int field = 0; // Noncompliant; defaults to 0. Reinitializing incurs minor performance penalty
  public object o = null; //Noncompliant
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class X
{
  public int field;
  public object o;
}
</pre>

<h2>Exceptions</h2>
<code>const</code> fields are ignored.
æ
csharpsquid:S2930®
csharpsquidS2930!"IDisposables" should be disposed"CRITICAL*cs:‡<p>
    You can't rely on garbage collection to clean up everything. Specifically, you can't count on
    it to release non-memory resources such as <code>File</code>s. For that, there's the <code>IDisposable</code>
    interface, and the contract that <code>Dispose</code> will always be called on such objects.
</p>
<p>
    When an <code>IDisposable</code> is a class member, then it's up to that class to call <code>Dispose</code>
    on it, ideally in its own <code>Dispose</code> method. If it's a local variable, then it should be instantiated
    with a <code>using</code> clause to prompt automatic cleanup when it goes out of scope.
</p>
<p>
    This rule raises issues on members that are never <code>Dispose</code>d.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder
{
  private FileStream fs;  // Noncompliant; Dispose is never called
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
  public void WriteToFile(string path, string text)
  {
    var fs = new FileStream(path, FileMode.Open);  // Noncompliant
    var bytes = Encoding.UTF8.GetBytes(text);
    fs.Write(bytes, 0, bytes.Length);
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }

  public void Dispose()
  {
    this.fs.Dispose();
  }

  public void WriteToFile(string path, string text)
  {
    using (var fs = new FileStream(path, FileMode.Open))
    {
      var bytes = Encoding.UTF8.GetBytes(text);
      fs.Write(bytes, 0, bytes.Length);
    }
  }
}
</pre>

<h2>Exceptions</h2>
Local <code>IDisposable</code>s returned from methods are ignored, as are local <code>IDisposable</code>s that are
initialized with non-local <code>IDisposable</code>s.
<pre>
  public Stream WriteToFile(string path, string text)
  {
    var fs = new FileStream(path, FileMode.Open); // Compliant, because it is returned
    var bytes = Encoding.UTF8.GetBytes(text);
    fs.Write(bytes, 0, bytes.Length);
    return fs;
  }

  public void ReadFromStream(Stream s)
  {
    var sr = new StreamReader(s); // Compliant as it would close the underlying stream.
    // ...
  }
</pre>

<h2>See</h2>
<ul>
    <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>
</ul>
‡
csharpsquid:S2376 
csharpsquidS2376(Write-only properties should not be used"MAJOR*cs:˛<p>
    Properties with only setters are confusing and counterintuitive. Instead, a property getter should be added if possible, or
    the property should be replaced with a setter method.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Program
{
    public int Foo  //Non-Compliant
    {
        set
        {
            // ... some code ...
        }
    }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
class Program
{
    public void SetFoo(int value)
    {
        // ... some code ...
    }
}
</pre>
¡
csharpsquid:S3220´
csharpsquidS3220FMethod calls should not resolve ambiguously to overloads with "params""MAJOR*cs:¡<p>
    The rules for method resolution are complex and perhaps not properly understood by all coders. The <code>params</code> keyword can make
    method declarations overlap in non-obvious ways, so that slight changes in the argument types of an invocation can resolve to different
    methods.
</p>
<p>
    This rule raises an issue when an invocation resolves to a method declaration with <code>params</code>, but could also resolve to another
    non-<code>params</code> method too.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class MyClass
{
  private void Format(string a, params object[] b) { }

  private void Format(object a, object b, object c) { }
}

// ...
MyClass myClass = new MyClass();

myClass.Format("", null, null); //Noncompliant, resolves to the first Format with params, but was that intended?
</pre>
©
csharpsquid:S1848ì
csharpsquidS1848JObjects should not be created to be dropped immediately without being used"CRITICAL*cs:¢<p>
There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (x < 0)
  new ArgumentException("x must be nonnegative");
</pre>

<h2>Compliant Solution</h2>
<pre>
if (x < 0)
  throw new ArgumentException("x must be nonnegative");
</pre>
‡
csharpsquid:S1449 
csharpsquidS14491Culture should be specified for String operations"MAJOR*cs:ı<p>
    <code>String.ToLower()</code>, <code>.ToUpper</code>, <code>.Compare</code>, and
    <code>.Equals</code> are all culture-dependent, as are some (floating point number-related) calls to ToString. Fortunately, all have
    variants which accept an argument specifying the culture or formatter to use. Leave that argument off and the call will use the
    system default culture, possibly creating problems with international characters.
</p>
<p>
    Such calls without a culture may work fine in the system's "home" environment, but break in ways that are extremely difficult to
    diagnose for customers who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's
    time to fix them.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var lowered = someString.ToLower(); //Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
var lowered = someString.ToLower(CultureInfo.InvariantCulture);
</pre>
or
<pre>
var lowered = someString.ToLowerInvariant();
</pre>
Â
csharpsquid:S2933œ
csharpsquidS2933EFields that are only assigned in the constructor should be "readonly""MAJOR*cs:Ê<p>
    <code>readonly</code> fields can only be assigned in a class constructor. If a class has a field that's
    not marked <code>readonly</code> but is only set in the constructor, it could cause confusion about the
    field's intended use. To avoid confusion, such fields should be marked <code>readonly</code> to make their
    intended use explicit, and to prevent future maintainers from inadvertently changing their use.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class Person
{
  int _birthYear;  // Noncompliant
  Person(int birthYear)
  {
    _birthYear = birthYear;
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
class Person
{
  readonly int _birthYear;
  Person(int birthYear)
  {
    _birthYear = birthYear;
  }
}
</pre>
Í
csharpsquid:S2934‘
csharpsquidS2934`Property assignments should not be made for "readonly" fields not constrained to reference types"CRITICAL*cs:Õ<p>
    While the properties of a <code>readonly</code> reference type field can still be changed after initialization,
    those of a <code>readonly</code> value field, such as a <code>struct</code>, cannot.
</p>
<p>
    If the member could be either a <code>class</code> or a <code>struct</code> then assignment to its properties
    could be unreliable, working sometimes but not others.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T: IPoint
{
  readonly T point;  // this could be a struct
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX)
  {
    point.X = newX; //Noncompliant; if point is a struct, then nothing happened
    Console.WriteLine(point.X);
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T : IPoint
{
  readonly T point;  // this could be a struct
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX) // assignment has been removed
  {
    Console.WriteLine(point.X);
  }
}
</pre>
or
<pre>
interface IPoint
{
  int X { get; set; }
  int Y { get; set; }
}

class PointManager&lt;T&gt; where T : class, IPoint
{
  readonly T point;  // this can only be a class
  public PointManager(T point)
  {
    this.point = point;
  }

  public void MovePointVertically(int newX)
  {
    point.X = newX;  // this assignment is guaranteed to work
    Console.WriteLine(point.X);
  }
}
</pre>
Ö

csharpsquid:S2931Ô	
csharpsquidS2931AClasses with "IDisposable" members should implement "IDisposable""CRITICAL*cs:á	<p>
    Classes with <code>IDisposable</code> members are responsible for cleaning up those members by calling
    their <code>Dispose</code> methods. The best practice here is for the owning class to itself implement
    <code>IDisposable</code> and call its members' <code>Dispose</code> methods from its own
    <code>Dispose</code> method.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
public class ResourceHolder   // Noncompliant; doesn't implement IDisposable
{
  private FileStream fs;  // This member is never Dispose'd
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public class ResourceHolder : IDisposable
{
  private FileStream fs;
  public void OpenResource(string path)
  {
    this.fs = new FileStream(path, FileMode.Open);
  }
  public void CloseResource()
  {
    this.fs.Close();
  }
  public void Dispose()
  {
    this.fs.Dispose();
  }
}
</pre>

<h2>See</h2>

<ul>
    <li> <a href="http://cwe.mitre.org/data/definitions/459.html">MITRE, CWE-459</a> - Incomplete Cleanup</li>
</ul>
⁄	
csharpsquid:S818≈	
csharpsquidS818%Literal suffixes should be upper case"MINOR*cs:˝<p>
    Using upper case literal suffixes removes the potential ambiguity between "1" (digit 1) and "l" (letter el) for declaring literals.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
const uint a = 0u;      // Noncompliant
const long b = 0l;      // Noncompliant
const ulong c = 0Ul;     // Noncompliant
const ulong d = 0uL;     // Noncompliant
const decimal e = 1.2m;  // Noncompliant
const float f = 1.2f;    // Noncompliant
const double g = 1.2d;    // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
const uint a = 0U;
const long b = 0L;
const ulong c = 0UL;
const ulong d = 0UL;
const decimal e = 1.2M;
const float f = 1.2F;
const double g = 1.2D;
</pre>

<h2>See</h2>
<ul>
    <li>MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case</li>
    <li>MISRA C:2012, 7.3 - The lowercase character "l" shall not be used in a literal suffix</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/koAtAQ">CERT DCL16-C</a> - Use "L," not "l," to indicate a long value</li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/n4AtAQ">CERT DCL16-CPP</a> - Use "L," not "l," to indicate a long value</li>
</ul>
˚
csharpsquid:S2372Â
csharpsquidS23725Exceptions should not be thrown from property getters"MAJOR*cs:å<p>
    Property getters should be simple operations that are always safe to call. If exceptions need to be thrown, it is best to convert the property to a method.
</p>
<p>
    It is valid to throw exceptions from indexed property getters and from property setters, which are not detected by this rule.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
class MyClass
{
  public int Foo
  {
    get
    {
      throw new NotImplementedException();  //Non-Compliant
    }
    set
    {
      // ... some code ...
    }
  }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass
{
  public void SetFoo(int value)
  {
    // ... some code ...
  }
}
</pre>
õ
xml:IllegalTabCheckÉ
xmlIllegalTabCheck(Tabulation characters should not be used"MINOR*xml:¥<p>
  Developers should not need to configure the tab width of their text editors in order to be able to read source code.
  So the use of tabulation character must be banned.
</p>
É
xml:XmlSchemaCheckÏ
xmlXmlSchemaCheckXML schemas should be valid"MAJOR*xml:©<p>
  This rule allows validation of XML files against XML Schema using Xerces parser.
</p>

<p>
  The "schemas" parameter can be set to:
  <ul>
    <li>the namespace or short name of a built-in schema (ex: xhtml1-strict or http://www.w3.org/1999/xhtml)</li>
    <li>the URL to a schema (ex: http://www.springframework.org/schema/beans/spring-beans-3.2.xsd)</li>
    <li>the relative path to a schema on the filesystem (ex: schemas/xsd/mycustomschema.xsd)</li>
  </ul>
  <br/>
  Default value: <code>autodetect</code>. In this case, the parser will try to load the schema based on the doctype or the namespace declaration in the document.
</p>

<p>
  Files to be validated by the schema can be specified through inclusion pattern using the "filePattern" parameter.
</p>

<p>
Built-in schemas:
</p>

<table class="table table-bordered">
<thead class="bordered">
<tr><th>Description</th><th>Namespace or Short name</th><th>Doctype</th></tr>
</thead>
<tbody>
<tr><td>XML</td><td>http://www.w3.org/2001/xml.xsd</td><td>&nbsp;</td></tr>
<tr><td>XML</td><td>http://www.w3.org/XML/1998/namespace</td><td>&nbsp;</td></tr>
<tr><td>XHTML1.0 Strict</td><td>http://www.w3.org/1999/xhtml</td><td>&nbsp;</td></tr>
<tr><td>XHTML1.0 Strict</td><td>xhtml1-strict</td><td>-//W3C//DTD XHTML 1.0 Strict//EN</td></tr>
<tr><td>XHTML1.0 Transitional</td><td>xhtml1-transitional</td><td>-//W3C//DTD XHTML 1.0 Transitional//EN</td></tr>
<tr><td>XHTML1.0 Frameset</td><td>xhtml1-frameset</td><td>-//W3C//DTD XHTML 1.0 Frameset//EN</td></tr>
<tr><td>XHTML1.1</td><td>&nbsp;</td><td>-//W3C//DTD XHTML 1.1 Strict//EN</td></tr>
<tr><td>JSF Core</td><td>http://java.sun.com/jsf/core</td><td>&nbsp;</td></tr>
<tr><td>JSF HTML Basic</td><td>http://java.sun.com/jsf/html</td><td>&nbsp;</td></tr>
<tr><td>JSF Facelets</td><td>http://java.sun.com/jsf/facelets</td><td>&nbsp;</td></tr>
<tr><td>Maven Project Model</td><td>http://maven.apache.org/POM/4.0.0</td><td>&nbsp;</td></tr>
</tbody>
</table>@
≤
xml:XPathCheckü
xml
XPathCheck
XPath rule"MAJOR*xml:Ò<p>
  This rule allows the definition of custom rules using XPath expressions.

<p>
  Issues are created depending on the return value of the XPath expression. If the XPath expression returns:
  <ul>
    <li>a single or list of AST nodes, then a line issue with the given message is created for each node</li>
    <li>a boolean, then a file issue with the given message is created only if the boolean is true</li>
    <li>anything else, no issue is created</li>
  </ul>
</p>

<p>
Here is an example of an XPath expression to log an issue on each 'td' tag using the 'nowrap' deprecated attribute:
<pre>//td[@nowrap]</pre>
</p>@
Ê
xml:NewlineCheck—
xmlNewlineCheck#Newlines should follow each element"MINOR*xml:ä<p>
  Each element should be on a line to itself.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
&lt;parent&gt;&lt;child /&gt;&lt;/parent&gt &lt;!-- Noncompliant --&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
&lt;parent&gt;
  &lt;child /&gt;
&lt;/parent&gt;
</pre>
—
xml:IndentCheckΩ
xmlIndentCheck+Source code should be indented consistently"MINOR*xml:Ô<p>
  Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier.
</p>

<p>
  By default this rule checks that each block of code is indented but not the size of this indent. The parameter "indentSize" allows the expected indent size to be defined. Only the first line of a badly indented section is reported.
</p>
ˆ
	xml:S1778Ë
xmlS1778OXML files containing a prolog header should start first with "<?xml" characters"MAJOR*xml:¸<p>
The prolog header is the following piece of code starting some XML documents:
</p>
<pre>
&lt;?xml version="y.x" encoding="zzzzz"?&gt;
</pre>

<p>
This requirement is explicitly defined in the XML specification:
</p>
<blockquote>
Because each XML entity not accompanied by external encoding information and not in UTF-8 or UTF-16 encoding must begin with an XML encoding declaration, in which the first characters must be '&lt;?xml', any conforming processor can detect, after two to four octets of input, which of the following cases apply.
</blockquote>

<h2>Noncompliant Code Sample</h2>
<pre>
&lt;!-- Generated file --&gt;
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;firstNode&gt;
  content
&lt;/firstNode&gt;
</pre>

<h2>Compliant Solution</h2>
<pre>
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!-- Generated file --&gt;
&lt;firstNode&gt;
  content
&lt;/firstNode&gt;
</pre>
v
Pylint:W0701f
PylintW0701Raising a string exception"MINOR*py2W0701:'Used when a string exception is raised.
Ø
Pylint:W0301û
PylintW0301Unnecessary semicolon"MINOR*py2W0301:dUsed when a statement is ended by a semi-colon (";"), which isn't necessary(that's python, not C ;).
ô
Pylint:F0220à
PylintF0220Failed to resolve interfaces"MAJOR*py2F0220:GUsed when a Pylint as failed to find interfaces implemented by a class.
Œ
Pylint:W1111Ω
PylintW11112Assigning to function call which only returns None"MINOR*py2W1111:fUsed when an assignment is done on a function call but the inferred function returns nothing but None.
„
Pylint:W0142“
PylintW0142Used * or ** magic"MINOR*py2W0142:öUsed when a function or method is called using `*args` or `**kwargs` to dispatch arguments. This doesn't improve readability and should be used with care.
≤
Pylint:W0141°
PylintW0141"Used black listed builtin function"MINOR*py2W0141:ŸUsed when a black listed builtin function is used (see the bad-function option). Usual black listed functions are the ones like map, or filter, where Python offers now some cleaner alternative like list comprehension.
™
Pylint:I0010ô
PylintI0010 Unable to consider inline option"INFO*py2I0010:UUsed when an inline option is either badly formatted or can't be used inside modules.
ì
Pylint:I0011Ç
PylintI0011Locally disabling message"INFO*py2I0011:EUsed when an inline option disables a message or a messages category.
ë
Pylint:I0012Ä
PylintI0012Locally enabling message"INFO*py2I0012:DUsed when an inline option enables a message or a messages category.
y
Pylint:I0013i
PylintI0013Ignoring entire file"INFO*py2I0013:1Used to inform that the file will not be checked.
è
Pylint:E0701˛
PylintE0701Bad except clauses order"MAJOR*py2E0701:¿Used when except clauses are not in the correct order (from the more specific to the more generic). If you don't fix the order, some exceptions may not be catched by the most specific handler.
‡
Pylint:E0702œ
PylintE07026Raising only allowed for classes, instances or strings"MAJOR*py2E0702:tUsed when something which is neither a class, an instance or a string is raised (i.e. a 'TypeError' will be raised).
 
Pylint:E1111π
PylintE1111/Assigning to function call which doesn't return"MAJOR*py2E1111:eUsed when an assignment is done on a function call but the inferred function doesn't return anything.
™
Pylint:C1001ô
PylintC1001Old-style class defined"MINOR*py2C1001:‹<p>Used when a class is defined that does not inherit from another class and does not inherit explicitly from ‚Äúobject‚Äù.
      This message can‚Äôt be emitted when using Python >= 3.0.</p>
      <p>This rule was added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1722'>S1722</a> instead.</p>
Á
Pylint:W0712÷
PylintW0712=Implicit unpacking of exceptions is not supported in Python 3"MINOR*py2W0712:ÛPython3 will not allow implicit unpacking of exceptions in except clauses.
        See http://www.python.org/dev/peps/pep-3110/ This message
        can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>
È
Pylint:W0711ÿ
PylintW07116Exception to catch is the result of a binary operation"MINOR*py2W0711:}Used when the exception to catch is of the form "except A or B:". If intending to catch multiple, rewrite as "except (A, B):"
·
Pylint:W1402–
PylintW1402'Anomalous Unicode escape in byte string"MINOR*py2W1402:ÉUsed when an escape like u is encountered in a byte string where it has no effect.
    <p>This rule was added in Pylint 0.26.0.</p>
”
Pylint:W0710¬
PylintW07109Exception doesn't inherit from standard "Exception" class"MINOR*py2W0710:dUsed when a custom exception class is raised but doesn't inherit from the builtin "Exception" class.
¿
Pylint:W0312Ø
PylintW0312Mixed tabs/spaces indentation"MAJOR*py2W0312:ÏUsed when there are some mixed tabs and spaces in a
               module.
               <p>As indentation is part of Python's syntax,
               inconsistencies in its usage are usually considered a
               major issue.</p>
≠
Pylint:W1401ú
PylintW1401Anomalous backslash escape"MINOR*py2W1401:‹Used when a backslash is in a literal string but not as an escape.
    <p>This rule was added in Pylint 0.26.0.</p>
    <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1717'>S1717</a> instead.</p>
ö
Pylint:W0311â
PylintW0311Bad indentation"MINOR*py2W0311:UUsed when an unexpected number of indentation's tabulations or spaces has been found.
„
Pylint:W1001“
PylintW1001'Use of "property" on an old style class"MINOR*py2W1001:ÖUsed when Pylint detects the use of the builtin "property" on an old style class while this is relying on new style classes features.
™
Pylint:W0150ô
PylintW01500Statement in finally block may swallow exception"MINOR*py2W0150:√Used when a break or a return statement is found inside the finally clause of a try...finally block: the exceptions raised in the try clause will be silently swallowed instead of being re-raised.
·
Pylint:E0712–
PylintE0712DAvoid catching an exception which doesn't inherit from BaseException"MINOR*py2E0712:gUsed when a class which doesn't inherit from BaseException is used as an exception in an except clause.
¥
Pylint:I0001£
PylintI0001-Unable to run raw checkers on built-in module"INFO*py2I0001:RUsed to inform that a built-in module has not been checked using the raw checkers.
®
Pylint:C0303ó
PylintC0303Trailing whitespace"MINOR*py2C0303:ﬁ<p>Used when there is whitespace between the end of a line and the newline.</p>
      <p>Added in Pylint 1.0.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1131'>S1131</a> instead.</p>
∞
Pylint:E0711ü
PylintE07118NotImplemented raised - should raise NotImplementedError"MAJOR*py2E0711:BUsed when NotImplemented is raised instead of NotImplementedError.
¯
Pylint:C0302Á
PylintC0302Too many lines in module"MINOR*py2C0302:©Used when a module has too much lines, reducing its readability.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S104'>S104</a> instead.</p>
œ
Pylint:R0401æ
PylintR0401Cyclic import"MINOR*py2R0401:ãUsed when a cyclic import between two or more modules is detected.
               <p>While cyclic imports terminate and execute without
               surprises in most cases, the circular dependency often indicates a
               design issue in the code base.</p>
ô
Pylint:C0304à
PylintC0304Final newline missing"MINOR*py2C0304:Õ<p>Used when the last line in a file is missing a newline.</p>
               <p>While Python interpreters typically do not require line
               end character(s) on the last line, other programs processing Python
               source files may do, and it is simply good practice to have it.</p>
               <p>Added in Pylint 1.0.0.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S113'>S113</a> instead.</p>
¿
Pylint:E1004Ø
PylintE1004Missing argument to super()"MINOR*py2E1004:oUsed when the super builtin didn't receive an argument. This message can't be emitted when using Python >= 3.0.
«
Pylint:E0710∂
PylintE0710BRaising a new style class which doesn't inherit from BaseException"MAJOR*py2E0710:OUsed when a new style class which doesn't inherit from BaseException is raised.
§
Pylint:E1121ì
PylintE1121/Too many positional arguments for function call"MAJOR*py2E1121:?Used when a function call passes too many positional arguments.
á
Pylint:R0923w
PylintR0923Interface not implemented"MINOR*py2R0923:9Used when an interface class is not implemented anywhere.
´
Pylint:E1122ö
PylintE1122+Duplicate keyword argument in function call"MAJOR*py2E1122:JUsed when a function call passes the same keyword argument multiple times.
ñ
Pylint:E1001Ö
PylintE1001&Use of __slots__ on an old style class"MAJOR*py2E1001::Used when an old style class uses the __slots__ attribute.
ﬂ
Pylint:E1123Œ
PylintE11234Passing unexpected keyword argument in function call"MAJOR*py2E1123:uUsed when a function call passes a keyword argument that doesn't correspond to one of the function's parameter names.
ã
Pylint:E1002{
PylintE1002"Use of super on an old style class"MAJOR*py2E1002:4Used when an old style class uses the super builtin.
é
Pylint:E1124˝
PylintE11245Multiple values passed for parameter in function call"MAJOR*py2E1124:¢Used when a function call would result in assigning multiple values to a function parameter, one value from a positional argument and one from a keyword argument.
π
Pylint:E1003®
PylintE1003!Bad first argument given to super"MAJOR*py2E1003:bUsed when another argument than the current class is given as first argument of the super builtin.
°
Pylint:W0704ê
PylintW0704Except doesn't do anything"MINOR*py2W0704:QUsed when an except clause does nothing but "pass" and there is no "else" clause.
˝
Pylint:W0703Ï
PylintW0703Catching too general exception"MINOR*py2W0703:®Used when an except catches a too general exception, possibly burying unrelated errors.
               <p>Catching exceptions should be as precise as possible. The type of
               exceptions that can be raised should be known in advance. Using a
               catch-all Exception instance defeats the purpose of knowing the type
               of error that occur-ed, and prohibits the use of tailored responses.</p>
ô
Pylint:R0922à
PylintR0922!Abstract class used too few times"MINOR*py2R0922:BUsed when an abstract class is used less than X times as ancestor.
Â
Pylint:R0801‘
PylintR0801Similar lines"MINOR*py2R0801:°Indicates that a set of similar lines has been detected among multiple file. This usually means that the code should be refactored to avoid this duplication.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=common-py:DuplicatedBlocks'>DuplicatedBlocks</a> instead.</p>
ˆ
Pylint:C0301Â
PylintC0301Line too long"MINOR*py2C0301:≤Used when a line is longer than a given number of characters.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:LineLength'>LineLength</a> instead.</p>
Ω
Pylint:W0702¨
PylintW0702No exception type(s) specified"MINOR*py2W0702:ËUsed when an except clause doesn't specify exceptions
               type to catch.
               <p>Catching exceptions should be as precise as
               possible. The type of exceptions that can be raised should be known in
               advance. Using catch-all-constructs hides potential
               errors (including syntax ones), defeats the purpose of
               knowing the type of error that occurred, and prohibits the use of
               tailored responses.</p>
è
Pylint:R0921
PylintR0921Abstract class not referenced"MINOR*py2R0921:=Used when an abstract class is not used as ancestor anywhere.
y
Pylint:E1120i
PylintE1120Too few arguments"MAJOR*py2E1120:3Used when a function call passes too few arguments.
∫
Pylint:W0602©
PylintW0602Unassigned global variable"MINOR*py2W0602:jUsed when a variable is defined through the "global" statement but no assignment to this variable is done.
÷
Pylint:W0601≈
PylintW0601-Global variable undefined at the module level"MINOR*py2W0601:sUsed when a variable is defined through the "global" statement but the variable is not defined in the module scope.
ü
Pylint:W0201é
PylintW0201"Attribute defined outside __init__"MINOR*py2W0201:GUsed when an instance attribute is defined outside the __init__ method.
Ä
Pylint:F0401p
PylintF0401Unable to import module"MAJOR*py2F0401:4Used when Pylint has been unable to import a module.
§
Pylint:F0003ì
PylintF0003Ignored builtin module"MAJOR*py2F0003:XUsed to indicate that the user asked to analyze a builtin module which has been skipped.
ò
Pylint:F0004á
PylintF0004Unexpected inferred value"MAJOR*py2F0004:IUsed to indicate that some value of an unexpected type has been inferred.
µ
Pylint:F0001§
PylintF0001Analysis failed"MAJOR*py2F0001:pUsed when an error occurred preventing the analysis of a
               module (unable to find it for instance).
‚
Pylint:F0002—
PylintF0002Internal Pylint error"MAJOR*py2F0002:ñUsed when an unexpected error occurred while building the ASTNG representation. This is usually accompanied by a traceback. Please report such errors!
s
Pylint:E0602c
PylintE0602Undefined variable"MAJOR*py2E0602:,Used when an undefined variable is accessed.
î
Pylint:E0601É
PylintE0601 Using variable before assignment"MAJOR*py2E0601:>Used when a local variable is accessed before it's assignment.
Ÿ
Pylint:E0604»
PylintE06044Invalid object in __all__, must contain only strings"MINOR*py2E0604:oUsed when an invalid (non-string) object occurs in __all__.
       <p>This rule was added in Pylint 0.27.0.</p>
ñ
Pylint:E0603Ö
PylintE0603"Undefined variable name in __all__"MINOR*py2E0603:>Used when an undefined variable name is referenced in __all__.
¬
Pylint:E0202±
PylintE0202)Method hidden by attribute of super class"MAJOR*py2E0202:cUsed when a class defines a method which is hidden by an instance attribute from an ancestor class.
£
Pylint:E0203í
PylintE0203&Access to member before its definition"MAJOR*py2E0203:GUsed when an instance member is accessed before it's actually assigned.
Í
Pylint:R0913Ÿ
PylintR0913Too many arguments"MINOR*py2R0913:°Used when a function or method takes too many arguments.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S107'>S107</a> instead.</p>
•
Pylint:R0912î
PylintR0912Too many branches"MINOR*py2R0912:›Used when a function or method has too many branches, making it hard to follow.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:FunctionComplexity'>FunctionComplexity</a> instead.</p>
¨
Pylint:C0330õ
PylintC0330Bad continuation"MINOR*py2C0330:f<p>Used when continued lines are badly indented.</p>
      <p>This rule was added in Pylint 1.2.1.</p>
π
Pylint:R0915®
PylintR0915Too many statements"MINOR*py2R0915:pUsed when a function or method has too many statements. You should then split it in smaller functions / methods.
â
Pylint:R0914y
PylintR0914Too many local variables"MINOR*py2R0914:<Used when a function or method has too many local variables.
ì
Pylint:R0911Ç
PylintR0911Too many return statements"MINOR*py2R0911:¬Used when a function or method has too many return statement, making it hard to follow.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1142'>S1142</a> instead.</p>
x
Pylint:W0613h
PylintW0613Unused argument"MINOR*py2W0613:4Used when a function or method argument is not used.
q
Pylint:W0612a
PylintW0612Unused variable"MINOR*py2W0612:-Used when a variable is defined but not used.
w
Pylint:W0611g
PylintW0611Unused import"MINOR*py2W0611:5Used when an imported module or variable is not used.
Ú
Pylint:W1301·
PylintW1301&Unused key in format string dictionary"MINOR*py2W1301:ïUsed when a format string that uses named conversion
      specifiers is used with a dictionary that contains keys not required by the format string.
´
Pylint:W0333ö
PylintW0333Use of the `` operator"MINOR*py2W0333:ﬁUsed when the deprecated "``" (backtick) operator is used instead of the str() function.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:BackticksUsage'>BackticksUsage</a> instead.</p>
ã
Pylint:W0212˙
PylintW0212.Access to a protected member of a client class"MINOR*py2W0212:¶Used when a protected member (i.e. class member with a name beginning with an underscore) is access outside the class or a descendant of the class where it's defined.
Í
Pylint:W0332Ÿ
PylintW0332 Use l as long integer identifier"MINOR*py2W0332:ìUsed when a lower case "l" is used to mark a long integer. You should use an upper case "L" since the letter "l" looks too much like the digit "1".
™
Pylint:W0211ô
PylintW02114Static method with "self" or "cls" as first argument"MINOR*py2W0211:@Used when a static method has "self" or "cls" as first argument.
ﬁ
Pylint:W1300Õ
PylintW1300/Format string dictionary key should be a string"MINOR*py2W1300:yUsed when a format string that uses named conversion specifiers is used with a dictionary whose keys are not all strings.
î
Pylint:W0331É
PylintW0331Use of the <> operator"MINOR*py2W0331:«Used when the deprecated "<>" operator is used instead of "!=".
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:InequalityUsage'>InequalityUsage</a> instead.</p>
∂
Pylint:F0010•
PylintF0010Error while code parsing"MAJOR*py2F0010:hUsed when an exception occurred while building the ASTNG representation which could be handled by ASTNG.
æ
Pylint:C0325≠
PylintC0325Unnecessary parentheses"MINOR*py2C0325:<p>Used when a single item in parentheses follows an if, for, or other keyword.</p>
      <p>This rule was added in Pylint 1.1.0.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1110'>S1110</a> instead.</p>
◊
Pylint:C0204∆
PylintC0204%Metaclass class method first argument"MINOR*py2C0204:˚Used when a metaclass class method has a first argument named differently than the value specified
      in valid-metaclass-classmethod-first-arg option (defaults to "mcs"),
      recommended to easily differentiate them from regular instance methods.
∑
Pylint:E1305¶
PylintE1305$Too many arguments for format string"MAJOR*py2E1305:]Used when a format string that uses unnamed conversion specifiers is given too few arguments.
∫
Pylint:E1306©
PylintE1306&Not enough arguments for format string"MAJOR*py2E1306:^Used when a format string that uses unnamed conversion specifiers is given too many arguments.
Ö
Pylint:C0324u
PylintC0324Comma not followed by a space"MINOR*py2C0324:3Used when a comma (",") is not followed by a space.
æ
Pylint:C0203≠
PylintC02034Metaclass method should have "mcs" as first argument"MINOR*py2C0203:TUsed when a metaclass method has an attribute different the "mcs" as first argument.
Ö
Pylint:C0326Ù
PylintC0326\Wrong number of spaces around an operator, bracket, or comma, or before a block opener colon"MINOR*py2C0326:Ú<p>Used when a wrong number of spaces is used around an operator, bracket, or comma, or before a block opener colon.</p>
        <p>This message belongs to the format checker.</p>
        <p>In Pylint 1.1.0, this message replaced the older whitespace-related messages
        <a href='/coding_rules#rule_key=Pylint:C0322'>C0322</a>, <a href='/coding_rules#rule_key=Pylint:C0323'>C0323</a>, and <a href='/coding_rules#rule_key=Pylint:C0324'>C0324</a>, and now reports some additional situations.</p>
∏
Pylint:E1301ß
PylintE13014Format string ends in middle of conversion specifier"MAJOR*py2E1301:NUsed when a format string terminates before the end of a conversion specifier.
é
Pylint:E0213˝
PylintE0213+Method should have "self" as first argument"MAJOR*py2E0213:¨Used when a method has an attribute different the "self" as first argument. This is considered as an error since this is a so common convention that you shouldn't break it!
–
Pylint:E1302ø
PylintE1302?Mixing named and unnamed conversion specifiers in format string"MAJOR*py2E1302:⁄Used when a format string contains both named (e.g. '%(foo)d') and unnamed (e.g. '%d') conversion specifiers. This is also used when a named conversion specifier contains * for the minimum field width and/or precision.
«
Pylint:E1303∂
PylintE1303"Expected mapping for format string"MAJOR*py2E1303:oUsed when a format string that uses named conversion specifiers is used with an argument that is not a mapping.
p
Pylint:E0611`
PylintE0611Undefined name"MAJOR*py2E0611:-Used when a name cannot be found in a module.
¯
Pylint:E1304Á
PylintE1304'Missing key in format string dictionary"MAJOR*py2E1304:öUsed when a format string that uses named conversion specifiers is used with a dictionary that doesn't contain all the keys required by the format string.
…
Pylint:R0902∏
PylintR0902Too many instance attributes"MINOR*py2R0902:wUsed when class has too many instance attributes, try to reduce this to get a more simple (and so easier to use) class.
∫
Pylint:R0901©
PylintR0901Too many ancestors"MINOR*py2R0901:rUsed when class has too many parent classes, try to reduce this to get a more simple (and so easier to use) class.
ø
Pylint:R0904Æ
PylintR0904Too many public methods"MINOR*py2R0904:rUsed when class has too many public methods, try to reduce this to get a more simple (and so easier to use) class.
Æ
Pylint:E0211ù
PylintE0211Method has no argument"MAJOR*py2E0211:bUsed when a method which should have the bound instance as first argument has no argument defined.
ò
Pylint:R0903á
PylintR0903Too few public methods"MINOR*py2R0903:LUsed when class has too few public methods, so be sure it's really worth it.
™
Pylint:C0321ô
PylintC0321(More than one statement on a single line"MINOR*py2C0321:À<p>Used when more than one statement are found on the same line.</p>
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:OneStatementPerLine'>OneStatementPerLine</a> instead.</p>
∏
Pylint:W0604ß
PylintW0604.Using the global statement at the module level"MINOR*py2W0604:TUsed when you use the "global" statement at the module level since it has no effect.
“
Pylint:C0323¡
PylintC0323 Operator not followed by a space"MINOR*py2C0323:|Used when one of the following operator (!= | <= | == | >= | < | > | = | \+= |-= | \*= | /= | %) is not followed by a space.
Ù
Pylint:C0202„
PylintC02020Class method should have "cls" as first argument"MINOR*py2C0202:çUsed when a class method has an attribute different than "cls" as first argument, to easily differentiate them from regular instance methods.
Ë
Pylint:W0603◊
PylintW0603Using the global statement"MINOR*py2W0603:óUsed when you use the "global" statement to update a global variable. Pylint just tries to discourage this usage. That doesn't mean you can not use it!
“
Pylint:C0322¡
PylintC0322 Operator not preceded by a space"MINOR*py2C0322:|Used when one of the following operator (!= | <= | == | >= | < | > | = | \+= |-= | \*= | /= | %) is not preceded by a space.
¸
Pylint:W0107Î
PylintW0107Unnecessary pass statement"MINOR*py2W0107:´Used when a "pass" statement that can be avoided is encountered.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2772'>S2772</a> instead.</p>
£
Pylint:W0623í
PylintW0623$Redefining name in exception handler"MINOR*py2W0623:IUsed when an exception handler assigns the exception to an existing name.
»
Pylint:W0106∑
PylintW0106!Expression is assigned to nothing"MINOR*py2W0106:qUsed when an expression that is not a function call is assigned to nothing. Probably something else was intended.
}
Pylint:W0622m
PylintW0622Redefining built-in"MINOR*py2W0622:5Used when a variable or function override a built-in.
π
Pylint:W0105®
PylintW0105String statement has no effect"MINOR*py2W0105:‰Used when a string is used as a statement (which of course has no effect). This is a particular case of W0104 with its own message so you can easily disable it if you're using those strings as documentation, instead of comments.
ö
Pylint:W0621â
PylintW0621 Redefining name from outer scope"MINOR*py2W0621:DUsed when a variable's name hides a name defined in the outer scope.
ú
Pylint:W0104ã
PylintW0104!Statement seems to have no effect"MINOR*py2W0104:EUsed when a statement doesn't have (or at least seems to) any effect.
π
Pylint:W0223®
PylintW0223!Abstract method is not overridden"MINOR*py2W0223:bUsed when an abstract method (i.e. raise NotImplementedError) is not overridden in concrete class.
«
Pylint:W0102∂
PylintW0102#Dangerous default value as argument"MINOR*py2W0102:nUsed when a mutable value as list or dictionary is
               detected in a default value for an argument.
≤
Pylint:W0222°
PylintW0222Signature discrepancy"MINOR*py2W0222:gUsed when a method signature is different than in the implemented interface or in an overridden method.
î
Pylint:W0101É
PylintW0101Unreachable code"MINOR*py2W0101:ÕUsed when there is some code behind a "return" or "raise" statement, which will never be accessed.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1763'>S1763</a> instead.</p>
∆
Pylint:W0221µ
PylintW0221Arguments number discrepancy"MINOR*py2W0221:tUsed when a method has a different number of arguments than in the implemented interface or in an overridden method.
é
Pylint:E0503~
PylintE0503Unknown encoding specified"MAJOR*py2E0503:?Used when an encoding is specified, but it's unknown to Python.
‡
Pylint:E0107œ
PylintE0107Use of a non-existent operator"MAJOR*py2E0107:ãUsed when you attempt to use the C-style pre-increment or pre-decrement operator -- and ++, which dont exist in Python.
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:PreIncrementDecrement'>PreIncrementDecrement</a> instead.</p>
∂
Pylint:E0502•
PylintE0502Wrong encoding specified"MAJOR*py2E0502:hUsed when a known encoding is specified but the file
      doesn't seem to be actually in this encoding.
Œ
Pylint:E0106Ω
PylintE0106%Return with argument inside generator"MAJOR*py2E0106:ÚUsed when a "return" statement with an argument is found outside in a generator function or method (e.g. with some "yield" statements).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2712'>S2712</a> instead.</p>
ã
Pylint:E0109{
PylintE0109Missing argument to reversed()"MINOR*py2E0109:8Used when reversed() builtin didn't receive an argument.
‹
Pylint:E0108À
PylintE0108.Duplicate argument name in function definition"MINOR*py2E0108:xDuplicate argument names in function definitions are syntax errors.
        <p>This rule was added in Pylint 0.28.0.</p>
è
Pylint:E0103˛
PylintE01030Usage of 'break' or 'continue' outside of a loop"MAJOR*py2E0103:®Used when break or continue keywords are used outside a loop.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1716'>S1716</a> instead.</p>
á
Pylint:E0102w
PylintE0102Redefined function/class/method"MAJOR*py2E0102:3Used when a function / class / method is redefined.
‚
Pylint:E0501—
PylintE0501>Non-ASCII characters found but no encoding specified (PEP 263)"MAJOR*py2E0501:nUsed when some non-ASCII characters are detected but no
      encoding is specified, as stated in the PEP 263.
¸
Pylint:E0105Î
PylintE0105Yield outside function"MAJOR*py2E0105:ØUsed when a "yield" statement is found outside a function or method.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2711'>S2711</a> instead.</p>
˛
Pylint:E0104Ì
PylintE0104Return outside function"MAJOR*py2E0104:∞Used when a "return" statement is found outside a function or method.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2711'>S2711</a> instead.</p>
“
Pylint:E1310¡
PylintE1310$Suspicious argument in lstrip/rstrip"MINOR*py2E1310:xThe argument to a str.{l,r}strip call contains a duplicate character.
      <p>This rule was added in Pylint 0.28.0.</p>
≥
Pylint:E0222¢
PylintE0222Missing method from interface"MAJOR*py2E0222:`Used when a method declared in an interface is missing from a class implementing this interface.
›
Pylint:E0101Ã
PylintE0101Explicit return in __init__"MAJOR*py2E0101:ãUsed when the special class method __init__ has an
               explicit return value.
               <p>The __init__() method is required to return
               nothing. Python raises a TypeError when __init__() is
               called and executes a return statement with a value other than
               None. Pylint reports this error without depending on the actual
               invocation.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2734'>S2734</a> instead.</p>
£
Pylint:E0221í
PylintE0221%Implemented interface must be a class"MAJOR*py2E0221:HUsed when a class claims to implement an interface which is not a class.
”
Pylint:E0100¬
PylintE0100__init__ method is a generator"MAJOR*py2E0100:˛Used when the special class method __init__ is turned
               into a generator by a yield in its body.
               <p>The __init__() method is required to return nothing. Python 2.7 and 3.x
               raise a TypeError when __init__() is called and executes a yield
               statement. Pylint reports this error without depending on the actual
               invocation.</p>
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2734'>S2734</a> instead.</p>
è
Pylint:C0112˛
PylintC0112Empty docstring"MINOR*py2C0112:…Used when a module, function, class or method has an empty docstring (it would be too easy ;).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1720'>S1720</a> instead.</p>
º
Pylint:C0111´
PylintC0111Missing docstring"MINOR*py2C0111:ÙUsed when a module, function, class or method has no docstring. Some special methods like __init__ doesn't necessary require a docstring.
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1720'>S1720</a> instead.</p>
≤
Pylint:W0614°
PylintW0614"Unused import from wildcard import"MINOR*py2W0614:ZUsed when an imported module or variable is not used from a 'from X import *'style import.
⁄
Pylint:W0633…
PylintW0633#Attempting to unpack a non-sequence"MINOR*py2W0633:ÄUsed when something which is not a sequence is used in an unpack assignment.
        <p>This rule was added in Pylint 1.1.0.</p>
ƒ
Pylint:W0512≥
PylintW0512FSource line cannot be decoded using the specified source file encoding"MINOR*py2W0512:«Used when a source line cannot be decoded using the specified source file encoding.
        This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>
Ã
Pylint:W0632ª
PylintW0632#Possible unbalanced tuple unpacking"MINOR*py2W0632:sUsed when there is an unbalanced tuple unpacking in assignment.
        <p>This rule was added in Pylint 1.1.0.</p>
{
Pylint:W0511k
PylintW0511Task marker found"MINOR*py2W0511:5Used when a warning note as FIXME or XXX is detected.
‡
Pylint:W0631œ
PylintW0631&Using possibly undefined loop variable"MINOR*py2W0631:ÉUsed when an loop variable (i.e. defined by a for loop or a list comprehension or a generator expression) is used outside the loop.
Ï
Pylint:W0234€
PylintW0234__iter__ returns non-iterator"MINOR*py2W0234:òUsed when an __iter__ method returns something which is not an iterable (i.e. has no `next` method).
        <p>This rule was added in Pylint 1.1.0.</p>
⁄
Pylint:W0233…
PylintW02336__init__ method from a non direct base class is called"MINOR*py2W0233:nUsed when an __init__ method is called on a class which is not in the direct ancestors for the analysed class.
ˇ
Pylint:W1201Ó
PylintW1201>Specify string format arguments as logging function parameters"MINOR*py2W1201:äUsed when a logging statement has a call form of
               "logging.<loggingmethod>(format_string % (format_args...))". Such
               calls should leave string interpolation to the logging method itself
               and be written "logging.<loggingmethod>(format_string,
               format_args...)" so that the program may avoid incurring the cost of
               the interpolation in those cases in which no message will be
               logged. For more, see http://www.python.org/dev/peps/pep-0282/.
ó
Pylint:W0232Ü
PylintW0232Class has no __init__ method"MINOR*py2W0232:EUsed when a class has no __init__ method, neither its parent classes.
Í
Pylint:W0199Ÿ
PylintW0199Assert called on a 2-uple"MINOR*py2W0199:öA call of assert on a tuple will always evaluate to true if the tuple is not empty, and will always evaluate to false if it is. Did you mean 'assert x,y'?
Ê
Pylint:W0110’
PylintW01107map/filter on lambda could be replaced by comprehension"MINOR*py2W0110:¯Used when a lambda is the first argument to "map" or "filter".
        It could be clearer as a list comprehension or generator expression. This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 0.27.0.</p>
ƒ
Pylint:W0231≥
PylintW0231-__init__ method from base class is not called"MINOR*py2W0231:aUsed when an ancestor class method has an __init__ method which is not called by a derived class.
¢
Pylint:E1206ë
PylintE1206.Not enough arguments for logging format string"MAJOR*py2E1206:>Used when a logging format string is given too many arguments.
Ê
Pylint:R0201’
PylintR0201Method could be a function"MINOR*py2R0201:ïUsed when a method doesn't use its bound instance, and
               so could be written as a function.
               <p>If the class method does not reference any of the class
               attributes it may be more clear to define the method as a static
               function instead.</p>
         <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2325'>S2325</a> instead.</p>
Î
Pylint:E0238⁄
PylintE0238Invalid __slots__ object"MINOR*py2E0238:úUsed when an invalid __slots__ is found in class. Only a string, an iterable or a sequence is permitted.
        <p>This rule was added in Pylint 1.2.0.</p>
å
Pylint:E0235˚
PylintE02358__exit__ must accept 3 arguments: type, value, traceback"MINOR*py2E0235:ùUsed when the __exit__ special method, belonging to a context manager, does not accept 3 arguments (type, value, traceback).
        <p>This rule was added in Pylint 1.1.0.</p>
        <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S2733'>S2733</a> instead.</p>
Á
Pylint:E0236÷
PylintE0236@Invalid object in __slots__, must contain only non empty strings"MINOR*py2E0236:qUsed when an invalid (non-string) object occurs in __slots__.
        <p>This rule was added in Pylint 1.2.0.</p>
ü
Pylint:E1205é
PylintE1205,Too many arguments for logging format string"MAJOR*py2E1205:=Used when a logging format string is given too few arguments.
¿
Pylint:E1200Ø
PylintE1200$Unsupported logging format character"MAJOR*py2E1200:fUsed when an unsupported format character is used in a
               logging statement format string.
ü
Pylint:E0111é
PylintE0111/The first reversed() argument is not a sequence"MINOR*py2E0111:πUsed when the first argument to reversed() builtin isn't a sequence
      (does not implement __reversed__, nor __getitem__ and __len__
      <p>This rule was added in Pylint 1.2.0.</p>
·
Pylint:E1201–
PylintE1201<Logging format string ends in middle of conversion specifier"MAJOR*py2E1201:oUsed when a logging statement format string terminates
               before the end of a conversion specifier.
ï
Pylint:W0109Ñ
PylintW0109Duplicate key in dictionary"MINOR*py2W0109:DUsed when a dictionary expression binds the same key multiple times.
∑
Pylint:C0103¶
PylintC0103Invalid name"MINOR*py2C0103:ÙUsed when the name doesn't match the regular expression associated to its type (constant, variable, class...).
      <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:S116'>S116</a>, <a href='/coding_rules#rule_key=python:S117'>S117</a>, <a href='/coding_rules#rule_key=python:S101'>S101</a>,
      <a href='/coding_rules#rule_key=python:S100'>S100</a>, <a href='/coding_rules#rule_key=python:S1542'>S1542</a>, <a href='/coding_rules#rule_key=python:S1578'>S1578</a> instead.</p>
∑
Pylint:W0108¶
PylintW0108Lambda may not be necessary"MINOR*py2W0108:ÂUsed when the body of a lambda expression is a function call on the same argument list as the lambda itself; such lambda expressions are in all but a few cases replaceable with the function being called in the body of the lambda.
ç
Pylint:C0102¸
PylintC0102Black listed name"MINOR*py2C0102:≈Used when the name is listed in the black list
               (unauthorized names).
               <p>Pylint can be customized to help enforce coding
               guidelines that discourage or forbid use of certain names for
               variables, functions, etc. These names are specified with the
               bad-names option. This message is raised whenever a name is in the
               list of names defined with the bad-names option.</p>
m
Pylint:W0404]
PylintW0404Reimport"MINOR*py2W0404:0Used when a module is reimported multiple times.
Ü
Pylint:W0403v
PylintW0403Relative import"MINOR*py2W0403:BUsed when an import relative to the package directory is detected.

Pylint:W0402o
PylintW0402Uses of a deprecated module"MINOR*py2W0402:/Used a module marked as deprecated is imported.
Ú
Pylint:F0202·
PylintF0202!Unable to check methods signature"MAJOR*py2F0202:öUsed when Pylint has been unable to check methods signature compatibility for an unexpected reason. Please report this kind if you don't make sense of it.
q
Pylint:W0401a
PylintW0401Wildcard import"MINOR*py2W0401:-Used when `from module import *` is detected.
ª
Pylint:W0123™
PylintW0123Use of eval"MINOR*py2W0123:˘Used when you use the "eval" function, to discourage its usage.
        Consider using `ast.literal_eval` for safely evaluating
        strings containing Python expressions from untrusted sources.
        <p>This rule was added in Pylint 1.2.0.</p>
¿
Pylint:F0321Ø
PylintF0321Format detection error"MAJOR*py2F0321:tUsed when an unexpected error occurred in bad format
               detection. Please report the error if it occurs.
ƒ
Pylint:W0122≥
PylintW0122Use of the exec statement"MINOR*py2W0122:ÙUsed when you use the "exec" statement, to discourage its usage. That doesn't mean you can not use it!
               <p>This rule is deprecated, use <a href='/coding_rules#rule_key=python:ExecStatementUsage'>ExecStatementUsage</a> instead.</p>
¬
Pylint:W0121±
PylintW0121=Use raise ErrorClass(args) instead of raise ErrorClass, args."MINOR*py2W0121:ŒUsed when the alternate raise syntax 'raise foo, bar' is used instead of 'raise foo(bar)'.
        This message can't be emitted when using Python >= 3.0.
        <p>This rule was added in Pylint 1.0.0.</p>
…
Pylint:W0120∏
PylintW0120-Else clause on loop without a break statement"MINOR*py2W0120:ÂLoops should only have an else clause if they can exit early with a break statement,
        otherwise the statements under else should be on the same scope as the loop itself.
        <p>This rule was added in Pylint 0.28.0.</p>
q
Pylint:E0001a
PylintE0001Syntax error"MAJOR*py2E0001:0Used when a syntax error is raised for a module.
˘
Pylint:W1501Ë
PylintW1501Invalid mode for open"MINOR*py2W1501:≠Python supports: r, w, a modes with b, +, and U options.
        See http://docs.python.org/2/library/functions.html#open
        <p>This rule was added in Pylint 1.0.0.</p>
◊
Pylint:W0410∆
PylintW0410:__future__ import is not the first non docstring statement"MINOR*py2W0410:gPython 2.5 and greater require __future__ import to be the first non docstring statement in the module.
ˆ
Pylint:E1103Â
PylintE1103:Accessing nonexistent member (type information incomplete)"MAJOR*py2E1103:ÖUsed when a variable is accessed for an nonexistent member, but Pylint was not able to interpret all possible types of this variable.
é
Pylint:E0011˝
PylintE0011Unrecognized file option"MAJOR*py2E0011:øUsed when an unknown inline option is encountered.
               <p>Note that options can be specified in the
               configuration file and can be overridden on the command line.</p>
å
Pylint:E1101|
PylintE1101Access of nonexistent member"MAJOR*py2E1101:;Used when a variable is accessed for an nonexistent member.
Ü
Pylint:C0121v
PylintC0121Missing required attribute"MINOR*py2C0121:7Used when an attribute required for modules is missing.
ô
Pylint:E1102à
PylintE1102Calling of not callable"MAJOR*py2E1102:LUsed when an object being called has been inferred to a non callable object.
”
Pylint:E0012¬
PylintE0012Bad option value"MAJOR*py2E0012:åUsed when a bad value for an inline option is encountered.
               <p>The option exists but its value is not valid. The options can be
               specified in the Pylint configuration file and can be overridden in
               the Pylint command line.</p>
ñ
Pylint:E9900Ö
PylintE9900Unsupported format character"MAJOR*py2E1300:DUsed when a unsupported format character is used in a format string.
q
Pylint:W0406a
PylintW0406Module imports itself"MINOR*py2W0406:'Used when a module is importing itself.
≠
common-grvy:FailedUnitTestsç
common-grvyFailedUnitTests!Failed unit tests should be fixed"MAJOR*grvy:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.
É
common-grvy:SkippedUnitTests‚
common-grvySkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*grvy:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.
Á
common-grvy:DuplicatedBlocks∆
common-grvyDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*grvy:dAn issue is created on a file as soon as there is at least one block of duplicated code on this file
ë
&common-grvy:InsufficientCommentDensityÊ
common-grvyInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*grvy:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.
÷
$common-grvy:InsufficientLineCoverage≠
common-grvyInsufficientLineCoverage3Lines should have sufficient coverage by unit tests"MAJOR*grvy:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.
·
&common-grvy:InsufficientBranchCoverage∂
common-grvyInsufficientBranchCoverage6Branches should have sufficient coverage by unit tests"MAJOR*grvy:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.
∫
$javascript:MissingNewlineAtEndOfFileë

javascriptMissingNewlineAtEndOfFile1Files should contain an empty new line at the end"MINOR*js:©<p>Some tools such as Git work better when files end with an empty line.</p>
<p>This rule simply generates an issue if it is missing.</p>
<p>For example, a Git diff look like:</p>
<pre>
+class Test {
+}
\ No newline at end of file
</pre>
<p>if the empty line is missing at the end of the file.</p>
˝
javascript:S1135Ë

javascriptS1135"TODO" tags should be handled"INFO*js:©<p>
  <code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.
</p>
<p>
  Sometimes the developer will not have the time or will simply forget to get back to that tag.
  This rule is meant to track those tags, and ensure that they do not go unnoticed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
function doSomething() {
  // TODO
}
</pre>
’
javascript:S1134¿

javascriptS1134"FIXME" tags should be handled"MAJOR*js:ˇ<p>
  <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.
</p>
<p>
  Sometimes the developer will not have the time or will simply forget to get back to that tag.
  This rule is meant to track those tags, and ensure that they do not go unnoticed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
function divide(numerator, denominator) {
  return numerator / denominator;              // FIXME denominator value might be  0
}
</pre>
Å
javascript:S2508Ï

javascriptS25088The names of model properties should not contains spaces"CRITICAL*js:é<p>
  When using the Backbone.js framework, the names of model attributes should not contain spaces. This is because the Events object accepts space-delimited lists of events, so an attributes with spaces in the names could be misinterpreted.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
Person = Backbone.Model.extend({
        defaults: {
            'first name': 'Bob',      // Noncompliant
            'birth date': new Date()  // Noncompliant
        },
    });
</pre>

<h2>Compliant Solution</h2>
<pre>
Person = Backbone.Model.extend({
        defaults: {
            firstName: 'Bob',
            birthDate: new Date()
        },
    });
</pre>
ø
javascript:ConditionalCommentù

javascriptConditionalComment;Internet Explorer's conditional comments should not be used"MAJOR*js:≤<p>
  Internet Explorer offers a way to change the JavaScript code at runtime using conditional comments (activated by a @cc_on statement found in a comment). Using this preprocessing feature decreases readability and maintainability, and can hinder automated tools. What's more, it is specific to Internet Explorer and won't work for other browsers.
</p>

</p>
  Most of the time, using those conditional comments can be easily avoided with some refactoring - using modern cross-browsers JavaScript frameworks and libraries.
  The following code snippet illustrates the use of conditional comments:
</p>

<h2>Noncompliant Code Example</h2>
<pre>
/*@cc_on
  @if (@_jscript_version >= 5.5)
    document.write("You are using IE5.5 or newer");
  @else
    document.write("You are using IE5 or older");
  @end
  @*/
</pre>
È
)javascript:BoundOrAssignedEvalOrArgumentsª

javascriptBoundOrAssignedEvalOrArguments6"eval" and "arguments" should not be bound or assigned"CRITICAL*js:∆
<p>In JavaScript, <code>eval</code> is used to evaluate a string as JavaScript code, and <code>arguments</code> is used to access function arguments through indexed properties.
  As a consequence, <code>eval</code> and <code>arguments</code> should not be bound or assigned, because doing so would overwrite the original definitions of those two reserved words. </p>

<p>What's more, using either of those two names to assign or bind will generate an error in JavaScript strict mode code.</p>
<h2>Noncompliant Code Example</h2>

<pre>
eval = 17; // Noncompliant
arguments++; // Noncompliant
++eval; // Noncompliant
var obj = { set p(arguments) { } }; // Noncompliant
var eval; // Noncompliant
try { } catch (arguments) { } // Noncompliant
function x(eval) { } // Noncompliant
function arguments() { } // Noncompliant
var y = function eval() { }; // Noncompliant
var f = new Function("arguments", "return 17;"); // Noncompliant

function fun() {
  if (arguments.length == 0) { // Compliant
    // do something
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
result = 17;
args++;
++result;
var obj = { set p(arg) { } };
var result;
try { } catch (args) { }
function x(arg) { }
function args() { } 
var y = function fun() { }; 
var f = new Function("args", "return 17;");

function fun() {
  if (arguments.length == 0) {
    // do something
  }
}
</pre>
†	
(javascript:VariableDeclarationAfterUsageÛ

javascriptVariableDeclarationAfterUsage1Variables should be declared before they are used"MAJOR*js:á<p>One of the biggest sources of confusion for JavaScript beginners is scoping. The reason scoping is so confusing in JavaScript is because JavaScript looks like a C-family language but doesn't act like one. C-family languages have block-level scope, meaning that when control enters a block, such as an <code>if</code> statement, new variables can be declared within that scope without affecting the outer scope. However, this is not the case in JavaScript.</p>
<p>To minimize confusion as much as possible, variables should always be declared before they are used.</p>
<h2>Noncompliant Code Example</h2>

<pre>
var x = 1;

function fun(){
  alert(x); // Noncompliant as x is declared later in the same scope
  if(something) {
    var x = 42; // Declaration in function scope (not block scope!) shadows global variable
  }
}

fun(); // Unexpectedly alerts "undefined" instead of "1"
</pre>
<h2>Compliant Solution</h2>

<pre>
var x = 1;

function fun() {
  print(x);
  if (something) {
    x = 42;
  }
}

fun(); // Print "1"
</pre>
Ã
javascript:ParsingError∞

javascriptParsingErrorJavaScript parser failure"MAJOR*js:Ì<p>When the JavaScript parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>
—
javascript:LineLength∑

javascript
LineLengthLines should not be too long"MINOR*js:t<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>
û
javascript:S1656â

javascriptS1656%Variables should not be self-assigned"MAJOR*js:¡<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>

<h2>Noncompliant Code Example</h2>
<pre>
function setName(name) {
    name = name;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
function setName(name) {
    this.name = name;
}
</pre>

<h2>See</h2>
<ul>
<li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
<li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
∆
javascript:S2228±

javascriptS2228"Console logging should not be used"MAJOR*js:Ï<p>
  Debug statements are always useful during development. But include them in production code - particularly in code that runs client-side - and you run the risk of inadvertently exposing sensitive information, slowing down the browser, or even erroring-out the site for some users. (Not all browsers support <code>console.log()</code>).
</p>

<h2>Noncompliant Code Example</h2>
<pre>
console.log(password_entered); // Noncompliant
</pre>

<h2>See</h2>

<ul>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure </li>
</ul>
≠
'javascript:TooManyBreakOrContinueInLoopÅ

javascriptTooManyBreakOrContinueInLoopKLoops should not contain more than a single "break" or "continue" statement"MAJOR*js:¸<p>
  Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.
</p>

<p>
  One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.
</p>

<h2>Noncompiant Code Example</h2>
<pre>
for (var i = 1; i <= 10; i++) {  // Noncompliant - 2 continue - one might be tempted to add some logic in between
  if (i % 2 == 0) {
    continue;
  }

  if (i % 3 == 0) {
    continue;
  }

  alert("i = " + i);
}
</pre>
Ÿ
javascript:S905≈

javascriptS9059Non-empty statements should have at least one side-effect"CRITICAL*js:Á<p>An expression statement without side effects, such as a comparison without assigning its result to a variable, is useless, and must have been a mistake on the developer's part.</p>

<h2>Noncompliant code example</h2>

<pre>
var str = "long string split on multiple lines but" // without concatenation operator, statement implicitly ends at the linebreak
  " the concatenation operator + is missing";  // Noncompliant

a == 1;   // Noncompliant; was assignment intended?
</pre>

<h2>See</h2>
<ul><li><a href="http://cwe.mitre.org/data/definitions/482">MITRE, CWE-482</a> - Comparing instead of Assigning</li></ul>
ﬁ
javascript:S3271…

javascriptS3271 Local storage should not be used"CRITICAL*js:É<p>Session storage and local storage are HTML 5 features which allow developers to easily store megabytes of data client-side, as opposed to the 4Kb cookies can accommodate. While useful to speed applications up on the client side, it can be dangerous to store sensitive information this way because the data is not encrypted by default and any script on the page may access it.</p>
<p>This rule raises an issue when the <code>localStorage</code> and <code>sessionStorage</code> API's are used.</p>
<h2>Noncompliant Code Example</h2>

<pre>
localStorage.setItem("login", login); // Noncompliant
sessionStorage.setItem("sessionId", sessionId); // Noncompliant
</pre>
<h2>See</h2>

<ul>
<li> <a href="https://dl.packetstormsecurity.net/papers/attack/HTML5AttackVectors_RafayBaloch_UPDATED.pdf">Packet Storm Security</a> - HTML 5 Modern Day Attack And Defence Vectors
</li><li> <a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure
</li></ul>
Â
javascript:S104—

javascriptS104$Files should not have too many lines"MAJOR*js:ã<p>
  A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</br>
  Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</br>
  Those smaller files will not only be easier to understand but also probably easier to test.
</p>
ô
javascript:S1301Ñ

javascriptS13019"switch" statements should have at least 3 "case" clauses"MINOR*js:®<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>
<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>
<h2>Noncompliant Code Example</h2>

<pre>
switch (variable) {
  case 0:
    doSomething();
    break;
  default:
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
if (variable == 0) {
  doSomething();
} else {
  doSomethingElse();
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.</li>
<li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.</li>
<li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses</li>
</ul>
Ó
javascript:Parentheses”

javascriptParenthesesXUseless parentheses around expressions should be removed to prevent any misunderstanding"MAJOR*js:“<p>Useless parentheses can sometimes be misleading and so should be removed. </p>
<p>The following code snippet illustrates this rule:</p>
<pre>
return 3;             // Compliant
return (x);           // Non-Compliant
return (x + 1);       // Non-Compliant
int x = (y / 2 + 1);  // Non-Compliant
int y = (4+X) * y;    // Compliant
</pre>
‘
javascript:S2234ø

javascriptS22340Parameters should be passed in the correct order"BLOCKER*js:Í<p>When the names of arguments in a function call match the names of the function parameters, it contributes to clearer, more readable code. However, when the names match, but are passed in a different order than the function parameters, it indicates a mistake in the parameter order which will likely lead to unexpected results.</p>

<h2>Noncompliant Code Example</h2>
<pre>
function divide(var divisor, var dividend) {
  return divisor/dividend;
}

function doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
function divide(var divisor, var dividend) {
  return divisor/dividend;
}

public void doTheThing() {
  var divisor = 15;
  var dividend = 5;

  var result = divide(divisor, dividend);
  //...
}
</pre>
Ã
javascript:S1145∑

javascriptS1145FUseless "if(true) {...}" and "if(false){...}" blocks should be removed"MAJOR*js:Œ
<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>
<p>There are three possible causes for the presence of such code: </p>
<ul>
<li> An if statement was changed during debugging and that debug code has been committed.</li>
<li> Some value was left unset.</li>
<li> Some logic is not doing what the programmer thought it did.</li>
</ul>
<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (true) {  // Noncompliant
  doSomething();
}
...
if (false) {  // Noncompliant
  doSomethingElse();
}

if (!options || options === true) { doThirdThing(); }  // Noncompliant; always true
</pre>
<h2>Compliant Solution</h2>

<pre>
doSomething();

doThirdThing();
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>
<li> <a href="http://cwe.mitre.org/data/definitions/570.html">MITRE, CWE-570</a> - Expression is Always False</li>
<li> <a href="http://cwe.mitre.org/data/definitions/571.html">MITRE, CWE-571</a> - Expression is Always True</li>
<li> MISRA C:2004, 13.7</li>
<li> MISRA C:2012, 14.3</li>
</ul>
∏	
javascript:S2870£	

javascriptS2870%"delete" should not be used on arrays"CRITICAL*js:ÿ<p>
  The <code>delete</code> operator can be used to remove a property from any object. Arrays are objects, so the <code>delete</code> operator can be used here too,
  but if it is, a hole will be left in the array because the indexes/keys won't be shifted to reflect the deletion.
</p>

<p>The proper method for removing an element at a certain index would be:</p>

<ul>
  <li><code>Array.prototype.splice</code> - add/remove elements from the the array</li>
  <li><code>Array.prototype.pop</code> - add/remove elements from the end of the array</li>
  <li><code>Array.prototype.shift</code> - add/remove elements from the beginning of the array</li>
</ul>

<h2>Noncompliant Code Example</h2>

<pre>
var myArray = ['a', 'b', 'c', 'd'];

delete myArray[2];  // Noncompliant. myArray => ['a', 'b', undefined, 'd']
console.log(myArray[2]); // expected value was 'd' but output is undefined
</pre>

<h2>Compliant Solution</h2>

<pre>
var myArray = ['a', 'b', 'c', 'd'];

// removes 1 element from index 2
removed = myArray.splice(2, 1);  // myArray => ['a', 'b', 'd']
console.log(myArray[2]); // outputs 'd'
</pre>
‘
javascript:S1264ø

javascriptS12645A "while" loop should be used instead of a "for" loop"MINOR*js:Á<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability. </p>

<h2>Noncompliant Code Example</h2>
<pre>
for (;condition;) { /*...*/ }
</pre>


<h2>Compliant Solution</h2>
<pre>
while (condition) { /*...*/ }
</pre>
£
javascript:S2990é

javascriptS2990+The global "this" object should not be used"CRITICAL*js:Ω<p>
  When the keyword <code>this</code> is used outside of an object, it refers to the global <code>this</code> object,
  which is the same thing as the <code>window</code> object in a standard web page. Clearly, such a misdirected usage
  could have unintended consequences, as well as being confusing to maintainers. Instead, simply drop the <code>this</code>;
  it will have the same effect.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
this.foo = 1;   // Noncompliant
console.log(this.foo); // Noncompliant

function MyObj() {
  this.foo = 1; // Compliant
}

MyObj.func1 = function() {
  if (this.foo == 1) { // Compliant
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
foo = 1;
console.log(foo);

function MyObj() {
  this.foo = 1;
}

MyObj.func1 = function() {
  if (this.foo == 1) {
    // ...
  }
}
</pre>
¨
javascript:S881ò

javascriptS881~Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression"MAJOR*js:¯<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>
<ul>
  <li> It can significantly impair the readability of the code.
  </li><li> It introduces additional side effects into a statement, with the potential for undefined behavior.
</li><li> It is safer to use these operators in isolation from any other arithmetic operators.
</li></ul>

<h2>Noncompliant Code Example</h2>
<pre>
u8a = ++u8b + u8c--;
foo = bar++ / 4;
</pre>

<h2>Compliant Solution</h2>
<p>The following sequence is clearer and therefore safer:</p>
<pre>
++u8b;
u8a = u8b + u8c;
u8c--;
foo = bar / 4;
bar++;
</pre>

<h2>See</h2>
<ul>
  <li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions.
  </li><li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.
</li><li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression.
</li><li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit
</li><li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that cause by the increment or decrement operator
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/ZwE">CERT, EXP30-C</a> -      Do not depend on the order of evaluation for side effects
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/fYAyAQ">CERT, EXP30-CPP</a> - Do not depend on order of evaluation between sequence points
</li><li> <a href="https://www.securecoding.cert.org/confluence/x/yQC7AQ">CERT, EXP05-J</a> - Do not follow a write by a subsequent write or read of the same object within an expression
</li></ul>
ò
javascript:S2999É

javascriptS2999-"new" operators should be used with functions"CRITICAL*js:∞<p>
  The <code>new</code> keyword should only be used with objects that define a constructor function. Use it with anything else, and you'll get a <code>TypeError</code> because there won't be a constructor function for the <code>new</code> keyword to invoke.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
function MyClass() {
  this.foo = 'bar';
}

var someClass = 1;

var obj1 = new someClass;    // Noncompliant;
var obj2 = new MyClass();    // Noncompliant if considerJSDoc parameter set to true. Compliant when considerJSDoc=false
</pre>

<h2>Compliant Solution</h2>
<pre>
/**
 * @constructor
 */
function MyClass() {
  this.foo = 'bar';
}

var someClass = function(){
  this.prop = 1;
}

var obj1 = new someClass;  // Compliant
var obj2 = new MyClass();  // Compliant regardless of considerJSDoc value
</pre>
¬

 javascript:DuplicatePropertyNameù


javascriptDuplicatePropertyName@Property names should not be duplicated within an object literal"CRITICAL*js:ß	<p>
  JavaScript allows duplicate property names in object literals, but only the last instance of a duplicated property determines the actual value that will be used for it. Therefore, changing values of other occurrences of a duplicated property will have no effect and may cause misunderstandings and bugs.
</p>

<p>
  What's more, using duplicate property names will generate an error in JavaScript strict mode code.
  The following code snippet illustrates this rule :
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var data = {
  "key": "value",
  "1": "value",
  "key": "value", // Noncompliant - duplicate of "key"
  'key': "value", // Noncompliant - duplicate of "key"
  key: "value", // Noncompliant - duplicate of "key"
  \u006bey: "value", // Noncompliant - duplicate of "key"
  "\u006bey": "value", // Noncompliant - duplicate of "key"
  "\x6bey": "value", // Noncompliant - duplicate of "key"
  1: "value" // Noncompliant - duplicate of "1"
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var data = {
  "key": "value",
  "1": "value",
  "key2": "value",
  'key3': "value",
  key4: "value",
  \u006bey5: "value",
  "\u006bey6": "value",
  "\x6bey7": "value",
  1b: "value"
}
</pre>
ˇ
javascript:StrictModeÂ

javascript
StrictMode)"strict" mode should be used with caution"INFO*js:ï<p>
  Even thought it may be a good practice to enforce JavaScript strict mode, doing so could result in unexpected behaviors on browsers that do not support it yet. Using this feature should therefore be done with caution and with full knowledge of the potential consequences on browsers that do not support it.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
function strict() {
  'use strict';
}
</pre>
¨
javascript:S878ò

javascriptS878!Comma operator should not be used"MAJOR*js:’<p>The comma operator takes two expressions, executes them from left to right and returns the result of the second one. Use of this operator is generally detrimental to the readability and reliability of code, and the same effect can be achieved by other means.</p>
<h2>Noncompliant Code Example</h2>

<pre>
i = a += 2, a + b;  // What's the value of i ?
</pre>
<h2>Compliant Solution</h2>

<pre>
a +=  2;
i = a + b;
</pre>
<h2>Exceptions</h2>

<p>Use of comma operator is tolerated in initialization and increment expressions of <code>for</code> loops.</p>
<pre>
for(i = 0, j = 5; i &lt; 6; i++, j++) { ... }
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 12.10 - The comma operator shall not be used.</li>
<li> MISRA C++:2008, 5-18-1 - The comma operator shall not be used.</li>
<li> MISRA C:2012, 12.3 - The comma operator should not be used</li>
</ul>
≥
javascript:S1994û

javascriptS1994\"for" loop incrementers should modify the variable being tested in the loop's stop condition"CRITICAL*js:ú<p>It is almost always an error when a <code>for</code> loop's stop condition and incrementer don't act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (i = 0; i &lt; 10; j++) {  // Noncompliant
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
for (i = 0; i &lt; 10; i++) {
  // ...
}
</pre>
Ã
javascript:S2688∑

javascriptS2688'"NaN" should not be used in comparisons"BLOCKER*js:Î<p>
  <code>NaN</code> is not equal to anything, even itself. Testing for equality or inequality against <code>NaN</code> will yield predictable results, but probably not the ones you want.
</p>
<p>
  Instead, the best way to see whether a variable is equal to <code>NaN</code> is (perhaps counter-intuitively) to compare it to itself. Since <code>NaN !== NaN</code>, when <code>a !== a</code>, you know it must equal <code>NaN</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var a = NaN;

if (a === NaN) {  // Noncompliant; always false
  console.log("a is not a number");  // this is dead code
}
if (a !== NaN) { // Noncompliant; always true
  console.log("a is not NaN"); // this statement is not necessarily true
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (a !== a) {
  console.log("a is not a number");
}
if (a === a) {
  console.log("a is not NaN");
}
</pre>
ª
javascript:S2685¶

javascriptS2685<"arguments.caller" and "arguments.callee" should not be used"CRITICAL*js:ƒ<p>Both <code>arguments.caller</code> and <code>arguments.callee</code> make quite a few optimizations impossible so they were deprecated in latest versions of JavaScript. In fact, EcmaScript 5 forbids the use of both in <code>strict</code> mode, according to the docs:</p>
<blockquote>Arguments objects for strict mode functions define non-configurable accessor properties named "caller" and "callee" which throw a TypeError exception on access.</blockquote>
<p>The same restriction applies to the function's <code>caller</code> and <code>arguments</code> properties in <code>strict</code> mode.</p>
<h2>Noncompliant Code Example</h2>

<pre>
function whoCalled() {
   if (arguments.caller == null)   //Noncompliant
      console.log('I was called from the global scope.');
   else
      console.log(arguments.caller + ' called me!');  // Noncompliant

  console.log(whoCalled.caller);  // Noncompliant
  console.log(whoCalled.arguments);  // Noncompliant
}
</pre>
√
javascript:S1871Æ

javascriptS1871^Two branches in the same conditional structure should not have exactly the same implementation"MAJOR*js:≠<p>
Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then they should be combined, for an <code>if</code> structure or one should fall through to the other for a <code>switch</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
switch (i) {
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:  // Noncompliant; duplicates case 1's implementation
    doSomething();
    break;
  default:
    doTheRest();
}

if (a >= 0 && a < 10) {
  doTheThing();
else if (a >= 10 && a < 20) {
  doTheOtherThing();
}
else if (a >= 20 && a < 50) {
  doTheThing();  // Noncompliant; duplicates first condition
}
else {
  doTheRest();
}
</pre>

<h2>Compliant Solution</h2>
<pre>
switch (i) {
  case 1:
  case 3:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  default:
    doTheRest();
}

if ((a >= 0 && a < 10) || (a >= 20 && a < 50)) {
  doTheThing();
else if (a >= 10 && a < 20) {
  doTheOtherThing();
}
else {
  doTheRest();
}
</pre>

<p>or</p>

<pre>
switch (i) {
  case 1:
    doSomething();
    break;
  case 2:
    doSomethingDifferent();
    break;
  case 3:
    doThirdThing();
    break;
  default:
    doTheRest();
}

if (a >= 0 && a < 10) {
  doTheThing();
else if (a >= 10 && a < 20) {
  doTheOtherThing();
}
else if (a >= 20 && a < 50) {
  doTheThirdThing();
}
else {
  doTheRest();
}
</pre>
‚	
javascript:S1472Õ	

javascriptS14724Function call arguments should not start on new line"CRITICAL*js:Û<p>Because semicolons at the ends of statements are optional, starting function call arguments on a separate line makes the code confusing. It could lead to errors and most likely <em>will</em> lead to questions for maintainers.</p>
<p>What was the initial purpose of the developer ?</p>
<ol>
<li> Was it to define a function and then to execute some unrelated code inside a closure ?</li>
<li> Or to pass the second function as a parameter to the first one ?</li>
</ol>
<p>The first option will be the one chosen by the JavaScript interpreter..</p>
<h2>Noncompliant Code Example</h2>

<pre>
var fn = function () {
  //...
}

(function () { // Noncompliant
  //...
})();
</pre>
<h2>Compliant Solution</h2>

<p>Either</p>
<pre>
// define a function
var fn = function () {
  //...
}; // &lt;-- semicolon added

// then execute some code inside a closure
(function () {
  //...
})();
</pre>
<p>Or </p>
<pre>
var fn = function () {
  //...
}(function () { // &lt;-- start function call arguments on same line
  //...
})();
</pre>
<p>By extension and to improve readability, any kind of function call arguments should not start on new line.</p>
¶
"javascript:CollapsibleIfStatementsˇ

javascriptCollapsibleIfStatements,Collapsible "if" statements should be merged"MAJOR*js:û<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (x != undefined) {
  if (x === 2) {
    // ...
  }
}
</pre>
<h2>Compliant Solution</h2>

<pre>
if (x != undefined &amp;&amp; x === 2) {
  // ...
}
</pre>
∞	
javascript:S2681õ	

javascriptS26813Multiline blocks should be enclosed in curly braces"CRITICAL*js:¬<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs. </p>
<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (condition)
  firstActionInBlock();
  secondAction();  // Noncompliant; executed unconditionally
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) 
  str = array[i];
  doTheThing(str);  // Noncompliant; executed only on last array element
</pre>

<h2>Compliant Solution</h2>
<pre>
if (condition) {
  firstActionInBlock();
  secondAction();
}
thirdAction();

String str = null;
for (int i = 0; i &lt; array.length; i++) {
  str = array[i];
  doTheThing(str);
}
</pre>

<h2>See</h2>
<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation
</li></ul>
˚
$javascript:DuplicateFunctionArgument“

javascriptDuplicateFunctionArgument(Function argument names should be unique"CRITICAL*js:<p>Function arguments should all have different names to prevent any ambiguity. Indeed, if arguments have the same name, the last duplicated argument hides all the previous arguments with the same name. This hiding makes no sense, reduces understandability and maintainability, and obviously can be error prone. </p>
<h2>Noncompliant Code Example</h2>

<pre>
function compute(a, a, c) { // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>

<pre>
function compute(a, b, c) { // Compliant
}
</pre>
ﬂ

$javascript:AssignmentWithinCondition∂


javascriptAssignmentWithinCondition:Assignments should not be made from within sub-expressions"MAJOR*js:≈	<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.</p>
<p>It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</p>
<p>Ideally, expressions should not have side-effects.</p>
<h2>Noncompliant Code Example</h2>

<pre>
doSomething(i = 42);
</pre>
<h2>Compliant Solution</h2>

<pre>
i = 42;
doSomething(i);   
// or
doSomething(i == 42);  // Perhaps in fact the comparison operator was expected
</pre>
<h2>Exceptions</h2>
<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>
<pre>
while ((line = nextLine()) != null) {...}  // Compliant

while (line = nextLine()) {...}  // Compliant

if (line = nextLine()) {...}  // Noncompliant
</pre><h2>See</h2>

<ul>
<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value</li>
<li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions</li>
<li> MISRA C:2012, 13.4 - The result of of an assignment operator should not be used</li>
<li> <a href="http://cwe.mitre.org/data/definitions/481.html">MITRE, CWE-481</a> - Assigning instead of Comparing</li>
</ul>
î

javascript:FutureReservedWordsÒ	

javascriptFutureReservedWords9"future reserved words" should not be used as identifiers"CRITICAL*js:Ñ	<p>The following words may be used as keywords in future evolutions of the language, so using them as identifiers should be avoided to allow an easier adoption of those potential future versions:</p>
<ul>
<li> <code>await</code></li>
<li> <code>class</code></li>
<li> <code>const</code></li>
<li> <code>enum</code></li>
<li> <code>exports</code></li>
<li> <code>extends</code></li>
<li> <code>implements</code></li>
<li> <code>import</code></li>
<li> <code>interface</code></li>
<li> <code>let</code></li>
<li> <code>package</code></li>
<li> <code>private</code></li>
<li> <code>protected</code></li>
<li> <code>public</code></li>
<li> <code>static</code></li>
<li> <code>super</code></li>
<li> <code>yield</code></li>
</ul>
<p>Use of these words as identifiers would produce an error in JavaScript <code>strict</code> mode code.</p>
<h2>Noncompliant Code Example</h2>

<pre>
var package = document.getElementsByName("foo"); // Noncompliant
var someData = { package: true };                 // Compliant, as it is not used as an identifier here
</pre>
<h2>Compliant Solution</h2>

<pre>
var elements = document.getElementsByName("foo"); // Compliant
</pre>
ü
javascript:ForInä

javascriptForIn?"for...in" loops should filter properties before acting on them"MAJOR*js:®<p>The <code>for...in</code> in statement allows you to loop through the names of all of the properties of an object. Unfortunately, the list of properties includes all those properties that were inherited through the prototype chain. This has the bad side effect of serving up method functions when the interest is in data properties. Programs that don't take this into account can fail.</p>
<p>Therefore, the body of every <code>for...in</code> statement should be wrapped in an <code>if</code> statement that filters which properties are acted upon. It can select for a particular type or range of values, or it can exclude functions, or it can exclude properties from the prototype. </p>
<h2>Noncompliant Code Example</h2>

<pre>
for (name in object) {
    doSomething(name);  // Noncompliant
}
</pre>
<h2>Compliant Solution</h2>

<pre>
for (name in object) {
  if (object.hasOwnProperty(name)) {
    doSomething(name);
  }
}
</pre>
ñ
javascript:S1764Å

javascriptS1764KIdentical expressions should not be used on both sides of a binary operator"CRITICAL*js:ê<p>
  Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.
</p>

<p>
This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if ( a == a ) { // always true
  doZ();
}
if ( a != a ) { // always false
  doY();
}
if ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too
  doX();
}
if ( a == b || a == b ) { // if the first one is true, the second one is too
  doW();
}

var j = 5 / 5; //always 1
var k = 5 - 5; //always 0
</pre>

<h2>Compliant Solution</h2>
<pre>
doZ();

if ( a == b ) {
  doX();
}
if ( a == b ) {
  doW();
}

var j = 1;
var k = 0;
</pre>

<h2>Exceptions</h2>
<p>The specific case of testing one variable against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>
<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>
<pre>
if(f !== f) { // test for NaN value
  console.log("f is NaN");
}

var i = 1 &lt;&lt; 1; // Compliant
var j = a &lt;&lt; a; // Noncompliant
</pre>

<h2>See</h2>

<ul>
<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
<li> Rule <a href='/coding_rules#rule_key=javascript:S1656'>S1656</a> - Implements a check on <code>=</code>. </li>
</ul>
»
javascript:S1126≥

javascriptS1126TReturn of boolean expressions should not be wrapped into an "if-then-else" statement"MINOR*js:º<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (expression) {  
  return true;
} else {
  return false;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
return expression; 
</pre>
<pre>
return !!expression;
</pre>
◊
javascript:S2611¬

javascriptS2611(Untrusted content should not be included"CRITICAL*js:Ù<p>Including content in your site from an untrusted source can expose your users to attackers and even compromise your own site. For that reason, this rule raises an issue for each non-relative URL.</p>
<h2>Noncompliant Code Example</h2>

<pre>
function include(url) {
  var s = document.createElement("script");
  s.setAttribute("type", "text/javascript");
  s.setAttribute("src", url);
  document.body.appendChild(s);
}
include("http://hackers.com/steal.js")  // Noncompliant
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/829">MITRE, CWE-829</a> - Inclusion of Functionality from Untrusted Control Sphere
</li><li> <a href="http://www.sans.org/top25-software-errors/">SANS Top 25</a> - Risky Resource Management
</li></ul>
Ó
javascript:S1125Ÿ

javascriptS1125BLiteral boolean values should not be used in condition expressions"MINOR*js:Ù<p>
  Remove literal boolean values from conditional expressions to improve readability. Anything that can be tested for equality with a boolean value must itself be a boolean value, and boolean values can be tested atomically.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (booleanVariable == true) { /* ... */ }
if (booleanVariable != true) { /* ... */ }
if (booleanVariable || false) { /* ... */ }
doSomething(!false);
</pre>

<h2>Compliant Solution</h2>
<pre>
if (booleanVariable) { /* ... */ }
if (!booleanVariable) { /* ... */ }
if (booleanVariable) { /* ... */ }
doSomething(true);
</pre>

<h2>Exceptions</h2>
<p>
  The use of literal booleans in comparisons which use identity operators (<code>===</code> and <code>!==</code>) are ignored.
</p>
È
javascript:Eval’

javascriptEval\Code should not be dynamically injected and executed to prevent Eval Injection vulnerability"CRITICAL*js:‘<p>The <code>eval</code> function is a way to run arbitrary code at run-time. Generally it is considered to be very dangerous because it allows execution of arbitrary code. Its use is thus discouraged. If you have carefully verified that there is no other option than to use this construct, pay special attention not to pass any user-provided data into it without properly validating it beforehand.</p>
<h2>Noncompliant Code Example</h2>

<pre>
eval(code_to_be_dynamically_executed)
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/95.html">MITRE CWE-95</a> - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</li>
<li> <a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>
</ul>
ô
javascript:S2692Ñ

javascriptS26923"indexOf" checks should not be for positive numbers"MAJOR*js:Æ<p>
  Most checks against an <code>indexOf</code> call against a string or array compare it with -1 because 0 is a valid index. Any checks which look for values >0 ignore the first element, which is likely a bug.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var color = "blue";
var name = "ishmael";
var number = 123;

var arr = [color, name];

if (arr.indexOf("blue") > 0) { // Noncompliant
  // ...
}
if (arr[0].indexOf("ish") > 0 { // Noncompliant
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var color = "blue";
var name = "ishmael";
var number = 123;

var arr = [color, name];

if (arr.indexOf("blue") >= 0) {
  // ...
}
if (arr[0].indexOf("ish") > -1 {
  // ...
}
</pre>
˝
!javascript:UnusedFunctionArgument◊

javascriptUnusedFunctionArgument,Unused function parameters should be removed"MAJOR*js:˜<p>
  Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
function doSomething(a, b) { // "a" is unused
  return compute(b);
}
</pre>


<h2>Compliant Solution</h2>
<pre>
function doSomething(b) {
  return compute(b);
}
</pre>



<h2>Exceptions</h2>
<p>
  When writing function callbacks, some arguments might be required as part of the function signature, but not actually needed by the callback code.
  For instance, JQuery has the 'each' helper to iterate over arrays or objects, but using the counter 'i' should remain optional:
</p>
<pre>
$(["first", "last"]).each(function (i, value) {
  computeSomethingWithValue(value);
});
</pre>
<p>
  So only unused arguments listed at the end of the argument list will be flagged with issues because they could be omitted from the function signature.
  Unused arguments which are followed by an argument that _is_ used will be ignored.
</p>
<p>
  Examples :
</p>
<pre>
var myFirsCallBackFunction = function (p1, p2, p3, p4) {  //unused p2 is not reported but p4 is
                                              return p1 + p3; }

var mySecondCallBackFunction = function (p1, p2, p3, p4) {  //unused p1, p2 and p3 are not reported
                                              return p4; }

var myThirdCallBackFunction = function (p1, p2, p3, p4) {  //unused p1 is not reported but p3 and p4 are
                                              return p2; }
</pre>
<p>
  Further, when <code>arguments</code> is used in the function body, no parameter is reported as unused.
</p>
<pre>
function doSomething(a, b, c) {
  compute(arguments);
}
</pre>

<h2>See</h2>

<ul>
<li> MISRA C++:2008, 0-1-11</li>
<li> MISRA C:2012, 2.7</li>
</ul>
…
javascript:S100µ

javascriptS1005Function names should comply with a naming convention"MINOR*js:ﬁ<p>
  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all function names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
function DoSomething(){...}
</pre>

<h2>Compliant Solution</h2>
<pre>
function doSomething(){...}
</pre>
û
javascript:SingleQuoteÉ

javascriptSingleQuote0Single quotes should be used for string literals"MINOR*js:™<p>
  For consistency single-quotes (') are preferred to double-quotes (").
  This is helpful when creating strings that include HTML.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var firstParameter = "something";
</pre>

<h2>Compliant Solution</h2>
<pre>
var firstParameter = 'something';
</pre>
û
javascript:TabCharacterÇ

javascriptTabCharacter(Tabulation characters should not be used"MINOR*js:∞<p>
Developers should not need to configure the tab width of their text editors in order to be able to read source code. So the use of tabulation character must be banned.
</p>
¸
javascript:S2424Á

javascriptS2424)Built-in objects should not be overridden"CRITICAL*js:ò<p>
  Overriding an object changes its behavior and could potentially impact all code using that object. Overriding standard, built-in objects could therefore have broad,
  catastrophic effects on previously-working code.
</p>

<p>This rule detects overrides of the following native objects:</p>

<ul>
  <li>Fundamental objects - Object, Function, Boolean, Symbol, Error, EvalError, InternalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError</li>
  <li>Numbers and dates - Number, Math, Date</li>
  <li>Text processing - String, RegExp</li>
  <li>Indexed collections - Array, Int8Array, Uint8Array, Uint8ClampedArray, Int16Array, Unit16Array, Int32Array, Uint32Array, Float32Array, Float64Array</li>
  <li>Keyed collections - Map, Set, WeakMap, WeakSet</li>
  <li>Structured data - ArrayBuffer, DataView, JSON</li>
  <li>Control abstraction objects - Promise</li>
  <li>Reflection - Reflect, Proxy</li>
  <li>Internationalization - Intl</li>
  <li>Non-standard objects - Generator, Iterator, ParallelArray, StopIteration</li>
</ul>
±

javascript:S1697ú


javascriptS1697WShort-circuit logic should be used to prevent null pointer dereferences in conditionals"BLOCKER*js:†	When either the equality operator in a test for <code>null</code> or <code>undefined</code>, or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced only if it is <code>null</code>/<code>undefined</code>, leading to a guaranteed <code>TypeError</code>.

<h2>Noncompliant Code Sample</h2>
<pre>
if (str == null &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str == undefined &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str != null || str.length > 0) {
  console.log("String is not empty");
}

if (str != undefined || str.length > 0) {
  console.log("String is not empty");
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (str != null &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str != undefined &amp;&amp; str.length == 0) {
  console.log("String is empty");
}

if (str == null || str.length > 0) {
  console.log("String is not empty");
}

if (str == undefined || str.length > 0) {
  console.log("String is not empty");
}
</pre>
ì
javascript:DebuggerStatementÚ

javascriptDebuggerStatement&Debugger statements should not be used"CRITICAL*js:ö<p>The debugger statement can be placed anywhere in procedures to suspend execution. Using the debugger statement is similar to setting a breakpoint in the code. By definition such statement must absolutely be removed from the source code to prevent any unexpected behavior or added vulnerability to attacks in production.</p>
<h2>Noncompliant Code Example</h2>

<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
  // Wait for user to resume.
  debugger;
}
</pre>
<h2>Compliant Solution</h2>

<pre>
for (i = 1; i&lt;5; i++) {
  // Print i to the Output window.
  Debug.write("loop index is " + i);
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>
</ul>
∆
javascript:VariableShadowing•

javascriptVariableShadowing Variables should not be shadowed"MAJOR*js:÷<p>
  Overriding a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of code. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
show: function(point, element) {
  if (!this.drops.length) return;
  var drop, affected = [];
  this.drops.each( function(drop) {  // Non-Compliant; defines a new 'drop' parameter
    if(Droppables.isAffected(point, element, drop))
      affected.push(drop);
  });
</pre>

<h2>Compliant Solution</h2>
<pre>
show: function(point, element) {
  if (!this.drops.length) return;
  var drop, affected = [];
  this.drops.each( function(aDrop) {
    if(Droppables.isAffected(point, element, aDrop))
      affected.push(aDrop);
  });
</pre>
ò
+javascript:FunctionDeclarationsWithinBlocksË

javascript FunctionDeclarationsWithinBlocks6Function declarations should not be made within blocks"MAJOR*js:Ù<p>
  While most script engines support function declarations within blocks, it is not part of ECMAScript 5 and below, and from browser to browser the implementations are inconsistent with each other. ECMAScript 5 and below only allows function declarations in the root statement list of a script or function. If you are targeting browsers that don't support ECMAScript 6, use a variable initialized with a function expression to define a function within a block :
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (x) {
  function foo() {}
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (x) {
  var foo = function() {}
}
</pre>
Å

javascript:S1451Ï	

javascriptS1451/Copyright and license headers should be defined"BLOCKER*js:ò	<p>
    Each source file should start with a header stating file ownership and the license which must be used to distribute the application.
</p>
<p>
    This rule must be fed with the header text that is expected at the beginning of every file.
</p>

<h2>Compliant Solution</h2>
<pre>
/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2013 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
</pre>
Ó
javascript:OctalNumber”

javascriptOctalNumberOctal values should not be used"MAJOR*js:ã<p>
Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var myNumber = 010;   // myNumber will hold 8, not 10 - was this really expected?
</pre>

<h2>Compliant Solution</h2>
<pre>
var myNumber = 8;
</pre>

<h2>See</h2>

<ul>
<li> MISRA C:2004, 7.1 - Octal constants shall not be used</li>
<li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than "\0") shall not be used</li>
<li> MISRA C:2012, 7.1 - Octal constants shall not be used</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/_QC7AQ">CERT DCL18-C</a> - Do not begin integer constants with 0 when specifying a decimal value</li>
</ul>
ı
javascript:S1219‡

javascriptS12196"switch" statements should not contain non-case labels"CRITICAL*js:Ñ<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>
<h2>Noncompliant Code Examples</h2>

<p>Case 1, the code is syntactically correct but the behavior is not the expected one</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  WEDNESDAY:   // instead of "case WEDNESDAY"
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2, the code is correct and behaves as expected but is hardly readable </p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    foo:for(i = 0 ; i &lt; X ; i++) {
         /* ... */
        break foo;  // this break statement doesn't relate to the nesting case TUESDAY
         /* ... */
    }
    break;
    /* ... */
}
</pre>
<h2>Compliant Solution</h2>

<p>Case 1</p>
<pre>
switch (day) {
  case MONDAY:
  case TUESDAY:
  case WEDNESDAY:
    doSomething();
    break;
  ...
}
</pre>
<p>Case 2</p>
<pre>
switch (day) {
  case MONDAY:
    break;
  case TUESDAY:
    compute(args); // put the content of the labelled "for" statement in a dedicated method
    break;

    /* ... */
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>
<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>
<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>
</ul>
Ú
javascript:EmptyBlockÿ

javascript
EmptyBlock.Nested blocks of code should not be left empty"MAJOR*js:Ç<p>
  Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i < length; i++) {}  // Empty on purpose or missing piece of code ?
</pre>

<h2>Exceptions</h2>
<p>
  When a block contains a comment, this block is not considered to be empty.
</p>
¶
javascript:LabelPlacementà

javascriptLabelPlacement:Only "while", "do" and "for" statements should be labelled"MAJOR*js:¢<p>Any statement or block of statements can be identified by a label, but those labels should be used only on 'while', 'do-while' and 'for' statements. Using labels in any other context leads to unstructured, confusing code. </p>
<h2>Noncompliant Code Example</h2>

<pre>
myLabel:if (i % 2 == 0) {  // Noncompliant
  if (i == 12) {
    print("12");
    break myLabel;
  }
  print("Odd number, but not 12");
}
</pre>
<h2>Compliant Solution</h2>

<pre>
myLabel:for (i = 0; i &lt; 10; i++) {   // Compliant
  print("Loop");
  break myLabel;
}
</pre>

javascript:S2427€

javascriptS2427)The base should be provided to "parseInt""CRITICAL*js:å<p>The <code>parseInt</code> function has two versions, one that takes a base value as a second argument and one that does not, and using the single-arg version can result in unexpected results on older browsers. </p>
<h2>Noncompliant Code Example</h2>

<pre>
parseInt("010");  // Noncompliant; pre-2013 browsers may return 8 
</pre>
<h2>Compliant Solution</h2>

<pre>
parseInt("010", 10);
</pre>
√
javascript:EqEqEq≠

javascriptEqEqEq7"===" and "!==" should be used instead of "==" and "!=""MAJOR*js:“<p>The <code>==</code> and <code>!=</code> operators do type coercion before comparing values. This is bad because it can mask type errors. For example, it evaluates <code>' \t\r\n' == 0</code> as <code>true</code>.</p>
<p>It is best to always use the side-effect-less <code>===</code> and <code>!==</code> operators instead.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (var == 'howdy') {...} // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
if (var === 'howdy') {...}
</pre>
<h2>Exceptions</h2>

<p>Even if testing the equality of a variable against null doesn't do exactly what most JavaScript developers believe, usage of <code>==</code> or <code>!=</code> is tolerated in such context. In the following case, if <code>foo</code> hasn't been initialized, its default value is not <code>null</code> but <code>undefined</code>. Nevertheless <code>undefined == null</code>, so JavaScript developers get the expected behavior.</p>
<pre>
if(foo == null) {...}
</pre>
≤
javascript:S2549ù

javascriptS25499The "changed" property should not be manipulated directly"CRITICAL*js:æ<p>According to the Backbone.js docs</p>

<blockquote>
  The <strong>changed</strong> property is the internal hash containing all the attributes that have changed since the last set. Please do not update <strong>changed</strong> directly since its state is
  internally maintained by set. A copy of <strong>changed</strong> can be acquired from changedAttributes.
</blockquote>

<p>
  The <code>changed</code> property is involved in decisions about whether or not a collection should be resorted when it is updated.
  If you modify it manually, you can break the resorting of the collection.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
myModel.changed = { myProperty: 1 }; // Non-compliant
</pre>
ë
javascript:S2703¸

javascriptS2703.Variables should always be declared with "var""MAJOR*js:´<p>
  JavaScript variable scope can be particularly difficult to understand and get right.
  The situation gets even worse when you consider the accidental creation of global variables,
  which is what happens when you declare a variable inside a method or the <code>for</code> clause of a for-loop without using the <code>var</code> keyword.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
function f(){
  i = 1;         // Noncompliant; i is global

  for (j = 0; j < array.length; j++) {  // Noncompliant; j is global now too
    // ...
  }
}
</pre>

<h2>Compliant Solution</h2>

<pre>
function f(){
  var i = 1;

  for (var j = 0; j < array.length; j++) {
    // ...
  }
}
</pre>
›
javascript:HtmlComments¡

javascriptHtmlComments&HTML-style comments should not be used"MAJOR*js:Ò<p>
  HTML-style comments are not part of EcmaScript specification, and should not be used.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
&lt;!-- Noncompliant -->
</pre>

<h2>Compliant Solution</h2>
<pre>
// Compliant
/* Compliant */
</pre>
ö

javascript:S1854Ö


javascriptS1854Dead Stores should be removed"MAJOR*js:≈	<p>
  A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or
  throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources. Therefore all calculated values should be used.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
function pow(a, b) {
  if(b == 0) {
    return 0;
  }
  var x = a;
  for(var i = 1, i < b, i++) {
    x = x * a;  //Dead store because the last return statement should return x instead of returning a
  }
  return a;
}
</pre>

<h2>Compliant Solution</h2>

<pre>
function pow(a, b) {
  if(b == 0) {
    return 0;
  }
  var x = a;
  for(var i = 1, i < b, i++) {
    x = x * a;
  }
  return x;
}
</pre>

<h2>See</h2>
<ul>
  <li><a href="http://cwe.mitre.org/data/definitions/563.html">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable')</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/QYA5">CERT, MSC13-C</a> - Detect and remove unused values</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/S4IyAQ">CERT, MSC13-CPP</a> - Detect and remove unused values</li>
</ul>
ü
javascript:SemicolonÜ

javascript	Semicolon*Each statement should end with a semicolon"MINOR*js:µ<p>In JavaScript, the semicolon (<code>;</code>) is optional as a statement separator, but omitting semicolons can be confusing, and lead to unexpected results because a semicolon is implicitly inserted at the end of each line.</p>
<h2>Noncompliant Code Example</h2>

<pre>
function fun() {
  return  // Noncompliant. ';' implicitly inserted at end of line
       5   // Noncompliant. ';' implicitly inserted at end of line
}
print(fun());  // prints "undefined", not "5"
</pre>
<h2>Compliant Solution</h2>

<pre>
function fun() {
  return 5;
}
print(fun());
</pre>
Ÿ
javascript:PrimitiveWrappers∏

javascriptPrimitiveWrappers6Wrapper objects should not be used for primitive types"MAJOR*js:”<p>
  The use of wrapper objects for primitive types is gratuitous, confusing and dangerous. Simple literals should be used instead.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var x = new Boolean(false);
if (x) {
  alert('hi');  // Shows 'hi'.
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var x = false;
if (x) {
  alert('hi');
}
</pre>
Ø
javascript:S2819ö

javascriptS2819?Cross-document messaging domains should be carefully restricted"CRITICAL*js:µ<p>
  HTML5 adds the ability to send messages to documents served from other domains. To mitigate the risk of sending sensitive information to a document served from a hostile or
  unknown domain, this rule raises an issue each time <code>Window.postMessage</code> is used.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
var myWindow = document.getElementById('myIFrame').contentWindow;
myWindow.postMessage(message, "*"); // Noncompliant; how do you know what you loaded in 'myIFrame' is still there?
</pre>

<h2>See</h2>
<ul>
  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_(XSS)">OWASP Top Ten 2013 Category A3</a> - Cross-Site Scripting (XSS)</li>
</ul>
â
javascript:CurlyBracesÓ

javascriptCurlyBraces1Control structures should always use curly braces"MAJOR*js:î<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>
<h2>Noncompliant Code Example</h2>

<pre>
// the two statements seems to be attached to the if statement, but that is only true for the first one:
if (condition)
  executeSomething();
  checkSomething();
</pre>
<h2>Compliant Solution</h2>

<pre>
if (condition) {
  executeSomething();
  checkSomething();
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>
<li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>
<li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement</li>
<li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement</li>
<li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/1QGMAg">CERT, EXP19-C</a> - Use braces for the body of an if, for, or while statement</li>
<li> <a href="http://cwe.mitre.org/data/definitions/483.html">MITRE, CWE-483</a> - Incorrect Block Delimitation</li>
</ul>
¥
javascript:UnusedVariableñ

javascriptUnusedVariable(Unused local variables should be removed"MAJOR*js:¬<p>
  If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
function numberOfMinutes(hours) {
  var seconds = 0;   // seconds is never used
  return hours * 60;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
function numberOfMinutes(hours) {
  return hours * 60;
}
</pre>
Í
javascript:S3402’

javascriptS3402+Strings and non-strings should not be added"MAJOR*js:á<p>Use a <code>+</code> with two numbers and you'll get addition. But use it with a string and anything else, and you'll get concatenation. Very often that's not what's intended, and even when it is, it's likely to confuse future maintainers. </p>
<p>Since this may not be what's intended, this rule raises an issue when <code>+</code> is used with a string and a non-string.</p>

<h2>Noncompliant Code Example</h2>
<pre>
var a = '42';
var b = 5;
var sum = a + b;          // Noncompliant; yields string "425"

var foo = ' is a lucky number';
alert(42 + foo);          // Noncompliant; make your intention explicit
</pre>

<h2>Compliant Solution</h2>
<pre>
var a = '42';
var b = 5;
var sum = parseInt(a) + b; // Compliant; yields 47

var foo = ' is a lucky number';
alert('' + 42 + foo);     // Use an empty string literal
alert(`${42}${foo}`);     // Use template strings; available since ES2015
</pre>
˚
javascript:S1862Ê

javascriptS1862\Related "if/else if" statements and "cases" in a "switch" should not have the same condition"CRITICAL*js:‰<p>
  A <code>switch</code> and a chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>.
</p>
<p>
  Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.
</p>

<p>
For a <code>switch</code>, if the first case ends with a break, the second case will never be executed, rendering it dead code. Worse there is the risk in this situation that future maintenance will be done on the dead case, rather than on the one that's actually used.
</p>

<p>
On the other hand, if the first case does not end with a break, both cases will be executed, but future maintainers may not notice that.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 1)  // Noncompliant
  moveWindowToTheBackground();

switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  case 1:  // Noncompliant
    //...
    break;
  default:
    // ...
    break;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (param == 1)
  openWindow();
else if (param == 2)
  closeWindow();
else if (param == 3)
  moveWindowToTheBackground();

switch(i) {
  case 1:
    //...
    break;
  case 3:
    //...
    break;
  default:
    // ...
    break;
}
</pre>

<h2>See</h2>
  <ul>
    <li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect </li>
    <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a>- Detect and remove code that has no effect </li>
  </ul>
ã
javascript:S3403ˆ

javascriptS3403FThe identity operator ("===") should not be used with dissimilar types"CRITICAL*js:ä<p>Comparing dissimilar types using the identity operator (<code>===</code>) will always return <code>false</code> because no type conversion is done before the comparison. Thus, such comparisons can only be bugs.</p>

<h2>Noncompliant Code Example</h2>
<pre>
var a = 8;
var b = "8";

if (a === b) {  // Noncompliant; always false
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var a = 8;
var b = "8";

if (a == b) {
  // ...
}
</pre>
<p>or</p>
<pre>
var a = 8;
var b = "8";

if (a === Number(b)) {
  // ...
}
</pre>
µ
javascript:ContinueStatementî

javascriptContinueStatement"continue" should not be used"CRITICAL*js:≈<p><code>continue</code> is an unstructured control flow statement. It makes code less testable, less readable and less maintainable. Structured control flow statements such as <code>if</code> should be used instead.</p>
<h2>Noncompliant Code Example</h2>

<pre>
  for (i = 0; i < 10; i++) {
    if (i == 5) {
      continue;  /* Non-Compliant */
    }
    alert("i = " + i);
  }
</pre>
<h2>Compliant Solution</h2>

<pre>
  for (i = 0; i < 10; i++) {
    if (i != 5) {  /* Compliant */
      alert("i = " + i);
    }
  }
</pre>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 14.5</li>
</ul>
ø
javascript:S2432™

javascriptS2432 Setters should not return values"CRITICAL*js:‰Functions declared with the <code>set</code> keyword will automatically return the values they were passed. Thus any value explicitly returned from a setter will be ignored, and explicitly returning a value is an error.

<h2>Noncompliant Code Example</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
    return 42;  // Noncompliant
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var person = {
  // ...
  set name(name) {
    this.name = name;
  }
}
</pre>
Ú
!javascript:ExcessiveParameterListÃ

javascriptExcessiveParameterList-Functions should not have too many parameters"MAJOR*js:Î<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>

<h2>Noncompliant Code Example</h2>
The following code snippet illustrates this rule with a maximum number of 4 parameters:
<pre>
function doSomething(param1, param2, param3, param4, param5) { 
...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
public void doSomething(int param1, int param2, int param3, String param4) {
...
}
</pre>
–
%javascript:ArrayAndObjectConstructors¶

javascriptArrayAndObjectConstructors0Array and Object constructors should not be used"MAJOR*js:æ<p>
  Array and Object literals should always be preferred to Array and Object constructors.
</p>

<p>
  Array constructors are error-prone due to the way their arguments are interpreted. If more than one argument is used, the array length will be equal to the number of arguments. However, using a single argument will have one of three consequences:
</p>

<ul>
    <li>If the argument is a number and it is a natural number the length will be equal to the value of the argument.</li>
    <li>If the argument is a number, but not a natural number an exception will be thrown.</li>
    <li>Otherwise the array will have one element with the argument as its value.</li>
</ul>

<p>
  For these reasons, if someone changes the code to pass 1 argument instead of 2 arguments, the array might not have the expected length. To avoid these kinds of weird cases, always use the more readable array.
</p>

<p>
  Object constructors don't have the same problems, but for readability and consistency object literals should be used.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var a3 = new Array(x1); // Noncompliant and variable in results
var a4 = new Array();  // Noncompliant. Results in 0-element array.
var a1 = new Array(x1, x2, x3);  // Noncompliant. Results in 3-element array.

var o = new Object(); // Noncompliant

var o2 = new Object(); // Noncompliant
o2.a = 0;
o2.b = 1;
o2.c = 2;
o2['strange key'] = 3;
</pre>

<h2>Compliant Solution</h2>
<pre>
var a = [x1, x2, x3];
var a2 = [x1, x2];
var a3 = [x1];
var a4 = [];

var o = {};

var o2 = {
  a: 0,
  b: 1,
  c: 2,
  'strange key': 3
};
</pre>
Ë
javascript:S3002”

javascriptS3002;Unary operators "+" and "-" should not be used with objects"CRITICAL*js:Ú<p>
  The unary operators <code>+</code> and <code>-</code> can be used to convert some value types to numeric values.
  But not every value can be converted to a <code>Number</code> type: use it with an object, and result will be always <code>NaN</code> (Not A Number).
</p>

<h2>Noncompliant Code Example</h2>

<pre>
var obj = {x : 1};
doSomethingWithNumber(+obj);    // Noncompliant

function foo(){
  return 1;
}
doSomethingWithNumber(-foo);    // Noncompliant
</pre>

<h2>Compliant Solution</h2>

<pre>
var obj = {x : 1};
doSomethingWithNumber(+obj.x);

function foo(){
  return 1;
}
doSomethingWithNumber(-foo());

var str = '42';
doSomethingWithNumber(+str);
</pre>

<h2>Exceptions</h2>

<p>Unary <code>+</code> and <code>-</code> can be used with objects corresponding to primitive types.</p>

<pre>
var b = new Boolean(true);
doSomethingWithNumber(-b);  // Compliant
</pre>
Î
javascript:S1067÷

javascriptS1067%Expressions should not be too complex"MAJOR*js:é<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</p>
<p>A single expression's complexity should not become too high to keep the code readable.</p>
ı
javascript:S3003‡

javascriptS30034Comparison operators should not be used with strings"MAJOR*js:â<p>The use of comparison operators (<code>&lt;</code>, <code>&lt;=</code>, <code>&gt;=</code>, <code>&gt;</code>) with strings is not likely to yield the expected results. Instead, try converting at least one operand to the <code>number</code> type.</p>

<h2>Noncompliant Code Example</h2>
<pre>
var appleNumber = "123";
var orangeNumber = "45";
if (appleNumber &lt; orangeNumber) {  // Noncompliant, this condition is true
  alert("There are more oranges");
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var appleNumber = "123";
var orangeNumber = "45";
if (Number(appleNumber) &lt; Number(orangeNumber)) {
  alert("There are more oranges");
}
</pre>
Ù
javascript:S2310ﬂ

javascriptS2310ALoop counters should not be assigned to from within the loop body"MAJOR*js:˚<p>Loop counters should not be modified in the body of the loop. However other loop control variables representing logical values may be modified in the loop, for example a flag to indicate that something has been completed, which is then tested in the for statement.</p>

<h2>Noncompliant Code Example</h2>
<pre>
var names = [ "Jack", "Jim", "", "John" ];
for (var i = 0; i &lt; names.length; i++) {
  if (!names[i]) {
    i = names.length;                                 // Non-Compliant
  } else {
    console.log(names[i]);
  }
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var names = [ "Jack", "Jim", "", "John" ];
for (var name of names) {
  if (!name) {
    break;                                 // Compliant
  } else {
    console.log(name);
  }
}
</pre>
†
javascript:S2550ã

javascriptS2550?"defaults" should be a function when objects or arrays are used"CRITICAL*js:¶<p>
  When using the Backbone.js framework, model <code>defaults</code> should be a function rather than an object if it contains arrays or objects. This is because objects and arrays are passed by reference in JavaScript. So a <code>defaults</code> object that contains arrays or objects is going to set the default value of every instance to point to the same shared object or array.
</p>
<p>
  Use a function instead and a fresh copy of the object or array will be peeled off for each instance.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var Person = Backbone.Model.extend({
  defaults: {  // Noncompliant; every instance of Person will share the same instance of favoriteColors
    favoriteColors: ["blue","purple","raspberry"]
  }
});
</pre>

<h2>Compliant Solution</h2>
<pre>
var Person = Backbone.Model.extend({
  defaults: function() {
    return {
      favoriteColors: ["blue","purple","raspberry"]
    };
  }
});
</pre>
“
javascript:S3001Ω

javascriptS30013"delete" should be used only with object properties"CRITICAL*js:‰<p>The semantics of the <code>delete</code> operator are a bit tricky, and it can only be reliably used to remove properties from objects. Pass anything else to it, and you may or may not get the desired result.</p>

<h2>Noncompliant Code Example</h2>
<pre>
var x  = 1;
delete x;       // Noncompliant

function foo(){
..
}

delete foo;  // Noncompliant
</pre>

<h2>Compliant Solution</h2>
<pre>
var obj = {
  x:1,
  foo: function(){
  ...
  }
};
delete obj.x;
delete obj.foo;

</pre>
˛
javascript:S2715È

javascriptS2715F"find" should be used to select the children of an element known by id"MAJOR*js:Ä<p>
  The use of <code>find</code> allows <code>document.getElementById()</code> to be used for the top-level selection, and saves the Sizzle engine for where it's really needed.
  That makes the query faster, and your application more responsive.
</p>
<p>From the jQuery documentation:</p>

<blockquote>
  Beginning your selector with an ID is always best.<br>
  The <code>.find()</code> approach is faster because the first selection is handled without going through the Sizzle selector engine ‚Äì ID-only selections are handled using <code>document.getElementById()</code>,
  which is extremely fast because it is native to the browser.
</blockquote>

<h2>Noncompliant Code Example</h2>

<pre>var $productIds = $("#products div.id"); // Noncompliant - a nested query for Sizzle selector engine</pre>

<h2>Compliant Solution</h2>

<pre>var $productIds = $("#products").find("div.id"); // Compliant - #products is already selected by document.getElementById() so only div.id needs to go through Sizzle selector engine</pre>
Ú
-javascript:ConstructorFunctionsForSideEffects¿

javascript"ConstructorFunctionsForSideEffectsBConstructor functions should not be called purely for side-effects"MAJOR*js:æ<p>Some people like to call a constructor functions without assigning the result to a variable. There is no advantage in this approach since the object the <code>new</code> operator creates isn't used anywhere. Therefore this misleading syntax should be avoided.</p>
<h2>Noncompliant Code Example</h2>

<pre>
new MyConstructor(); // Non-Compliant
</pre>
<h2>Compliant Solution</h2>

<pre>
var something = new MyConstructor();  // Compliant
</pre>
Â
javascript:OneStatementPerLine¬

javascriptOneStatementPerLine&Statements should be on separate lines"MINOR*js:Î<p>For better readability, do not put more than one statement on a single line.</p>

<h2>Noncompliant Code Example</h2>

<pre>
if(someCondition) doSomething();
</pre>

<h2>Compliant Solution</h2>

<pre>
if(someCondition) {
  doSomething();
}
</pre>

<h2>Exceptions</h2>

<p>Anonymous functions containing a single statement are ignored.</p>

<pre>
onEvent(function() { doSomething(); });               // Compliant
onEvent(function(p) { doSomething(); return p %2 ;}); // Noncompliant
</pre>
Ç
javascript:S2716Ì

javascriptS2716&Universal selectors should not be used"MAJOR*js:§<p>
  Element selections that could be matched anywhere in the document can be very slow. That's why use of the universal selector, <code>*</code>, should be limited; it explicitly
  specifies that the match could be anywhere.
</p>

<h2>Noncompliant Code Example</h2>

<pre>$( ".buttons > *" );  // Noncompliant; extremely expensive</pre>

<h2>Compliant Solution</h2>

<pre>$( ".buttons" ).children(); // Compliant</pre>
∏
javascript:S2713£

javascriptS2713;JQuery cache variables should comply with a convention name"MINOR*js:≈<p>Shared naming conventions allow teams to collaborate efficiently.
  This rule checks that all variables names that are used to store/cache jQuery objects match a provided regular expression.</p>
ù
javascript:S2714à

javascriptS2714>Element type selectors should not be used with class selectors"MAJOR*js:ß<p>Using element type in class selectors is slower than using only the class selector.</p>

<h2>Noncompliant Code Example</h2>

<pre>var $products = $("div.products");    // Noncompliant - slow</pre>

<h2>Compliant Solution</h2>

<pre>var $products = $(".products");    // Compliant - fast</pre>
ø
javascript:TrailingComma¢

javascriptTrailingComma"Trailing commas should not be used"BLOCKER*js:”<p>
  Most browsers parse and discard a meaningless, trailing comma. Unfortunately, that's not the case for Internet Explorer, which in most versions throws a meaningless error. Therefore trailing commas should be eliminated.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab,    // Noncompliant - trailing comma
};
</pre>

<h2>Compliant Solution</h2>
<pre>
var settings = {
    'foo'  : oof,
    'bar' : rab
};
</pre>
õ

"javascript:MultilineStringLiteralsÙ	

javascriptMultilineStringLiterals,Multiline string literals should not be used"MAJOR*js:ì	<p>Continuing a string across a linebreak is supported in most script engines, but it is not a part of ECMAScript. Additionally, the whitespace at the beginning of each line can't be safely stripped at compile time, and any whitespace after the slash will result in tricky errors.</p>
<h2>Noncompliant Code Example</h2>

<pre>
var myString = 'A rather long string of English text, an error message \
                actually that just keeps going and going -- an error \
                message to make the Energizer bunny blush (right through \
                those Schwarzenegger shades)! Where was I? Oh yes, \
                you\'ve got an error and all the extraneous whitespace is \
                just gravy.  Have a nice day.';  // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
var myString = 'A rather long string of English text, an error message ' +
    'actually that just keeps going and going -- an error ' +
    'message to make the Energizer bunny blush (right through ' +
    'those Schwarzenegger shades)! Where was I? Oh yes, ' +
    'you\'ve got an error and all the extraneous whitespace is ' +
    'just gravy.  Have a nice day.';
</pre>
€
javascript:S2762∆

javascriptS2762Selections should be stored"MAJOR*js:à<p>
  jQuery doesn't cache elements for you. If you've made a selection that you might need to make again, you should save the selection in a variable rather than making the
  selection repeatedly.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
$( "p" ).hide();
$( "p" ).show();
</pre>

<h2>Compliant Solution</h2>
<pre>
var paragraph = $( "p" );

paragraph.hide();
paragraph.show();
</pre>

<h2>Exception</h2>
<p>
  Stored selections are not updated when the DOM changes. Since variables may need to updated this rule ignores selections that are repeated during an assignment.
</p>
<pre>
var paragraph = $("p");

// ...

paragraph = $("p");
</pre>
ô
"javascript:NamedFunctionExpressionÚ

javascriptNamedFunctionExpression-Named function expressions should not be used"MAJOR*js:ê<p>
  While named function expressions might be useful for debugging purposes, some browsers do not support them correctly (for example Internet Explorer 8).
</p>

<h2>Noncompliant Code Example</h2>
<pre>
f = function fun(){}; // Non-Compliant;  named function expression
</pre>

<h2>Compliant Solution</h2>
<pre>
fun = function(){}; // Compliant; function expression
</pre>

<h2>Exceptions</h2>
<p>ECMAScript 6 generator functions are excluded from this rule.</p>
<pre>
function* f() {} // Compliant; generator function.
</pre>
Ê
javascript:TrailingComment«

javascriptTrailingComment:Comments should not be located at the end of lines of code"INFO*js:·<p>This rule verifies that single-line comments are not located at the end of a line of code.
The main idea behind this rule is that in order to be really readable,
trailing comments would have to be properly written and formatted (correct alignment,
no interference with the visual structure of the code, not too long to be visible) but most often,
automatic code formatters would not handle this correctly: the code would end up less readable.
Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>
<h2>Noncompliant Code Example</h2>
<pre>
var a1 = b + c; // This is a trailing comment that can be very very long
</pre>

<h2>Compliant Solution</h2>
<pre>
// This very long comment is better placed before the line of code
var a2 = b + c;
</pre>

<h2>Exceptions</h2>

<p>By default, the property "legalTrailingCommentPattern" allows to ignore comments containing only one word :</p>
<pre>
doSomething(); //FIXME
</pre>
Æ
javascript:S1154ô

javascriptS11546Results of operations on strings should not be ignored"BLOCKER*js:æ<p>Doing an operation on a string without using the result of the operation is useless and is certainly due to a misunderstanding. </p>
<h2>Noncompliant Code Example</h2>

<pre>
var str = "..."
str.toUpperCase(); // Noncompliant
</pre>
<h2>Compliant Solution</h2>

<pre>
var str = "..."
str = str.toUpperCase();
</pre>
Ó
javascript:S2123Ÿ

javascriptS2123*Values should not be uselessly incremented"CRITICAL*js:âA value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.

<h2>Noncompliant Code Example</h2>
<pre>
var i = 0;
i = i++; // Noncompliant; i is still zero
</pre>

<h2>Compliant Solution</h2>
<pre>
var i = 0;
i++;
</pre>
¡
javascript:SwitchWithoutDefaultù

javascriptSwitchWithoutDefault6"switch" statements should end with a "default" clause"MAJOR*js:µ<p>
The requirement for a final <code>default</code> clause is defensive programming.
The clause should either take appropriate action or contain a suitable comment as to why no action is taken.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
switch (param) {  //missing default clause
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}

switch (param) {
  default: // default clause should be the last one
    error();
    break;
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
}
</pre>

<h2>Compliant Solution</h2>
<pre>
switch (param) {
  case 0:
    doSomething();
    break;
  case 1:
    doSomethingElse();
    break;
  default:
    error();
    break;
}
</pre>

<h2>See</h2>

<ul>
<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>
<li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause</li>
<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>
<li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause</li>
<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>
<li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label</li>
<li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement</li>
<li> <a href="http://cwe.mitre.org/data/definitions/478.html">MITRE, CWE-478</a> - Missing Default Case in Switch Statement</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>
</ul>
˘
javascript:S2769‰

javascriptS27690Selection results should be tested with "length""CRITICAL*js:é<p>
  Once you've made a selection, you typically want to know whether it actually found anything. Since selectors always return an object (the set of selected DOM elements), the
  best way to see whether your selection found anything is to test the returned object's .length property.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if ( $( "div.foo" ) ) {  // Noncompliant
  // this code always runs, even when the selector didn't match any elements
  // ...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
// Testing whether a selection contains elements.
if ( $( "div.foo" ).length > 0) {
  // this code only runs if elements were found
  //  ...
}
</pre>
ª
javascript:FunctionComplexityô

javascriptFunctionComplexity#Functions should not be too complex"MAJOR*js:∆<p>The cyclomatic complexity of functions should not exceed a defined threshold.</p>
<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>
Ó
javascript:ElseIfWithoutElseÕ

javascriptElseIfWithoutElseE"if ... else if" constructs shall be terminated with an "else" clause"MAJOR*js:Ÿ
<p>This rule applies whenever an <code>if</code> statement is followed by one or </p>
<p>more <code>else if</code> statements, the final <code>else if</code> shall be followed by an <code>else</code> statement.</p>
<p>The requirement for a final <code>else</code> statement is defensive programming. </p>
<p>The <code>else</code> statement should either take appropriate action or contain </p>
<p>a suitable comment as to why no action is taken. This is consistent with the </p>
<p>requirement to have a final <code>default</code> clause in a <code>switch</code></p>
<p>statement. </p>

<h2>Noncompliant Code Example</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
}
</pre>

<h2>Compliant Solution</h2>
<pre>
if (x == 0) {
  doSomething();
} else if (x == 1) {
  doSomethingElse();
} else {
  throw new IllegalStateException();
}
</pre>

<h2>See</h2>

<ul>
<li> MISRA C:2004, 14.10</li>
<li> MISRA C++:2008, 6-4-2</li>
<li> MISRA C:2012, 15.7</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/YgE">CERT, MSC01-C</a> - Strive for logical completeness</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/JoIyAQ">CERT, MSC01-CPP</a> - Strive for logical completeness</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/PQHRAw">CERT, MSC64-Java</a> - Strive for logical completeness</li>
</ul>
¨
#javascript:CommentRegularExpressionÑ

javascriptCommentRegularExpressionRegular expression on comment"MAJOR*js:Ø<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>
<p>For example, one can create a rule with the regular expression "<code>.*TODO.*</code>" to match all comment containing "TODO".</p>
<p>Note that, in order to match TODO regardless of the case, the "<code>(?i)</code>" modifier can be prepended to the expression, as in "<code>(?i).*TODO.*</code>".</p>@
º
javascript:CommentedCodeü

javascriptCommentedCode.Sections of code should not be "commented out""MAJOR*js:∆<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>
<p>Unused code should be deleted and can be retrieved from source control history if required.</p>
<h2>See</h2>

<ul>
<li> MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>
<li> MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>
<li> MISRA C++:2008, 2-7-3 - Sections of code should not be "commented out" using C++ comments.</li>
<li> MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>
</ul>
ù	
javascript:WithStatementÄ	

javascriptWithStatement$"with" statements should not be used"MAJOR*js:±<p>
  The use of the <code>with</code> keyword produces an error in JavaScript strict mode code. However, that's not the worst that can be said against <code>with</code>.
</p>
<p>
  Using <code>with</code> allows a short-hand access to an object's properties - assuming they're already set. But use <code>with</code> to access some property not already set in the object,
  and suddenly you're catapulted out of the object scope and into the global scope, creating or overwriting variables there. Since the effects of <code>with</code> are entirely
  dependent on the object passed to it, <code>with</code> can be dangerously unpredictable, and should never be used.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

with (foo) {  // Noncompliant
  y = 4;  // updates foo.x
  x = 3;  // does NOT add a foo.x property; updates x var in outer scope
}
print(foo.x + " " + x); // shows: undefined 3
</pre>

<h2>Compliant Solution</h2>
<pre>
var x = 'a';

var foo = {
  y: 1
}

foo.y = 4;
foo.x = 3;

print(foo.x + " " + x); // shows: 3 a
</pre>
≥
#javascript:NonEmptyCaseWithoutBreakã

javascriptNonEmptyCaseWithoutBreak?Switch cases should end with an unconditional "break" statement"CRITICAL*js:ì<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>
<h2>Noncompliant Code Example</h2>
<pre>
switch (myVariable) {
  case 1:                              
    foo();
    break;
  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?
    doSomething();
  default:                               
    doSomethingElse();
    break;
}
</pre>
<h2>Compliant Solution</h2>
<pre>
switch (myVariable) {
  case 1:                              
    foo();
    break;
  case 2: 
    doSomething();
    break;
  default:                               
    doSomethingElse();
    break;
}
</pre>
<h2>Exceptions</h2>

<p>This rule is relaxed in the following cases:</p>
<pre>
switch (myVariable) {
  case 0:                                // Empty case used to specify the same behavior for a group of cases.
  case 1:                               
    doSomething();
    break;
  case 2:                                // Use of return statement
    return;
  case 3:                                // Use of throw statement
    throw new IllegalStateException();
  case 4:                                // Use of continue statement
    continue;
  default:                               // For the last case, use of break statement is optional 
    doSomethingElse();
}
</pre>

<h2>See</h2>

<ul>
<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.</li>
<li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause</li>
<li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.</li>
<li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause</li>
<li> MISRA C:2012, 16.1 - All switch statements shall be well-formed</li>
<li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause</li>
<li> <a href="http://cwe.mitre.org/data/definitions/484.html">MITRE, CWE-484</a> - Omitted Break Statement in Switch</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/YIFLAQ">CERT, MSC17-C</a> - Finish every set of statements associated with a case label with a break statement</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/ZoFLAQ">CERT, MSC18-CPP</a> - Finish every set of statements associated with a case label with a break statement</li>
</ul>
÷
javascript:ConditionalOperator≥

javascriptConditionalOperator!Avoid use of conditional operator"MINOR*js:·<p>
Condition operators can quickly become hard to be read.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
function sayHello() {
  var a = (a === 'A') ? 'is A' : 'is not A'; // Non-Compliant
}
</pre>
π
javascript:S888•

javascriptS888HRelational operators should be used in "for" loop termination conditions"CRITICAL*js:∏<p>
  Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an infinite loop.
  Using a relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.
{
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
for (var i = 1; i <= 10; i += 2)  // Compliant
{
  //...
}
</pre>

<h2>Exceptions</h2>
<p>An equality operator may be used if the loop counter is not modified within the body of the loop and either:</p>
<ul>
  <li>starts below the ending value and is incremented by 1 on each iteration.</li>
  <li>starts above the ending value and is decremented by 1 on each iteration.</li>
</ul>
<p>Equality operators are also ignored when the test is against <code>null</code>.</p>
<pre>
for (int i = 0; arr[i] != null; i++) {
  // ...
}

for (int i = 0; (item = arr[i]) != null; i++) {
  // ...
}
</pre>

<h2>See</h2>
<ul>
  <li>MISRA C++:2008, 6-5-2</li>
  <li><a href="http://cwe.mitre.org/data/definitions/835">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition ('Infinite Loop')</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/EwDJAQ">CERT, MSC21-C</a> - Use robust loop termination conditions</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/GwDJAQ">CERT, MSC21-CPP</a> - Use inequality to terminate a loop whose counter changes by more than one</li>
</ul>
⁄	
javascript:UnreachableCodeª	

javascriptUnreachableCode:Jump statements should not be followed by other statements"MAJOR*js:‘<p>Jump statements (<code>return</code>, <code>break</code> and <code>continue</code>) and <code>throw</code> expressions move control flow out of the current code block. Typically, any statements in a block that come after a jump or <code>throw</code> are simply wasted keystrokes lying in wait to confuse the unwary. </p>
<h2>Noncompliant Code Example</h2>

<pre>
fun(a) {
  var i = 10;
  return i + a;       // Noncompliant 
  i++;             // this is never executed
}
</pre>
<h2>Compliant Solution</h2>

<pre>
int fun(int a) {
  int i = 10;
  return i + a;
}
</pre>
<h2>See</h2>

<ul>
<li> MISRA C++:2008, 0-1-9 - There shall be no dead code</li>
<li> MISRA C:2012, 2.2 - There shall be no dead code</li>
<li> <a href="http://cwe.mitre.org/data/definitions/561.html">MITRE, CWE-561</a> - Dead Code</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect or is never executed</li>
<li> <a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
∂
javascript:S2137°

javascriptS2137-Local variables should not shadow "undefined""CRITICAL*js:Œ<p>
  It is possible to name a variable <code>undefined</code> in a local scope, but it is a very bad idea because <code>undefined</code> is what's returned for values and properties that have not yet been created. Make <code>undefined</code> a variable and you lose your ability to test whether other variables and properties exist.
 </p>

<h2>Noncompliant Code Example</h2>
<pre>
function foo () {
   var undefined = 1; // Noncompliant
   if (nonExistantVar == undefined) { // this logic doesn't work now
     // ...
   }
 }
 </pre>

<h2>Compliant Solution</h2>
<pre>
function foo () {
   var bob = 1; // anything is better than naming it 'undefined'
   if (nonExistantVar == undefined) {
     // ...
   }
 }
 </pre>
«
javascript:S2138≤

javascriptS2138""undefined" should not be assigned"CRITICAL*js:Í<p>
  <code>undefined</code> is the value you get for variables and properties which have not yet been created. Use the same value to reset an existing variable and you lose the ability to distinguish between a variable that exists but has no value and a variable that does not yet exist. Instead, <code>null</code> should be used, allowing you to tell the difference between a property that has been reset and one that was never created.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var myObject = {};

// ...
myObject.fname = undefined;  // Noncompliant
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>

<h2>Compliant Solution</h2>
<pre>
var myObject = {};

// ...
myObject.fname = null;
// ...

if (myObject.lname == undefined) {
  // property not yet created
}
if (myObject.fname == undefined) {
  // no real way of knowing the true state of myObject.fname
}
</pre>
Í
javascript:BitwiseOperators 

javascriptBitwiseOperators$Bitwise operators should not be used"MAJOR*js:¯<p>JavaScript does not have an integer type, but it does have bitwise operators <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code>, <code>~</code>, <code>&amp;</code>, <code>|</code>. These operators convert their operands from floating point values to integers and back, so they are not as efficient as in C or other languages. Further, they are rarely useful in browser applications, and the similarity to the logical operators can mask some programming errors.</p>
<h2>Noncompliant Code Example</h2>

<pre>
if (a &amp; b) { ... } // Noncompliant; &amp; used in error
var oppositeSigns = ((x ^ y) &lt; 0); // Noncompliant; there's a clearer way to test for this
</pre>
<h2>Compliant Solution</h2>

<pre>
if (a &amp;&amp; b) { ... }
var oppositeSigns = false;
if ( (x &lt; 0 &amp;&amp; y &gt; 0) || (x &gt; 0 &amp;&amp; y &lt; 0) ) {
  oppositeSigns = true;
}
</pre>
Ü
javascript:S1442Ò

javascriptS1442"alert(...)" should not be used"MAJOR*js:Ø<p>alert(...) can be useful for debugging during development, but in production mode this kind of pop-up could expose sensitive information to attackers, and should never be displayed. </p>
<h2>Noncompliant Code Example</h2>
<pre>
if(unexpectedCondition)
{
  alert("Unexpected Condition");
}
</pre>
<h2>See</h2>

<ul>
<li> <a href="http://cwe.mitre.org/data/definitions/489.html">MITRE, CWE-489</a> - Leftover Debug Code</li>
</ul>
¸
javascript:S2770Á

javascriptS2770,Deprecated jQuery methods should not be used"MAJOR*js:ò<p>
  Deprecation is a warning that a method has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging,
  soon-to-be-retired technology.
</p>

<p>This rule raises an issue when any of the following methods is used:</p>

<ul>
  <li><code>.andSelf()</code></li>
  <li><code>.context</code></li>
  <li><code>.die()</code></li>
  <li><code>.error()</code></li>
  <li><code>jQuery.boxModel</code></li>
  <li><code>jQuery.browser</code></li>
  <li><code>jQuery.sub()</code></li>
  <li><code>jQuery.support</code></li>
  <li><code>.live()</code></li>
  <li><code>.load()</code></li>
  <li><code>.selector</code></li>
  <li><code>.size()</code></li>
  <li><code>.toggle()</code></li>
  <li><code>.unload()</code></li>
</ul>
Ÿ
javascript:TrailingWhitespace∑

javascriptTrailingWhitespace.Lines should not end with trailing whitespaces"MINOR*js:Ÿ<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>
<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so. </p>

<h2>Noncompliant Code Example</h2>
<pre>
// The following string will error if there is a whitespace after '\'
var str = "Hello \
World";
</pre>
¿
javascript:S2817´

javascriptS2817$Web SQL databases should not be used"CRITICAL*js:·<p>
  The Web SQL Database standard never saw the light of day. It was first formulated, then deprecated by the W3C and was only implemented in some browsers. (It is not supported in
  Firefox or IE.)
</p>

<p>
  Further, the use of a Web SQL Database poses security concerns, since you only need its name to access such a database.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
var db = window.openDatabase("myDb", "1.0", "Personal secrets stored here", 2*1024*1024);  // Noncompliant
</pre>

<h2>See</h2>
<ul>
  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure</li>
  <li><a href="https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities">OWASP Top Ten 2013 Category A9</a> - Using Components with Known Vulnerabilities</li>
</ul>
€	
javascript:S2814∆	

javascriptS28140Variables and functions should not be redeclared"MAJOR*js:Û<p>
  This rule checks that a declaration doesn't use a name that is already in use. Indeed, it is possible to declare multiple variables and/or functions with the same name,
  but it's hard to predict which declaration will be kept by the JavaScript interpreter.
</p>

<p>Typically, this kind of re-declaration is an error, and can lead to bugs and more generally to confusing code.</p>

<p>This rule also applies to function parameters.</p>

<h2>Noncompliant Code Example</h2>

<pre>
var a = 'foo';
function a() {}   // Noncompliant
console.log(a);   // prints "foo"

function myFunc(arg) {
  var arg = "event"; // Noncompliant, argument value is lost
}

fun(); // prints "bar"

function fun() {
  console.log("foo");
}

fun(); // prints "bar"

function fun() {  // Noncompliant
  console.log("bar");
}

fun(); // prints "bar"
</pre>


<h2>Compliant Solution</h2>

<pre>
var a = 'foo';
function otherName() {}
console.log(a);

function myFunc(arg) {
  var newName = "event";
}

fun(); // prints "foo"

function fun() {
  print("foo");
}

fun(); // prints "foo"

function printBar() {
  print("bar");
}

printBar(); // prints "bar"
</pre>
Æ
javascript:S2898ô

javascriptS28986"[type=...]" should be used to select elements by type"MAJOR*js:¿<p>
  While <code>:&lt;element_type&gt;</code> and <code>[type="&lt;element_type&gt;"]</code> can both be used in jQuery to select elements by their type,
  <code>[type="&lt;element_type&gt;"]</code> is far faster because it can take advantage of the native DOM <code>querySelectorAll()</code> method in modern browsers.
</p>

<p>This rule raises an issue when following selectors are used:</p>

<ul>
  <li><code>:checkbox</code></li>
  <li><code>:file</code></li>
  <li><code>:image</code></li>
  <li><code>:password</code></li>
  <li><code>:radio</code></li>
  <li><code>:reset</code></li>
  <li><code>:text</code></li>
</ul>
<h2>Noncompliant Code Example</h2>

<pre>
  var input = $( "form input:radio" ); // Noncompliant
</pre>

<h2>Compliant Solution</h2>

<pre>
  var input = $( "form input[type=radio]" ); // Compliant
</pre>
π
javascript:NestedIfDepthú

javascriptNestedIfDepth`Control flow statements "if", "for", "while", "switch" and "try" should not be nested too deeply"MAJOR*js:ë<p>
  Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code> and <code>try</code> statements is a key ingredient for making what's known as "Spaghetti code".
  Such code is hard to read, refactor and therefore maintain.
</p>

<h2>Noncompliant Code Example</h2>
<p>
  The following code snippet illustrates this rule with the default threshold of 3.
</p>

<pre>
  if (condition1) {                  // Compliant - depth = 1
    /* ... */
    if (condition2) {                // Compliant - depth = 2
      /* ... */
      for(int i = 0; i < 10; i++) {  // Compliant - depth = 3, not exceeding the limit
        /* ... */
        if (condition4) {            // Non-Compliant - depth = 4
          if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            /* ... */
          }
          return;
        }
      }
    }
  }
</pre>
ı
'javascript:FunctionDefinitionInsideLoop…

javascriptFunctionDefinitionInsideLoop,Functions should not be defined inside loops"MAJOR*js:„<p>
  Defining a function inside of a loops can yield unexpected results because under the covers, only a single instance of the function is defined. Rather than creating new function instances, the loop iterations simply update the function's variables. Instead, the function should be returned.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
var funs = [];
for (var i = 0; i < 13; i++) {
  funs[i] = function() { // Non-Compliant
    return i;
  };
}
print(funs[0]()); // 13 instead of 0
print(funs[1]()); // 13 instead of 1
print(funs[2]()); // 13 instead of 2
print(funs[3]()); // 13 instead of 3
...
</pre>
µ
javascript:S2251†

javascriptS2251IA "for" loop update clause should move the counter in the right direction"BLOCKER*js:≤A <code>for</code> loop with a stop condition that can never be reached, such as one with a counter that moves in the wrong direction, will run infinitely. While there are occasions when an infinite loop is intended, the convention is to construct such loops as <code>while</code> loops. More typically, an infinite <code>for</code> loop is a bug. 

<h2>Noncompliant Code Example</h2>
<pre>
for (var i = 0; i < strings.length; i--) { // Noncompliant;
  //...
}
</pre>

<h2>Compliant Solution</h2>
<pre>
for (var i = 0; i < strings.length; i++) {
  //...
}
</pre>
ì
javascript:S930ˇ

javascriptS930.Function calls should not pass extra arguments"CRITICAL*js:¨<p>You can easily call a JavaScript function with more arguments than the function needs, but the extra arguments will be just ignored by function execution.</p>

<h2>Noncompliant Code Example</h2>
<pre>
function say(a, b) {
  print(a + " " + b);
}

say("hello", "world", "!"); // Noncompliant; last argument is not used
</pre>

<h2>Exceptions</h2>
<p>No issue is reported when <code>arguments</code> is used in the body of the function being called.</p>

<pre>
function doSomething(a, b) {
  compute(arguments);
}

doSomething(1, 2, 3) // Compliant
</pre>
ë
javascript:S138˝

javascriptS138(Functions should not have too many lines"MAJOR*js:≥<p>
  A function that grows too large tends to aggregate too many responsibilities.</br>
  Such function inevitably become harder to understand and therefore harder to maintain.
</p>
<p>
  Above a specific threshold, it is strongly advised to refactor into smaller functions which focus on well-defined tasks.
</p>
<p>
  Those smaller functions will not only be easier to understand, but also probably easier to test.
</p>

<h2>Exceptions</h2>
<p>
  This function ignores Immediately Invoked Function Expressions (IIFE), functions which are created and invoked without ever being assigned a name.
</p>
<pre>
 (function () { // Ignored by this rule

  function open() {  // Classic function declaration; not ignored
    // ...
  }

  function read() {
    // ...
  }

  function readlines() {
    // ...
  }
})();
</pre>
±
%fxcop:UriParametersShouldNotBeStringsá
fxcopUriParametersShouldNotBeStrings,CA1054: URI parameters should not be strings"MAJOR*cs2CA1054:õ<h2>Cause</h2>
<p>
            A type declares a method with a string parameter whose name contains "uri", "Uri", "urn", "Urn", "url", or "Url" and the type does not declare a corresponding overload that takes a <code>System.Uri</code> parameter.
</p>
<h2>Rule Description</h2>
<p>
            This rule splits the parameter name into tokens based on the camel casing convention and checks whether each token equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the rule assumes that the parameter represents a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. If a method takes a string representation of a URI, a corresponding overload should be provided that takes an instance of the <code>Uri</code> class, which provides these services in a safe and secure manner.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the parameter to a <code>Uri</code> type; this is a breaking change. Alternately, provide an overload of the method which takes a <code>Uri</code> parameter; this is a nonbreaking change.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the parameter does not represent a URI.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:UriPropertiesShouldNotBeStrings'>UriPropertiesShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriReturnValuesShouldNotBeStrings'>UriReturnValuesShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:PassSystemUriObjectsInsteadOfStrings'>PassSystemUriObjectsInsteadOfStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:StringUriOverloadsCallSystemUriOverloads'>StringUriOverloadsCallSystemUriOverloads</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182174.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182174.aspx</a></p>
◊
#fxcop:DeclareEventHandlersCorrectlyØ
fxcopDeclareEventHandlersCorrectly(CA1009: Declare event handlers correctly"MAJOR*cs2CA1009:…<h2>Cause</h2>
<p>
            A delegate that handles a public or protected event does not have the correct signature, return type, or parameter names.
</p>
<h2>Rule Description</h2>
<p>
            Event handler methods take two parameters. The first is of type <code>System.Object</code> and is named 'sender'. This is the object that raised the event. The second parameter is of type <code>System.EventArgs</code> and is named 'e'. This is the data that is associated with the event. For example, if the event is raised whenever a file is opened, the event data typically contains the name of the file.
            Event handler methods should not return a value. In the C# programming language, this is indicated by the return type <code>void</code>. An event handler can invoke multiple methods in multiple objects. If the methods were allowed to return a value, multiple return values would occur for each event, and only the value of the last method that was invoked would be available.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, correct the signature, return type, or parameter names of the delegate. For details, see the following example.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:ReviewVisibleEventHandlers'>ReviewVisibleEventHandlers</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182133.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182133.aspx</a></p>
‹
8fxcop:ICollectionImplementationsHaveStronglyTypedMembersü
fxcop2ICollectionImplementationsHaveStronglyTypedMembers?CA1035: ICollection implementations have strongly typed members"MAJOR*cs2CA1035:ç<h2>Cause</h2>
<p>
            A public or protected type implements <code>System.Collections.ICollection</code> but does not provide a strongly typed method for <code>ICollection.CopyTo</code>. The strongly typed version of <code>CopyTo</code> must accept two parameters and cannot have a <code>System.Array</code> or an array of <code>System.Object</code> as its first parameter.
</p>
<h2>Rule Description</h2>
<p>
            This rule requires <code>ICollection</code> implementations to provide strongly typed members so that users are not required to cast arguments to the <code>Object</code> type when they use the functionality that is provided by the interface. This rule assumes that the type that implements <code>ICollection</code> does so to manage a collection of instances of a type that is stronger than <code>Object</code>.


                <code>ICollection</code>
               implements the <code>System.Collections.IEnumerable</code> interface. If the objects in the collection extend <code>System.ValueType</code>, you must provide a strongly typed member for <code>GetEnumerator</code> to avoid the decrease in performance that is caused by boxing. This is not required when the objects of the collection are a reference type.
            To implement a strongly typed version of an interface member, implement the interface members explicitly by using names in the form InterfaceName.InterfaceMemberName, such as <code>CopyTo</code>. The explicit interface members use the data types that are declared by the interface. Implement the strongly typed members by using the interface member name, such as <code>CopyTo</code>. Declare the strongly typed members as public, and declare parameters and return values to be of the strong type that is managed by the collection. The strong types replace weaker types such as <code>Object</code> and <code>Array</code> that are declared by the interface.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement the interface member explicitly (declare it as <code>CopyTo</code>). Add the public strongly typed member, declared as CopyTo, and have it take a strongly typed array as its first parameter.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if you implement a new object-based collection, such as a binary tree, where types that extend the new collection determine the strong type. These types should comply with this rule and expose strongly typed members.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:EnumeratorsShouldBeStronglyTyped'>EnumeratorsShouldBeStronglyTyped</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ListsAreStronglyTyped'>ListsAreStronglyTyped</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/49stb304.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/49stb304.aspx</a></p>
›
%fxcop:FlagsEnumsShouldHavePluralNames≥
fxcopFlagsEnumsShouldHavePluralNames,CA1714: Flags enums should have plural names"MAJOR*cs2CA1714:«<h2>Cause</h2>
<p>
            A public enumeration has the <code>System.FlagsAttribute</code> and its name does not end in 's'.
</p>
<h2>Rule Description</h2>
<p>
            Types that are marked with <code>FlagsAttribute</code> have names that are plural because the attribute indicates that more than one value can be specified. For example, an enumeration that defines the days of the week might be intended for use in an application where you can specify multiple days. This enumeration should have the <code>FlagsAttribute</code> and could be called 'Days'. A similar enumeration that allows only a single day to be specified would not have the attribute, and could be called 'Day'.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Make the name of the enumeration a plural word, or remove the <code>FlagsAttribute</code> attribute if multiple enumeration values should not be specified simultaneously.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a violation if the name is a plural word but does not end in 's'. For example, if the multiple-day enumeration that was described previously were named 'DaysOfTheWeek', this would violate the logic of the rule but not its intent. Such violations should be suppressd.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:MarkEnumsWithFlags'>MarkEnumsWithFlags</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotMarkEnumsWithFlags'>DoNotMarkEnumsWithFlags</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264486.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264486.aspx</a></p>
à
fxcop:AvoidUnmantainableCodeÁ

fxcopAvoidUnmantainableCode!CA1505: Avoid unmaintainable code"MAJOR*cs2CA1505:è
<h2>Cause</h2>
<p>
            A type or method has a low maintainability index value.
</p>
<h2>Rule Description</h2>
<p>
            The maintainability index is calculated by using the following metrics: lines of code, program volume, and cyclomatic complexity. Program volume is a measure of the difficulty of understanding of a type or method that is based on the number of operators and operands in the code. Cyclomatic complexity is a measure of the structural complexity of the type or method. You can learn more about code metrics at Measuring Complexity and Maintainability of Managed Code.
            A low maintainability index indicates that a type or method is probably difficult to maintain and would be a good candidate to redesign.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix this violation, redesign the type or method and try to split it into smaller and more focused types or methods.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Exclude this warning when a type or method is still considered maintainable despite its large size or when the type or method cannot be split.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb386043.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386043.aspx</a></p>
Á

,fxcop:DoNotDecreaseInheritedMemberVisibility∂

fxcop&DoNotDecreaseInheritedMemberVisibility3CA2222: Do not decrease inherited member visibility"MAJOR*cs2CA2222:º	<h2>Cause</h2>
<p>
            A private method in an unsealed type has a signature that is identical to a public method declared in a base type. The private method is not final.
</p>
<h2>Rule Description</h2>
<p>
            You should not change the access modifier for inherited members. Changing an inherited member to private does not prevent callers from accessing the base class implementation of the method. If the member is made private and the type is unsealed, inheriting types can call the last public implementation of the method in the inheritance hierarchy. If you must change the access modifier, either the method should be marked final or its type should be sealed to prevent the method from being overridden.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the access to be non-private. Alternatively, if your programming language supports it, you can make the method final.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182332.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182332.aspx</a></p>
é

fxcop:AvoidUnusedPrivateFieldsÎ	
fxcopAvoidUnusedPrivateFields#CA1823: Avoid unused private fields"MAJOR*cs2CA1823:è	<h2>Cause</h2>
<p>
            This rule is reported when a private field in your code exists but is not used by any code path.
</p>
<h2>Rule Description</h2>
<p>
            Private fields were detected that do not appear to be accessed in the assembly.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the field or add code that uses it.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidUninstantiatedInternalClasses'>AvoidUninstantiatedInternalClasses</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ReviewUnusedParameters'>ReviewUnusedParameters</a><br/>




                <a href='/coding_rules#rule_key=fxcop:RemoveUnusedLocals'>RemoveUnusedLocals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidUncalledPrivateCode'>AvoidUncalledPrivateCode</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms245042.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms245042.aspx</a></p>
Â
fxcop:DeclarePInvokesCorrectly¬
fxcopDeclarePInvokesCorrectly#CA1415: Declare P/Invokes correctly"MAJOR*cs2CA1415:Ê<h2>Cause</h2>
<p>
            A platform invoke method is incorrectly declared.
</p>
<h2>Rule Description</h2>
<p>
            A platform invoke method accesses unmanaged code and is defined by using the <code>Declare</code> keyword in Visual Basic or the <code>System.Runtime.InteropServices.DllImportAttribute</code>. Currently, this rule looks for platform invoke method declarations that target Win32 functions that have a pointer to an OVERLAPPED structure parameter and the corresponding managed parameter is not a pointer to a <code>System.Threading.NativeOverlapped</code> structure.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, correctly declare the platform invoke method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182204.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182204.aspx</a></p>
ÿ
0fxcop:ReviewSqlQueriesForSecurityVulnerabilities£
fxcop*ReviewSqlQueriesForSecurityVulnerabilities7CA2100: Review SQL queries for security vulnerabilities"MAJOR*cs2CA2100:°<h2>Cause</h2>
<p>
            A method sets the <code>IDbCommand.CommandText</code> property by using a string that is built from a string argument to the method.
</p>
<h2>Rule Description</h2>
<p>
            This rule assumes that the string argument contains user input. A SQL command string that is built from user input is vulnerable to SQL injection attacks. In a SQL injection attack, a malicious user supplies input that alters the design of a query in an attempt to damage or gain unauthorized access to the underlying database. Typical techniques include injection of a single quotation mark or apostrophe, which is the SQL literal string delimiter; two dashes, which signifies a SQL comment; and a semicolon, which indicates that a new command follows. If user input must be part of the query, use one of the following, listed in order of effectiveness, to reduce the risk of attack.
            <ul>
              <li>
                Use a stored procedure.
              </li>
              <li>
                Use a parameterized command string.
              </li>
              <li>
                Validate the user input for both type and content before you build the command string.
              </li>
            </ul>
            The following .NET Framework types implement the <code>CommandText</code> property or provide constructors that set the property by using a string argument.
            <ul>
              <li>


                    <code>System.Data.Odbc.OdbcCommand</code>
                   and <code>System.Data.Odbc.OdbcDataAdapter</code>
              </li>
              <li>


                    <code>System.Data.OleDb.OleDbCommand</code>
                   and <code>System.Data.OleDb.OleDbDataAdapter</code>
              </li>
              <li>


                    <code>System.Data.OracleClient.OracleCommand</code>
                   and <code>System.Data.OracleClient.OracleDataAdapter</code>
              </li>
              <li>

                  [System.Data.SqlServerCe.SqlCeCommand] and  [System.Data.SqlServerCe.SqlCeDataAdapter]
              </li>
              <li>


                    <code>System.Data.SqlClient.SqlCommand</code>
                   and <code>System.Data.SqlClient.SqlDataAdapter</code>
              </li>
            </ul>
            Notice that this rule is violated when the ToString method of a type is used explicitly or implicitly to construct the query string. The following is an example.









            <pre>
int x = 10;
string query = "SELECT TOP " + x.ToString() + " FROM Table";
</pre>




The rule is violated because a malicious user can override the ToString() method.The rule also is violated when ToString is used implicitly.









            <pre>
int x = 10;
string query = String.Format("SELECT TOP {0} FROM Table", x);
</pre>











                How to Fix Violations





</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the command text does not contain any user input.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182310.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182310.aspx</a></p>
√
#fxcop:ImplementIDisposableCorrectlyõ
fxcopImplementIDisposableCorrectly'CA1063: Implement IDisposable correctly"MAJOR*cs2CA1063:∂<h2>Cause</h2>
<p>


                <code>IDisposable</code>
               is not implemented correctly. Some reasons for this problem are listed here:
            <ul>
              <li>
                IDisposable is re-implemented in the class.
              </li>
              <li>
                Finalize is re-overridden.
              </li>
              <li>
                Dispose is overridden.
              </li>
              <li>
                Dispose() is not public, sealed, or named Dispose.
              </li>
              <li>
                Dispose(bool) is not protected, virtual, or unsealed.
              </li>
              <li>
                In unsealed types, Dispose() must call Dispose(true).
              </li>
              <li>
                For unsealed types, the Finalize implementation does not call either or both Dispose(bool) or the case class finalizer.
              </li>
            </ul>
            Violation of any one of these patterns will trigger this warning.
            Every unsealed root IDisposable type must provide its own protected virtual void Dispose(bool) method. Dispose() should call Dipose(true) and Finalize should call Dispose(false). If you are creating an unsealed root IDisposable type, you must define Dispose(bool) and call it. For more information, see <code>Cleaning Up Unmanaged Resources</code> in the Framework Design Guidelines section of the .NET Framework documentation.
</p>
<h2>Rule Description</h2>
<p>
            All IDisposable types should implement the Dispose pattern correctly.
</p>
<h2>How to Fix Violations</h2>
<p>
            Examine your code and determine which of the following resolutions will fix this violation.
            <ul>
              <li>
                Remove IDisposable from the list of interfaces that are implemented by {0} and override the base class Dispose implementation instead.
              </li>
              <li>
                Remove the finalizer from type {0}, override Dispose(bool disposing), and put the finalization logic in the code path where 'disposing' is false.
              </li>
              <li>
                Remove {0}, override Dispose(bool disposing), and put the dispose logic in the code path where 'disposing' is true.
              </li>
              <li>
                Ensure that {0} is declared as public and sealed.
              </li>
              <li>
                Rename {0} to 'Dispose' and make sure that it is declared as public and sealed.
              </li>
              <li>
                Make sure that {0} is declared as protected, virtual, and unsealed.
              </li>
              <li>
                Modify {0} so that it calls Dispose(true), then calls GC.SuppressFinalize on the current object instance ('this' or 'Me' in Visual Basic), and then returns.
              </li>
              <li>
                Modify {0} so that it calls Dispose(false) and then returns.
              </li>
              <li>
                If you are writing an unsealed root IDisposable class, make sure that the implementation of IDisposable follows the pattern that is described earlier in this section.
              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms244737.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms244737.aspx</a></p>
Ù
fxcop:DeclareTypesInNamespaces—
fxcopDeclareTypesInNamespaces#CA1050: Declare types in namespaces"MAJOR*cs2CA1050:ı<h2>Cause</h2>
<p>
            A public or protected type is defined outside the scope of a named namespace.
</p>
<h2>Rule Description</h2>
<p>
            Types are declared in namespaces to prevent name collisions, and as a way to organize related types in an object hierarchy. Types that are outside any named namespace are in a global namespace that cannot be referenced in code.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, place the type in a namespace.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Although you never have to suppress a warning from this rule, it is safe to do this when the assembly will never be used together with other assemblies.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182134.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182134.aspx</a></p>
Ô
&fxcop:DisposableFieldsShouldBeDisposedƒ
fxcop DisposableFieldsShouldBeDisposed,CA2213: Disposable fields should be disposed"MAJOR*cs2CA2213:◊<h2>Cause</h2>
<p>
            A type that implements <code>System.IDisposable</code> declares fields that are of types that also implement <code>IDisposable</code>. The <code>Dispose</code> method of the field is not called by the <code>Dispose</code> method of the declaring type.
</p>
<h2>Rule Description</h2>
<p>
            A type is responsible for disposing of all its unmanaged resources; this is accomplished by implementing <code>IDisposable</code>. This rule checks to see whether a disposable type T declares a field F that is an instance of a disposable type FT. For each field F, the rule attempts to locate a call to FT.Dispose. The rule searches the methods called by T.Dispose, and one level lower (the methods called by the methods called by FT.Dispose).
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call <code>Dispose</code> on fields that are of types that implement <code>IDisposable</code> if you are responsible for allocating and releasing the unmanaged resources held by the field.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if you are not responsible for releasing the resource held by the field, or if the call to <code>Dispose</code> occurs at a deeper calling level than the rule checks.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182328.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182328.aspx</a></p>
ı
'fxcop:DoNotDeclareVisibleInstanceFields…
fxcop!DoNotDeclareVisibleInstanceFields.CA1051: Do not declare visible instance fields"MAJOR*cs2CA1051:Ÿ<h2>Cause</h2>
<p>
            An externally visible type has an externally visible instance field.
</p>
<h2>Rule Description</h2>
<p>
            The primary use of a field should be as an implementation detail. Fields should be <code>private</code> or <code>internal</code> and should be exposed by using properties. It is as easy to access a property as it is to access a field, and the code in the accessors of a property can change as the features of the type expand without introducing breaking changes. Properties that just return the value of a private or internal field are optimized to perform on par with accessing a field; very little performance gain is associated with the use of externally visible fields over properties.
            Externally visible refers to <code>public</code>, <code>protected</code>, and <code>protected internal</code> (<code>Public</code>, <code>Protected</code>, and <code>Protected Friend</code> in Visual Basic) accessibility levels.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the field <code>private</code> or <code>internal</code> and expose it by using an externally visible property.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Externally visible fields do not provide any benefits that are unavailable to properties. Additionally, public fields cannot be protected by Link Demands. See <a href='/coding_rules#rule_key=fxcop:SecuredTypesShouldNotExposeFields'>SecuredTypesShouldNotExposeFields</a>.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:SecuredTypesShouldNotExposeFields'>SecuredTypesShouldNotExposeFields</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182141.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182141.aspx</a></p>
û
,fxcop:IdentifiersShouldNotContainUnderscoresÌ

fxcop&IdentifiersShouldNotContainUnderscores2CA1707: Identifiers should not contain underscores"MAJOR*cs2CA1707:Ù	<h2>Cause</h2>
<p>
            The name of an identifier contains the underscore (_) character.
</p>
<h2>Rule Description</h2>
<p>
            By convention, identifier names do not contain the underscore (_) character. The rule checks namespaces, types, members, and parameters.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Remove all underscore characters from the name.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldBeCasedCorrectly'>IdentifiersShouldBeCasedCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldDifferByMoreThanCase'>IdentifiersShouldDifferByMoreThanCase</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182245.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182245.aspx</a></p>
–?
&fxcop:MovePInvokesToNativeMethodsClass•?
fxcop MovePInvokesToNativeMethodsClass-CA1060: Move P/Invokes to NativeMethods class"MAJOR*cs2CA1060:∑><h2>Cause</h2>
<p>
            A method uses Platform Invocation Services to access unmanaged code and is not a member of one of the NativeMethods classes.
</p>
<h2>Rule Description</h2>
<p>
            Platform Invocation methods, such as those that are marked by using the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute, or methods that are defined by using the <code>Declare</code> keyword in Visual Basic, access unmanaged code. These methods should be in one of the following classes:
            <ul>
              <li>

                  NativeMethods - This class does not suppress stack walks for unmanaged code permission. (<code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> must not be applied to this class.) This class is for methods that can be used anywhere because a stack walk will be performed.
              </li>
              <li>

                  SafeNativeMethods - This class suppresses stack walks for unmanaged code permission. (<code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> is applied to this class.) This class is for methods that are safe for anyone to call. Callers of these methods are not required to perform a full security review to make sure that the usage is secure because the methods are harmless for any caller.
              </li>
              <li>

                  UnsafeNativeMethods - This class suppresses stack walks for unmanaged code permission. (<code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> is applied to this class.) This class is for methods that are potentially dangerous. Any caller of these methods must perform a full security review to make sure that the usage is secure because no stack walk will be performed.
              </li>
            </ul>
            These classes are declared as <code>internal</code> (<code>Friend</code>, in Visual Basic) and declare a private constructor to prevent new instances from being created. The methods in these classes should be <code>static</code> and <code>internal</code> (<code>Shared</code> and <code>Friend</code> in Visual Basic).
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, move the method to the appropriate NativeMethods class. For most applications, moving P/Invokes to a new class that is named NativeMethods is enough.
            However, if you are developing libraries for use in other applications, you should consider defining two other classes that are called SafeNativeMethods and UnsafeNativeMethods. These classes resemble the NativeMethods class; however, they are marked by using a special attribute called SuppressUnmanagedCodeSecurityAttribute. When this attribute is applied, the runtime does not perform a full stack walk to make sure that all callers have the UnmanagedCode permission. The runtime ordinarily checks for this permission at startup. Because the check is not performed, it can greatly improve performance for calls to these unmanaged methods, It also enables code that has limited permissions to call these methods.
            However, you should use this attribute with great care. It can have serious security implications if it is implemented incorrectly..
            For information about how to implement the methods, see the NativeMethods Example, SafeNativeMethods Example, and UnsafeNativeMethods Example.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>

<h3>Description</h3>
<p>
                Because the NativeMethods class should not be marked by using SuppressUnmanagedCodeSecurityAttribute, P/Invokes that are put in it will require UnmanagedCode permission. Because most applications run from the local computer and run together with full trust, this is usually not a problem. However, if you are developing reusable libraries, you should consider defining a SafeNativeMethods or UnsafeNativeMethods class.
                The following example shows an Interaction.Beep method that wraps the MessageBeep function from user32.dll. The MessageBeep P/Invoke is put in the NativeMethods class.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Runtime.InteropServices;
using System.ComponentModel;

public¬†static¬†class Interaction
{
    // Callers require Unmanaged permission        ¬†
    public¬†static¬†void Beep()
    {
        // No need to demand a permission as callers of Interaction.Beep            ¬†
        // will require UnmanagedCode permission            ¬†
        if (!NativeMethods.MessageBeep(-1))
            throw¬†new Win32Exception();
    }
}

internal¬†static¬†class NativeMethods
{
    [DllImport("user32.dll", CharSet = CharSet.Auto)]
    [return: MarshalAs(UnmanagedType.Bool)]
    internal¬†static¬†extern¬†bool MessageBeep(int uType);
}
</pre>





</p>
<h2>SafeNativeMethods Example</h2>

<h3>Description</h3>
<p>
                P/Invoke methods that can be safely exposed to any application and that do not have any side effects should be put in a class that is named SafeNativeMethods. You do not have to demand permissions and you do not have to pay much attention to where they are called from.
                The following example shows an Environment.TickCount property that wraps the GetTickCount function from kernel32.dll.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Runtime.InteropServices;
using System.Security;

public¬†static¬†class Environment
{
    // Callers do not require UnmanagedCode permission       ¬†
    public¬†static¬†int TickCount
    {
        get
        {
            // No need to demand a permission in place of               ¬†
            // UnmanagedCode as GetTickCount is considered              ¬†
            // a safe method              ¬†
            return SafeNativeMethods.GetTickCount();
        }
    }
}

[SuppressUnmanagedCodeSecurityAttribute]
internal¬†static¬†class SafeNativeMethods
{
    [DllImport("kernel32.dll", CharSet=CharSet.Auto, ExactSpelling=true)]
    internal¬†static¬†extern¬†int GetTickCount();
}
</pre>





</p>
<h2>UnsafeNativeMethods Example</h2>

<h3>Description</h3>
<p>
                P/Invoke methods that cannot be safely called and that could cause side effects should be put in a class that is named UnsafeNativeMethods. These methods should be rigorously checked to make sure that they are not exposed to the user unintentionally. The rule <a href='/coding_rules#rule_key=fxcop:ReviewSuppressUnmanagedCodeSecurityUsage'>ReviewSuppressUnmanagedCodeSecurityUsage</a> can help with this. Alternatively, the methods should have another permission that is demanded instead of UnmanagedCode when they use them.
                The following example shows a Cursor.Hide method that wraps the ShowCursor function from user32.dll.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Runtime.InteropServices;
using System.Security;
using System.Security.Permissions;

public¬†static¬†class Cursor
{
    // Callers do not require UnmanagedCode permission, however,       ¬†
    // they do require UIPermissionWindow.AllWindows       ¬†
    public¬†static¬†void Hide()
    {
        // Need to demand an appropriate permission           ¬†
        // in  place of UnmanagedCode permission as            ¬†
        // ShowCursor is not considered a safe method           ¬†
        new UIPermission(UIPermissionWindow.AllWindows).Demand();
        UnsafeNativeMethods.ShowCursor(false);
    }
}

[SuppressUnmanagedCodeSecurityAttribute]
internal¬†static¬†class UnsafeNativeMethods
{
    [DllImport("user32.dll", CharSet = CharSet.Auto, ExactSpelling = true)]
    internal¬†static¬†extern¬†int ShowCursor([MarshalAs(UnmanagedType.Bool)]bool bShow);
}
</pre>





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182161.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182161.aspx</a></p>
…

fxcop:RemoveCallsToGCKeepAlive¶

fxcopRemoveCallsToGCKeepAlive$CA2004: Remove calls to GC.KeepAlive"MAJOR*cs2CA2004:…	<h2>Cause</h2>
<p>
            Classes use <code>SafeHandle</code> but still contain calls to <code>GC.KeepAlive</code>.
</p>
<h2>Rule Description</h2>
<p>
            If you are converting to <code>SafeHandle</code> usage, remove all calls to <code>GC.KeepAlive </code>(object). In this case, classes should not have to call <code>GC.KeepAlive</code>,<code> </code>assuming they do not have a finalizer but rely on <code>SafeHandle</code> to complete the OS handle for them.  Although the cost of leaving in a call to <code>GC.KeepAlive</code> might be negligible as measured by performance, the perception that a call to <code>GC.KeepAlive</code> is either necessary or sufficient to solve a lifetime issue that might no longer exist makes the code harder to maintain.
</p>
<h2>How to Fix Violations</h2>
<p>
            Remove calls to <code>GC.KeepAlive</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You can suppress this warning only if it is not technically correct to convert to <code>SafeHandle</code> usage in your class.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182293.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182293.aspx</a></p>
ò
!fxcop:DoNotNameEnumValuesReservedÚ
fxcopDoNotNameEnumValuesReserved*CA1700: Do not name enum values 'Reserved'"MAJOR*cs2CA1700:å<h2>Cause</h2>
<p>
            The name of an enumeration member contains the word "reserved".
</p>
<h2>Rule Description</h2>
<p>
            This rule assumes that an enumeration member that has a name that contains "reserved" is not currently used but is a placeholder to be renamed or removed in a future version. Renaming or removing a member is a breaking change. You should not expect users to ignore a member just because its name contains "reserved", nor can you rely on users to read or abide by documentation. Furthermore, because reserved members appear in object browsers and smart integrated development environments, they can cause confusion about which members are actually being used.
            Instead of using a reserved member, add a new member to the enumeration in the future version. In most cases the addition of the new member is not a breaking change, as long as the addition does not cause the values of the original members to change.



            In a limited number of cases the addition of a member is a breaking change even when the original members retain their original values. Primarily, the new member cannot be returned from existing code paths without breaking callers that use a <code>switch</code> (<code>Select</code> in Visual Basic) statement on the return value that encompasses the whole member list and that throw an exception in the default case. A secondary concern is that client code might not handle the change in behavior from reflection methods such as <code>Enum.IsDefined</code>. Accordingly, if the new member has to be returned from existing methods or a known application incompatibility occurs because of poor reflection usage, the only nonbreaking solution is to:

              <li>
                Add a new enumeration that contains the original and new members.
              </li>
              <li>
                Mark the original enumeration with the <code>System.ObsoleteAttribute</code> attribute.
              </li>

             Follow the same procedure for any externally visible types or members that expose the original enumeration.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove or rename the member.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule for a member that is currently used or for libraries that have previously shipped.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotMarkEnumsWithFlags'>DoNotMarkEnumsWithFlags</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotPrefixEnumValuesWithTypeName'>DoNotPrefixEnumValuesWithTypeName</a><br/>




                <a href='/coding_rules#rule_key=fxcop:EnumStorageShouldBeInt32'>EnumStorageShouldBeInt32</a><br/>




                <a href='/coding_rules#rule_key=fxcop:EnumsShouldHaveZeroValue'>EnumsShouldHaveZeroValue</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkEnumsWithFlags'>MarkEnumsWithFlags</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182236.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182236.aspx</a></p>
Ì
4fxcop:ProvideDeserializationMethodsForOptionalFields¥
fxcop.ProvideDeserializationMethodsForOptionalFields;CA2239: Provide deserialization methods for optional fields"MAJOR*cs2CA2239:™<h2>Cause</h2>
<p>
            A type has a field that is marked with the <code>System.Runtime.Serialization.OptionalFieldAttribute</code> attribute and the type does not provide de-serialization event handling methods.
</p>
<h2>Rule Description</h2>
<p>
            The <code>OptionalFieldAttribute</code> attribute has no effect on serialization; a field marked with the attribute is serialized. However, the field is ignored on de-serialization and retains the default value associated with its type. De-serialization event handlers should be declared to set the field during the de-serialization process.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add de-serialization event handling methods to the type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the field should be ignored during the de-serialization process.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallBaseClassMethodsOnISerializableTypes'>CallBaseClassMethodsOnISerializableTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementISerializableCorrectly'>ImplementISerializableCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationMethodsCorrectly'>ImplementSerializationMethodsCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAllNonSerializableFields'>MarkAllNonSerializableFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkISerializableTypesWithSerializable'>MarkISerializableTypesWithSerializable</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SecureSerializationConstructors'>SecureSerializationConstructors</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182362.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182362.aspx</a></p>
∫"
!fxcop:OperationsShouldNotOverflowî"
fxcopOperationsShouldNotOverflow&CA2233: Operations should not overflow"MAJOR*cs2CA2233:≤!<h2>Cause</h2>
<p>
            A method performs an arithmetic operation and does not validate the operands beforehand to prevent overflow.
</p>
<h2>Rule Description</h2>
<p>
            Arithmetic operations should not be performed without first validating the operands to make sure that the result of the operation is not outside the range of possible values for the data types involved. Depending on the execution context and the data types involved, arithmetic overflow can result in either a <code>System.OverflowException</code> or the most significant bits of the result discarded.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, validate the operands before you perform the operation.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the possible values of the operands will never cause the arithmetic operation to overflow.
</p>
<h2>Example of a Violation</h2>

<h3>Description</h3>
<p>
                A method in the following example manipulates an integer that violates this rule. Visual Basic requires the Remove integer overflow option to be disabled for this to fire.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    public¬†static¬†class Calculator
    {
        public¬†static¬†int Decrement(int input)
        {
            // Violates this rule
            input--;
            return input;
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                If the method in this example is passed MinValue, the operation would underflow. This causes the most significant bit of the result to be discarded. The following code shows how this occurs.
                [C#]









            <pre>
public static void Main()
{
¬†¬†¬†¬†int value = int.MinValue;¬†¬†¬†¬†// int.MinValue is -2147483648
¬†¬†¬†¬†value = Calculator.Decrement(value);
¬†¬†¬†¬†Console.WriteLine(value);
}
</pre>




[VB]









            <pre>
Public Shared Sub Main()
¬†¬†¬†¬†Dim value = Integer.MinValue¬†¬†¬†¬†' Integer.MinValue is -2147483648
¬†¬†¬†¬†value = Calculator.Decrement(value)
¬†¬†¬†¬†Console.WriteLine(value)
End Sub
</pre>











                    Output





</p>
<h2>Fix with Input Parameter Validation</h2>

<h3>Description</h3>
<p>
                The following example fixes the previous violation by validating the value of input.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    public¬†static¬†class Calculator
    {
        public¬†static¬†int Decrement(int input)
        {
            if (input == int.MinValue)
                throw¬†new ArgumentOutOfRangeException("input", "input must be greater than Int32.MinValue");

            input--;
            return input;
        }
    }
}
</pre>





</p>
<h2>Fix with a Checked Block</h2>

<h3>Description</h3>
<p>
                The following example fixes the previous violation by wrapping the operation in a checked block. If the operation causes an overflow, a <code>System.OverflowException</code> will be thrown.
                Note that checked blocks are not supported in Visual Basic.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    public¬†static¬†class Calculator
    {
        public¬†static¬†int Decrement(int input)
        {
            checked
            {
                input--;
            }

            return input;
        }
    }
}
</pre>





</p>
<h2>Turn on Checked Arithmetic Overflow/Underflow</h2>
<p>
            If you turn on checked arithmetic overflow/underflow in C#, it is equivalent to wrapping every integer operation in a checked block.

              To turn on checked arithmetic overflow/underflow in C#


              <li>
                In Solution Explorer, right-click your project and choose Properties.
              </li>
              <li>
                Select the Build tab and click Advanced.
              </li>
              <li>
                Select Check for arithmetic overflow/underflow and click OK.
              </li>

</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182354.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182354.aspx</a></p>
ã!
&fxcop:DoNotRaiseReservedExceptionTypes‡ 
fxcop DoNotRaiseReservedExceptionTypes-CA2201: Do not raise reserved exception types"MAJOR*cs2CA2201:Ú<h2>Cause</h2>
<p>
            A method raises an exception type that is too general or that is reserved by the runtime.
</p>
<h2>Rule Description</h2>
<p>
            The following exception types are too general to provide sufficient information to the user:
            <ul>
              <li>


                    <code>System.Exception</code>


              </li>
              <li>


                    <code>System.ApplicationException</code>


              </li>
              <li>


                    <code>System.SystemException</code>


              </li>
            </ul>
            The following exception types are reserved and should be thrown only by the common language runtime:
            <ul>
              <li>


                    <code>System.ExecutionEngineException</code>


              </li>
              <li>


                    <code>System.IndexOutOfRangeException</code>


              </li>
              <li>


                    <code>System.NullReferenceException</code>


              </li>
              <li>


                    <code>System.OutOfMemoryException</code>


              </li>
            </ul>

              Do Not Throw General Exceptions

            If you throw a general exception type, such as <code>Exception</code> or <code>SystemException</code> in a library or framework, it forces¬†consumers to catch all exceptions, including unknown exceptions that they do not know how to handle.
            Instead, either throw a more derived type that already exists in the framework, or create your own type that derives from <code>Exception</code>.

              Throw Specific Exceptions

            The following table shows parameters and which exceptions to throw when you validate the parameter, including the value parameter in the set accessor of a property:







                    Parameter Description


                    Exception






                        <code>null</code>
                       reference¬†




                        <code>System.ArgumentNullException</code>






                    Outside the allowed range of values (such as an index for a collection or list)




                        <code>System.ArgumentOutOfRangeException</code>






                    Invalid <code>enum</code> value




                        <code>System.ComponentModel.InvalidEnumArgumentException</code>






                    Contains a format that does not meet the parameter specifications of a method (such as the format string for ToString(String))




                        <code>System.FormatException</code>






                    Otherwise invalid




                        <code>System.ArgumentException</code>






            When an operation is invalid for the current state of an object¬†¬†¬† throw <code>System.InvalidOperationException</code>
            When an operation is performed on an object that has been disposed¬†¬†¬† throw <code>System.ObjectDisposedException</code>
            When an operation is not supported (such as in an overridden Stream.Write in a Stream opened for reading)¬†¬†¬† throw <code>System.NotSupportedException</code>
            When a conversion would result in an overflow (such as in a explicit cast operator overload)¬†¬†¬† throw <code>System.OverflowException</code>
            For all other situations, consider creating your own type that derives from <code>Exception</code> and throw that.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the type of the thrown exception to a specific type that is not one of the reserved types.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotCatchGeneralExceptionTypes'>DoNotCatchGeneralExceptionTypes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182338.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182338.aspx</a></p>
À
"fxcop:MarkAllNonSerializableFields§
fxcopMarkAllNonSerializableFields(CA2235: Mark all non-serializable fields"MAJOR*cs2CA2235:ø<h2>Cause</h2>
<p>
            An instance field of a type that is not serializable is declared in a type that is serializable.
</p>
<h2>Rule Description</h2>
<p>
            A serializable type is one that is marked with the <code>System.SerializableAttribute</code> attribute. When the type is serialized, a <code>System.Runtime.Serialization.SerializationException</code> exception is thrown if a type contains an instance field of a type that is not serializable.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, apply the <code>System.NonSerializedAttribute</code> attribute to the field that is not serializable.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Only suppress a warning from this rule if a <code>System.Runtime.Serialization.ISerializationSurrogate</code> type is declared that allows instances of the field to be serialized and deserialized.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallBaseClassMethodsOnISerializableTypes'>CallBaseClassMethodsOnISerializableTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementISerializableCorrectly'>ImplementISerializableCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationMethodsCorrectly'>ImplementSerializationMethodsCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkISerializableTypesWithSerializable'>MarkISerializableTypesWithSerializable</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ProvideDeserializationMethodsForOptionalFields'>ProvideDeserializationMethodsForOptionalFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SecureSerializationConstructors'>SecureSerializationConstructors</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182349.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182349.aspx</a></p>
÷
,fxcop:UseIntegralOrStringArgumentForIndexers•
fxcop&UseIntegralOrStringArgumentForIndexers4CA1043: Use integral or string argument for indexers"MAJOR*cs2CA1043:™<h2>Cause</h2>
<p>
            A public or protected type contains a public or protected indexer that uses an index type other than System.Int32, System.Int64, <code>System.Object</code>, or <code>System.String</code>.
</p>
<h2>Rule Description</h2>
<p>
            Indexers, that is, indexed properties, should use integer or string types for the index. These types are typically used for indexing data structures and increase the usability of the library. Use of the <code>Object</code> type should be restricted to those cases where the specific integer or string type cannot be specified at design time. If the design requires other types for the index, reconsider whether the type represents a logical data store. If it does not represent a logical data store, use a method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the index to an integer or string type, or use a method instead of the indexer.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only after carefully considering the need for the nonstandard indexer.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IndexersShouldNotBeMultidimensional'>IndexersShouldNotBeMultidimensional</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UsePropertiesWhereAppropriate'>UsePropertiesWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182180.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182180.aspx</a></p>
Õ
*fxcop:TestForEmptyStringsUsingStringLengthû
fxcop$TestForEmptyStringsUsingStringLength2CA1820: Test for empty strings using string length"MAJOR*cs2CA1820:ß<h2>Cause</h2>
<p>
            A string is compared to the empty string by using <code>Object.Equals</code>.
</p>
<h2>Rule Description</h2>
<p>
            Comparing strings using the <code>String.Length</code> property or the <code>String.IsNullOrEmpty</code> method is significantly faster than using <code>Equals</code>. This is because <code>Equals</code> executes significantly more MSIL instructions than either <code>IsNullOrEmpty</code> or the number of instructions executed to retrieve the <code>Length</code> property value and compare it to zero.
            You should be aware that <code>Equals</code> and <code>Length</code> == 0 behave differently for null strings. If you try to get the value of the <code>Length</code> property on a null string, the common language runtime throws a <code>System.NullReferenceException</code>. If you perform a comparison between a null string and the empty string, the common language runtime does not throw an exception; the comparison returns <code>false</code>. Testing for null does not significantly affect the relative performance of these two approaches. When targeting .NET Framework¬†2.0, use the <code>IsNullOrEmpty</code> method. Otherwise, use the <code>Length</code> == comparison whenever possible.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the comparison to use the <code>Length</code> property and test for the null string. If targeting .NET Framework¬†2.0, use the <code>IsNullOrEmpty</code> method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if performance is not an issue.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182279.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182279.aspx</a></p>
˙

#fxcop:UseParamsForVariableArguments“

fxcopUseParamsForVariableArguments)CA2230: Use params for variable arguments"MAJOR*cs2CA2230:Î	<h2>Cause</h2>
<p>
            A public or protected type contains a public or protected method that uses the <code>VarArgs</code> calling convention.
</p>
<h2>Rule Description</h2>
<p>
            The <code>VarArgs</code> calling convention is used with certain method definitions that take a variable number of parameters. A method using the <code>VarArgs</code> calling convention is not Common Language Specification (CLS) compliant and might not be accessible across programming languages.
            In C#, the <code>VarArgs</code> calling convention is used when a method's parameter list ends with the <code>__arglist</code> keyword. Visual Basic does not support the <code>VarArgs</code> calling convention, and Visual C++  allows its use only in unmanaged code that uses the ellipse <code>...</code> notation.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule in C#, use the params (C# Reference) keyword instead of <code>__arglist</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182366.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182366.aspx</a></p>
ß
7fxcop:DefaultConstructorsMustHaveConsistentTransparencyÎ
fxcop1DefaultConstructorsMustHaveConsistentTransparency[CA2132: Default constructors must be at least as critical as base type default constructors"MAJOR*cs2CA2132:æ<h2>Cause</h2>
<p>
            The transparency attribute of the default constructor of a derived class is not as critical as the transparency of the base class.
</p>
<h2>Rule Description</h2>
<p>
            Types and members that have the <code>SecurityCriticalAttribute</code> cannot be used by Silverlight application code. Security-critical types and members can be used only by trusted code in the .NET Framework for Silverlight class library. Because a public or protected construction in a derived class must have the same or greater transparency than its base class, a class in an application cannot be derived from a class marked SecurityCritical.
            For CoreCLR platform code, if a base type has a public or protected non-transparent default constructor then the derived type must obey the default constructor inheritance rules. The derived type must also have a default constructor and that constructor must be at least as critical default constructor of the base type.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix the violation, remove the type or do not derive from security non-transparent type.
</p>
<h2>When to Suppress Warnings</h2>

<h3>Code</h3>
<p>










            <pre>
using System;
using System.Security;

namespace TransparencyWarningsDemo
{

    public¬†class BaseWithSafeCriticalDefaultCtor
    {
        [SecuritySafeCritical]
        public BaseWithSafeCriticalDefaultCtor() { }
    }

    public¬†class DerivedWithNoDefaultCtor : BaseWithSafeCriticalDefaultCtor
    {
        // CA2132 violation - since the base has a public or protected non-transparent default .ctor, the¬†
        // derived type must also have a default .ctor
    }

    public¬†class DerivedWithTransparentDefaultCtor : BaseWithSafeCriticalDefaultCtor
    {
        // CA2132 violation - since the base has a safe critical default .ctor, the derived type must have¬†
        // either a safe critical or critical default .ctor.  This is fixed by making this .ctor safe critical¬†
        // (however, user code cannot be safe critical, so this fix is platform code only).
        DerivedWithTransparentDefaultCtor() { }
    }

    public¬†class BaseWithCriticalCtor
    {
        [SecurityCritical]
        public BaseWithCriticalCtor() { }
    }

    public¬†class DerivedWithSafeCriticalDefaultCtor : BaseWithSafeCriticalDefaultCtor
    {
        // CA2132 violation - since the base has a critical default .ctor, the derived must also have a critical¬†
        // default .ctor.  This is fixed by making this .ctor critical, which is not available to user code
        [SecuritySafeCritical]
        public DerivedWithSafeCriticalDefaultCtor() { }
    }
}
</pre>





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd983956.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd983956.aspx</a></p>
å
*fxcop:AvoidOverloadsInComVisibleInterfaces›
fxcop$AvoidOverloadsInComVisibleInterfaces1CA1402: Avoid overloads in COM visible interfaces"MAJOR*cs2CA1402:Á<h2>Cause</h2>
<p>
            A Component Object Model (COM) visible interface declares overloaded methods.
</p>
<h2>Rule Description</h2>
<p>
            When overloaded methods are exposed to COM clients, only the first method overload retains its name. Subsequent overloads are uniquely renamed by appending to the name an underscore character '_' and an integer that corresponds to the order of declaration of the overload. For example, consider the following methods.









            <pre>
   void SomeMethod(int valueOne);
   void SomeMethod(int valueOne, int valueTwo, int valueThree);
   void SomeMethod(int valueOne, int valueTwo);
</pre>




These methods are exposed to COM clients as the following.









            <pre>
   void SomeMethod(int valueOne);
   void SomeMethod_2(int valueOne, int valueTwo, int valueThree);
   void SomeMethod_3(int valueOne, int valueTwo);
</pre>




Visual Basic 6 COM clients cannot implement interface methods by using an underscore in the name.






                How to Fix Violations





</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidNonpublicFieldsInComVisibleValueTypes'>AvoidNonpublicFieldsInComVisibleValueTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidStaticMembersInComVisibleTypes'>AvoidStaticMembersInComVisibleTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAssembliesWithComVisible'>MarkAssembliesWithComVisible</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182197.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182197.aspx</a></p>
µ
fxcop:MarkEnumsWithFlagsò
fxcopMarkEnumsWithFlags&CA1027: Mark enums with FlagsAttribute"MAJOR*cs2CA1027:ø<h2>Cause</h2>
<p>
            The values of a public enumeration are powers of two or are combinations of other values that are defined in the enumeration, and the <code>System.FlagsAttribute</code> attribute is not present. To reduce false positives, this rule does not report a violation for enumerations that have contiguous values.
</p>
<h2>Rule Description</h2>
<p>
            An enumeration is a value type that defines a set of related named constants. Apply <code>FlagsAttribute</code> to an enumeration when its named constants can be meaningfully combined. For example, consider an enumeration of the days of the week in an application that keeps track of which day's resources are available. If the availability of each resource is encoded by using the enumeration that has <code>FlagsAttribute</code> present, any combination of days can be represented. Without the attribute, only one day of the week can be represented.
            For fields that store combinable enumerations, the individual enumeration values are treated as groups of bits in the field. Therefore, such fields are sometimes referred to as bit fields. To combine enumeration values for storage in a bit field, use the Boolean conditional operators. To test a bit field to determine whether a specific enumeration value is present, use the Boolean logical operators. For a bit field to store and retrieve combined enumeration values correctly, each value that is defined in the enumeration must be a power of two. Unless this is so, the Boolean logical operators will not be able to extract the individual enumeration values that are stored in the field.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add <code>FlagsAttribute</code> to the enumeration.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if you do not want the enumeration values to be combinable.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotMarkEnumsWithFlags'>DoNotMarkEnumsWithFlags</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182159.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182159.aspx</a></p>
é
)fxcop:IndexersShouldNotBeMultidimensional‡

fxcop#IndexersShouldNotBeMultidimensional/CA1023: Indexers should not be multidimensional"MAJOR*cs2CA1023:Ì	<h2>Cause</h2>
<p>
            A public or protected type contains a public or protected indexer that uses more than one index.
</p>
<h2>Rule Description</h2>
<p>
            Indexers, that is, indexed properties, should use a single index. Multi-dimensional indexers can significantly reduce the usability of the library. If the design requires multiple indexes, reconsider whether the type represents a logical data store. If not, use a method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the design to use a lone integer or string index, or use a method instead of the indexer.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only after carefully considering the need for the nonstandard indexer.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:UseIntegralOrStringArgumentForIndexers'>UseIntegralOrStringArgumentForIndexers</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UsePropertiesWhereAppropriate'>UsePropertiesWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182152.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182152.aspx</a></p>
∆
.fxcop:MarkWindowsFormsEntryPointsWithStaThreadì
fxcop(MarkWindowsFormsEntryPointsWithStaThread6CA2232: Mark Windows Forms entry points with STAThread"MAJOR*cs2CA2232:î<h2>Cause</h2>
<p>
            An assembly references the <code>System.Windows.Forms</code> namespace, and its entry point is not marked with the <code>System.STAThreadAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>


                <code>STAThreadAttribute</code>
               indicates that the COM threading model for the application is single-threaded apartment. This attribute must be present on the entry point of any application that uses Windows Forms; if it is omitted, the Windows components might not work correctly. If the attribute is not present, the application uses the multithreaded apartment model, which is not supported for Windows Forms.





                    Note




                     Visual Basic projects that use the Application Framework do not have to¬†mark¬†the¬†Main method with STAThread. The¬†Visual Basic compiler does it automatically.




</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add the <code>STAThreadAttribute</code> attribute to the entry point. If the <code>System.MTAThreadAttribute</code> attribute is present, remove it.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if you are developing for the .NET Compact Framework, for which the <code>STAThreadAttribute</code> attribute is unnecessary and not supported.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182351.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182351.aspx</a></p>
·
)fxcop:NonConstantFieldsShouldNotBeVisible≥
fxcop#NonConstantFieldsShouldNotBeVisible1CA2211: Non-constant fields should not be visible"MAJOR*cs2CA2211:æ<h2>Cause</h2>
<p>
            A public or protected static field is not constant nor is it read-only.
</p>
<h2>Rule Description</h2>
<p>
            Static fields that are neither constants nor read-only are not thread-safe. Access to such a field must be carefully controlled and requires advanced programming techniques for synchronizing access to the class object. Because these are difficult skills to learn and master, and testing such an object poses its own challenges, static fields are best used to store data that does not change. This rule applies to libraries; applications should not expose any fields.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the static field constant or read-only. If this is not possible, redesign the type to use an alternative mechanism such as a thread-safe property that manages thread-safe access to the underlying field. Realize that issues such as lock contention and deadlocks might affect the performance and behavior of the library.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if you are developing an application and therefore have full control over access to the type that contains the static field. Library designers should not suppress a warning from this rule; using non-constant static fields can make using the library difficult for developers to use correctly.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182353.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182353.aspx</a></p>
Ò
+fxcop:ReviewDeclarativeSecurityOnValueTypes¡
fxcop%ReviewDeclarativeSecurityOnValueTypes2CA2108: Review declarative security on value types"MAJOR*cs2CA2108:…<h2>Cause</h2>
<p>
            A public or protected value type is secured by a <code>Data and Modeling in the .NET Framework</code> or Link Demands.
</p>
<h2>Rule Description</h2>
<p>
            Value types are allocated and initialized by their default constructors before other constructors execute. If a value type is secured by a Demand or LinkDemand, and the caller does not have permissions that satisfy the security check, any constructor other than the default will fail, and a security exception will be thrown. The value type is not deallocated; it is left in the state set by its default constructor. Do not assume that a caller that passes an instance of the value type has permission to create or access the instance.
</p>
<h2>How to Fix Violations</h2>
<p>
            You cannot fix a violation of this rule unless you remove the security check from the type, and use method level security checks in its place. Note that fixing the violation in this manner will not prevent callers with inadequate permissions from obtaining instances of the value type. You must ensure that an instance of the value type, in its default state, does not expose sensitive information, and cannot be used in a harmful manner.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You can suppress a warning from this rule if any caller can obtain instances of the value type in its default state without posing a threat to security.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182307.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182307.aspx</a></p>
 

fxcop:AvoidExcessiveLocals´

fxcopAvoidExcessiveLocalsCA1809: Avoid excessive locals"MAJOR*cs2CA1809:ÿ	<h2>Cause</h2>
<p>
            A member contains more than 64 local variables, some of which might be compiler-generated.
</p>
<h2>Rule Description</h2>
<p>
            A common performance optimization is to store a value in a processor register instead of in memory, which is referred to as enregistering the value. The common language runtime considers up to 64 local variables for enregistration. Variables that are not enregistered are put on the stack and must be moved to a register before manipulation. To allow the chance that all local variables get enregistered, limit the number of local variables to 64.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, refactor the implementation to use no more than 64 local variables.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule, or to disable the rule, if performance is not an issue.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:RemoveUnusedLocals'>RemoveUnusedLocals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182263.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182263.aspx</a></p>
Û
(fxcop:DoNotHardcodeLocaleSpecificStrings∆
fxcop"DoNotHardcodeLocaleSpecificStrings/CA1302: Do not hardcode locale specific strings"MAJOR*cs2CA1302:‘<h2>Cause</h2>
<p>
            A method uses a string literal that represents part of the path of certain system folders.
</p>
<h2>Rule Description</h2>
<p>
            The <code>System.Environment.SpecialFolder</code> enumeration contains members that refer to special system folders. The locations of these folders can have different values on different operating systems, the user can change some of the locations, and the locations are localized. An example of a special folder is the System folder, which is "C:\WINDOWS\system32" on Windows XP but "C:\WINNT\system32" on Windows 2000. The <code>Environment.GetFolderPath</code> method returns the locations that are associated with the <code>Environment.SpecialFolder</code> enumeration. The locations that are returned by <code>GetFolderPath</code>¬†are localized and appropriate for the currently running computer.
            This rule tokenizes the folder paths that are retrieved by using the <code>GetFolderPath</code> method into separate directory levels. Each string literal is compared to the tokens. If a match is found, it is assumed that the method is building a string that refers to the system location that is associated with the token. For portability and localizability, use the <code>GetFolderPath</code> method to retrieve the locations of the special system folders instead of using string literals.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, retrieve the location by using the <code>GetFolderPath</code> method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the string literal is not used to refer to one of the system locations that is associated with the <code>Environment.SpecialFolder</code> enumeration.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotPassLiteralsAsLocalizedParameters'>DoNotPassLiteralsAsLocalizedParameters</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182186.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182186.aspx</a></p>
˜)
*fxcop:IdentifiersShouldNotContainTypeNames»)
fxcop$IdentifiersShouldNotContainTypeNames1CA1720: Identifiers should not contain type names"MAJOR*cs2CA1720:“(<h2>Cause</h2>
<p>
            The name of a parameter in an externally visible member contains a¬†data type name.
            -or-
            The name of an externally visible member contains a language-specific data type name.
</p>
<h2>Rule Description</h2>
<p>
            Names of parameters and members are better used to communicate their meaning than to describe their type, which is expected to be provided by development tools. For names of members, if a data type name must be used, use a¬†language-independent¬†name instead of a language-specific one. For example, instead of the C# type name 'int', use the¬†language-independent data type name, Int32.
            Each discrete token in the name of the parameter or member is checked against the following language-specific data type names, in a case-insensitive manner:
            <ul>
              <li>
                Bool
              </li>
              <li>
                WChar
              </li>
              <li>
                Int8
              </li>
              <li>
                UInt8
              </li>
              <li>
                Short
              </li>
              <li>
                UShort
              </li>
              <li>
                Int
              </li>
              <li>
                UInt
              </li>
              <li>
                Integer
              </li>
              <li>
                UInteger
              </li>
              <li>
                Long
              </li>
              <li>
                ULong
              </li>
              <li>
                Unsigned
              </li>
              <li>
                Signed
              </li>
              <li>
                Float
              </li>
              <li>
                Float32
              </li>
              <li>
                Float64
              </li>
            </ul>
            In addition, the names of a parameter are also checked against the following language-independent data type names, in a case-insensitive manner:
            <ul>
              <li>
                Object
              </li>
              <li>
                Obj
              </li>
              <li>
                Boolean
              </li>
              <li>
                Char
              </li>
              <li>
                String
              </li>
              <li>
                SByte
              </li>
              <li>
                Byte
              </li>
              <li>
                UByte
              </li>
              <li>
                Int16
              </li>
              <li>
                UInt16
              </li>
              <li>
                Int32
              </li>
              <li>
                UInt32
              </li>
              <li>
                Int64
              </li>
              <li>
                UInt64
              </li>
              <li>
                IntPtr
              </li>
              <li>
                Ptr
              </li>
              <li>
                Pointer
              </li>
              <li>
                UInptr
              </li>
              <li>
                UPtr
              </li>
              <li>
                UPointer
              </li>
              <li>
                Single
              </li>
              <li>
                Double
              </li>
              <li>
                Decimal
              </li>
              <li>
                Guid
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>

              If fired against a parameter:

            Replace the data type identifier in the name of the parameter with either a term that better describes its meaning or a more generic term, such as 'value'.

              If fired against a member:

            Replace the language-specific data type identifier in the name of the member with a term that better describes its meaning, a language-independent equivalent, or a more generic term, such as 'value'.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Occasional use of type-based parameter and member names might be appropriate. However, for new development, no known scenarios occur where you should suppress a warning from this rule. For libraries that have previous shipped, you might have to suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldBeCasedCorrectly'>IdentifiersShouldBeCasedCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldDifferByMoreThanCase'>IdentifiersShouldDifferByMoreThanCase</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldNotContainUnderscores'>IdentifiersShouldNotContainUnderscores</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ParameterNamesShouldNotMatchMemberNames'>ParameterNamesShouldNotMatchMemberNames</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb531486.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb531486.aspx</a></p>
≥%
)fxcop:AvoidStaticMembersInComVisibleTypesÖ%
fxcop#AvoidStaticMembersInComVisibleTypes1CA1407: Avoid static members in COM visible types"MAJOR*cs2CA1407:ê$<h2>Cause</h2>
<p>
            A type that is specifically marked as visible to Component Object Model (COM) contains a <code>public</code> <code>static</code> method.
</p>
<h2>Rule Description</h2>
<p>
            COM does not support <code>static</code> methods.
            This rule ignores property and event accessors, operator overloading methods, or methods that are marked by using either the <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> attribute or the <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code> attribute.
            By default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types.
            For this rule to occur, an assembly-level <code>ComVisibleAttribute</code> must be set to <code>false</code> and the class- <code>ComVisibleAttribute</code> must be set to <code>true</code>, as the following code shows.









            <pre>
using System;
using System.Runtime.InteropServices;

[assembly: ComVisible(false)]
namespace Samples
{
¬†¬†¬†¬†[ComVisible(true)]
¬†¬†¬†¬†public class MyClass
¬†¬†¬†¬†{
¬†¬†¬†¬†¬†¬†¬†¬†public static void DoSomething()
¬†¬†¬†¬†¬†¬†¬†¬†{
¬†¬†¬†¬†¬†¬†¬†¬†}
¬†¬†¬†¬†}
}
</pre>











                How to Fix Violations





</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if a COM client does not require access to the functionality that is provided by the <code>static</code> method.
</p>
<h2>Example Violation</h2>

<h3>Description</h3>
<p>
                The following example shows a <code>static</code> method that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Runtime.InteropServices;
using System.Collections.ObjectModel;

[assembly: ComVisible(false)]

namespace Samples
{
    [ComVisible(true)]
    public¬†class Book
    {
        private Collection&lt;string&gt; _Pages = new Collection&lt;string&gt;();

        public Book()
        {
        }

        public Collection&lt;string&gt; Pages
        {
            get { return _Pages; }
        }

        // Violates this rule        ¬†
        public¬†static Book FromPages(string[] pages)
        {
            if (pages == null)
                throw¬†new ArgumentNullException("pages");

            Book book = new Book();

            foreach (string page in pages)
            {
                book.Pages.Add(page);
            }             return book;
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                In this example, the Book.FromPages method cannot be called from COM.
</p>
<h2>Example Fix</h2>

<h3>Description</h3>
<p>
                To fix the violation in the previous example, you could change the method to an instance method, but that does not make sense in this instance. A better solution is to explicitly apply ComVisible(false) to the method to make it clear to other developers that the method cannot be seen from COM.
                The following example applies <code>ComRegisterFunctionAttribute</code> to the method.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Runtime.InteropServices;
using System.Collections.ObjectModel;

[assembly: ComVisible(false)]

namespace Samples
{
    [ComVisible(true)]
    public¬†class Book
    {
        private Collection&lt;string&gt; _Pages = new Collection&lt;string&gt;();

        public Book()
        {
        }

        public Collection&lt;string&gt; Pages
        {
            get { return _Pages; }
        }

        [ComVisible(false)]
        public¬†static Book FromPages(string[] pages)
        {
            if (pages == null)
                throw¬†new ArgumentNullException("pages");

            Book book = new Book();

            foreach (string page in pages)
            {
                book.Pages.Add(page);
            }

            return book;
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:MarkAssembliesWithComVisible'>MarkAssembliesWithComVisible</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidInt64ArgumentsForVB6Clients'>AvoidInt64ArgumentsForVB6Clients</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidNonpublicFieldsInComVisibleValueTypes'>AvoidNonpublicFieldsInComVisibleValueTypes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182198.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182198.aspx</a></p>
õ
,fxcop:AptcaMethodsShouldOnlyCallAptcaMethodsÍ
fxcop&AptcaMethodsShouldOnlyCallAptcaMethods4CA2116: APTCA methods should only call APTCA methods"MAJOR*cs2CA2116:Ô<h2>Cause</h2>
<p>
            A method in an assembly with the <code>System.Security.AllowPartiallyTrustedCallersAttribute</code> attribute calls a method in an assembly that does not have the attribute.
</p>
<h2>Rule Description</h2>
<p>
            By default, public or protected methods in assemblies with strong names are implicitly protected by a Link Demands for full trust; only fully trusted callers can access a strong-named assembly. Strong-named assemblies marked with the <code>AllowPartiallyTrustedCallersAttribute</code> (APTCA) attribute do not have this protection. The attribute disables the link demand, making the assembly accessible to callers that do not have full trust, such as code executing from an intranet or the Internet.
            When the APTCA attribute is present on a fully trusted assembly, and the assembly executes code in another assembly that does not allow partially trusted callers, a security exploit is possible. If two methods M1 and M2 meet the following conditions, malicious callers can use the method M1 to bypass the implicit full trust link demand that protects M2:
            <ul>
              <li>

                  M1 is a public method declared in a fully trusted assembly that has the APTCA attribute.
              </li>
              <li>

                  M1 calls a method M2 outside M1's assembly.
              </li>
              <li>

                  M2's assembly does not have the APTCA attribute and, therefore, should not be executed by or on behalf of callers that are partially trusted.
              </li>
            </ul>
            A partially trusted caller X can call method M1, causing M1 to call M2. Because M2 does not have the APTCA attribute, its immediate caller (M1) must satisfy a link demand for full trust; M1 has full trust and therefore satisfies this check. The security risk is because X does not participate in satisfying the link demand that protects M2 from untrusted callers. Therefore, methods with the APTCA attribute must not call methods that do not have the attribute.
</p>
<h2>How to Fix Violations</h2>
<p>
            If the APCTA attribute is required, use a demand to protect the method that calls into the full trust assembly. The exact permissions you demand will depend on the functionality exposed by your method. If it is possible, protect the method with a demand for full trust to ensure that the underlying functionality is not exposed to partially trusted callers. If this is not possible, select a set of permissions that effectively protects the exposed functionality. For more information about demands, see <code>Demands</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            To safely suppress a warning from this rule, you must ensure that the functionality exposed by your method does not directly or indirectly allow callers to access sensitive information, operations, or resources that can be used in a destructive manner.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AptcaTypesShouldOnlyExtendAptcaBaseTypes'>AptcaTypesShouldOnlyExtendAptcaBaseTypes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182297.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182297.aspx</a></p>
“
%fxcop:DisposeObjectsBeforeLosingScope®
fxcopDisposeObjectsBeforeLosingScope+CA2000: Dispose objects before losing scope"MAJOR*cs2CA2000:Ω<h2>Cause</h2>
<p>
            A local object of a <code>IDisposable</code> type is created but the object is not disposed before all references to the object are out of scope.
</p>
<h2>Rule Description</h2>
<p>
            If a disposable object is not explicitly disposed before all references to it are out of scope, the object will be disposed at some indeterminate time when the garbage collector runs the finalizer of the object. Because an exceptional event might occur that will prevent the finalizer of the object from running, the object should be explicitly disposed instead.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call <code>Dispose</code> on the object before all references to it are out of scope.
            Note that you can use the <code>using</code> statement (<code>Using</code> in Visual Basic) to wrap objects that implement <code>IDisposable</code>. Objects that are wrapped in this manner will automatically be disposed at the close of the <code>using</code> block.
            The following are some situations where the using statement is not enough to protect IDisposable objects and can cause CA2000 to occur.
            <ul>
              <li>
                Returning a disposable object requires that the object is constructed in a try/finally block outside a using block.
              </li>
              <li>
                Initializing members of a disposable object should not be done in the constructor of a using statement.
              </li>
              <li>
                Nesting constructors that are protected only by one exception handler. For example,









            <pre>
using (StreamReader sr = new StreamReader(new FileStream("C:\myfile.txt", FileMode.Create)))
{ ... }
</pre>




causes CA2000 to occur because a failure in the construction of the StreamReader object can result in the FileStream object never being closed.</li>
              <li>
                Dynamic objects should use a shadow object to implement the Dispose pattern of IDisposable objects.
              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule unless you have called a method on your object that calls <code>Dispose</code>, such as <code>Close</code>, or if the method that raised the warning returns an IDisposable object wraps your object.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DisposableFieldsShouldBeDisposed'>DisposableFieldsShouldBeDisposed</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDisposeObjectsMultipleTimes'>DoNotDisposeObjectsMultipleTimes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182289.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182289.aspx</a></p>
Œ
+fxcop:DisposableTypesShouldDeclareFinalizerû
fxcop%DisposableTypesShouldDeclareFinalizer1CA2216: Disposable types should declare finalizer"MAJOR*cs2CA2216:ß<h2>Cause</h2>
<p>
            A type that implements <code>System.IDisposable</code>, and has fields that suggest the use of unmanaged resources, does not implement a finalizer as described by <code>Object.Finalize</code>.
</p>
<h2>Rule Description</h2>
<p>
            A violation of this rule is reported if the disposable type contains fields of the following types:
            <ul>
              <li>


                    <code>System.IntPtr</code>


              </li>
              <li>


                    <code>System.UIntPtr</code>


              </li>
              <li>


                    <code>System.Runtime.InteropServices.HandleRef</code>


              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement a finalizer that calls your <code>Dispose</code> method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the type does not implement <code>IDisposable</code> for the purpose of releasing unmanaged resources.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallGCKeepAliveWhenUsingNativeResources'>CallGCKeepAliveWhenUsingNativeResources</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CallGCSuppressFinalizeCorrectly'>CallGCSuppressFinalizeCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:TypesThatOwnNativeResourcesShouldBeDisposable'>TypesThatOwnNativeResourcesShouldBeDisposable</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182329.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182329.aspx</a></p>
ı
-fxcop:IdentifiersShouldNotHaveIncorrectSuffix√
fxcop'IdentifiersShouldNotHaveIncorrectSuffix4CA1711: Identifiers should not have incorrect suffix"MAJOR*cs2CA1711:«<h2>Cause</h2>
<p>
            An identifier has an incorrect suffix.
</p>
<h2>Rule Description</h2>
<p>
            By convention, only the names of types that extend certain base types or that implement certain interfaces, or types derived from these types, should end with specific reserved suffixes. Other type names should not use these reserved suffixes.
            The following table lists the reserved suffixes and the base types and interfaces with which they are associated.







                    Suffix


                    Base type/Interface




                    Attribute




                        <code>System.Attribute</code>






                    Collection




                        <code>System.Collections.ICollection</code>




                        <code>System.Collections.IEnumerable</code>




                        <code>System.Collections.Queue</code>




                        <code>System.Collections.Stack</code>




                        <code>System.Collections.Generic.ICollection&lt;T&gt;</code>




                        <code>System.Data.DataSet</code>




                        <code>System.Data.DataTable</code>






                    Dictionary




                        <code>System.Collections.IDictionary</code>




                        System.Collections.Generic.IDictionary&lt;TKey, TValue&gt;






                    EventArgs




                        <code>System.EventArgs</code>






                    EventHandler


                    An event-handler delegate




                    Exception




                        <code>System.Exception</code>






                    Permission




                        <code>System.Security.IPermission</code>






                    Queue




                        <code>System.Collections.Queue</code>






                    Stack




                        <code>System.Collections.Stack</code>






                    Stream




                        <code>System.IO.Stream</code>






            In addition, the following suffixes should not be used:
            <ul>
              <li>
                Delegate
              </li>
              <li>
                Enum
              </li>
              <li>
                Impl - use 'Core' instead
              </li>
              <li>
                Ex or similar suffix to distinguish it from an earlier version of the same type
              </li>
            </ul>
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Remove the suffix from the type name.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule unless the suffix has an unambiguous meaning in the application domain.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldHaveCorrectSuffix'>IdentifiersShouldHaveCorrectSuffix</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182247.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182247.aspx</a></p>
ó
-fxcop:TypesMustBeAtLeastAsCriticalAsBaseTypesÂ
fxcop'TypesMustBeAtLeastAsCriticalAsBaseTypesMCA2146: Types must be at least as critical as their base types and interfaces"MAJOR*cs2CA2146:–
<h2>Cause</h2>
<p>
            A transparent type is derived from a type that is marked with the <code>SecuritySafeCriticalAttribute</code> or the <code>SecurityCriticalAttribute</code>, or a type that is marked with the <code>SecuritySafeCriticalAttribute</code> attribute is derived from a type that is marked with the <code>SecurityCriticalAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>
            This rule fires when a derived type has a security transparency attribute that is not as critical as its base type or implemented interface. Only critical types can derive from critical base types or implement critical interfaces, and only critical or safe-critical types can derive from safe-critical base types or implement safe-critical interfaces. Violations of this rule in level 2 transparency result in a <code>TypeLoadException</code> for the derived type.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix this violation, mark the derived or implementing type with a transparency attribute that is at least as critical as the base type or interface.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997443.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997443.aspx</a></p>
◊
-fxcop:ParameterNamesShouldNotMatchMemberNames•
fxcop'ParameterNamesShouldNotMatchMemberNames5CA1719: Parameter names should not match member names"MAJOR*cs2CA1719:®<h2>Cause</h2>
<p>
            The name of an externally visible member matches, in a case-insensitive comparison, the name of one of its parameters.
</p>
<h2>Rule Description</h2>
<p>
            A parameter name should communicate the meaning of a parameter and a member name should communicate the meaning of a member. It would be a rare design where these were the same. Naming a parameter the same as its member name is unintuitive and makes the library difficult to use.
</p>
<h2>How to Fix Violations</h2>
<p>
            Select a parameter name that does not match the member name.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            For new development, no known scenarios occur where you must suppress a warning from this rule. For shipping libraries, you might have to suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldBeCasedCorrectly'>IdentifiersShouldBeCasedCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldDifferByMoreThanCase'>IdentifiersShouldDifferByMoreThanCase</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldNotContainUnderscores'>IdentifiersShouldNotContainUnderscores</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182252.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182252.aspx</a></p>
≠
%fxcop:UriPropertiesShouldNotBeStringsÉ
fxcopUriPropertiesShouldNotBeStrings,CA1056: URI properties should not be strings"MAJOR*cs2CA1056:ó<h2>Cause</h2>
<p>
            A type declares a string property whose name contains "uri", "Uri", "urn", "Urn", "url", or "Url".
</p>
<h2>Rule Description</h2>
<p>
            This rule splits the property name into tokens based on the Pascal casing convention and checks whether each token equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the rule assumes that the property represents a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>System.Uri</code> class provides these services in a safe and secure manner.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the property to a <code>Uri</code> type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the property does not represent a URI.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:UriParametersShouldNotBeStrings'>UriParametersShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriReturnValuesShouldNotBeStrings'>UriReturnValuesShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:PassSystemUriObjectsInsteadOfStrings'>PassSystemUriObjectsInsteadOfStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:StringUriOverloadsCallSystemUriOverloads'>StringUriOverloadsCallSystemUriOverloads</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182175.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182175.aspx</a></p>
ƒ
'fxcop:StaticConstructorsShouldBePrivateò
fxcop!StaticConstructorsShouldBePrivate-CA2121: Static constructors should be private"MAJOR*cs2CA2121:©<h2>Cause</h2>
<p>
            A type has a static constructor that is not private.
</p>
<h2>Rule Description</h2>
<p>
            A static constructor, also known as a class constructor, is used to initialize a type. The system calls the static constructor before the first instance of the type is created or any static members are referenced. The user has no control over when the static constructor is called. If a static constructor is not private, it can be called by code other than the system. Depending on the operations that are performed in the constructor, this can cause unexpected behavior.
            This rule is enforced by the C# and Visual Basic¬†.NET compilers.
</p>
<h2>How to Fix Violations</h2>
<p>
            Violations are typically caused by one of the following actions:
            <ul>
              <li>
                You defined a static constructor for your type and did not make it private.
              </li>
              <li>
                The programming language compiler added a default static constructor to your type and did not make it private.
              </li>
            </ul>
            To fix the first kind of violation, make your static constructor private. To fix the second kind, add a private static constructor to your type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress these violations. If your software design requires an explicit call to a static constructor, it is likely that the design contains serious flaws and should be reviewed.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182320.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182320.aspx</a></p>
≥	
fxcop:RemoveEmptyFinalizersì	
fxcopRemoveEmptyFinalizersCA1821: Remove empty finalizers"MAJOR*cs2CA1821:æ<h2>Cause</h2>
<p>
            A type implements a finalizer that is empty, calls only the base type finalizer, or calls only conditionally emitted methods.
</p>
<h2>Rule Description</h2>
<p>
            Whenever you can, avoid finalizers because of the additional performance overhead that is involved in tracking object lifetime. The garbage collector will run the finalizer before it collects the object. This means that two collections will be required to collect the object. An empty finalizer incurs this added overhead without any benefit.
</p>
<h2>How to Fix Violations</h2>
<p>
            Remove the empty finalizer. If a finalizer is required for debugging, enclose the whole finalizer in #if DEBUG / #endif directives.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a message from this rule. Failure to suppress finalization decreases performance and provides no benefits.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264476.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264476.aspx</a></p>
±/
/fxcop:DoNotRaiseExceptionsInUnexpectedLocations˝.
fxcop)DoNotRaiseExceptionsInUnexpectedLocations7CA1065: Do not raise exceptions in unexpected locations"MAJOR*cs2CA1065:¸-<h2>Cause</h2>
<p>
            A method that is not expected to throw exceptions throws an exception.
</p>
<h2>Rule Description</h2>

<h3>Property Get Methods</h3>
<p>
                Properties are basically smart fields. Therefore, they should behave like a field as much as possible. Fields do not throw exceptions and neither should properties. If you have a property that throws an exception, consider making it a method.
                The following exceptions are allowed to be thrown from a property get method:
                <ul>
                  <li>


                        <code>System.InvalidOperationException</code>
                       and all derivatives (including <code>System.ObjectDisposedException</code>)
                  </li>
                  <li>


                        <code>System.NotSupportedException</code>
                       and all derivatives
                  </li>
                  <li>


                        <code>System.ArgumentException</code>
                       (only from indexed get)
                  </li>
                  <li>


                        <code>KeyNotFoundException</code>
                       (only from indexed get)
                  </li>
                </ul>
</p>
<h3>Event Accessor Methods</h3>
<p>
                Event accessors should be simple operations that do not throw exceptions. An event should not throw an exception when you try to add or remove an event handler.
                The following exceptions are allowed to be thrown from an event accesor:
                <ul>
                  <li>


                        <code>System.InvalidOperationException</code>
                       and all derivatives (including <code>System.ObjectDisposedException</code>)
                  </li>
                  <li>


                        <code>System.NotSupportedException</code>
                       and all derivatives
                  </li>
                  <li>


                        <code>ArgumentException</code>
                       and derivatives
                  </li>
                </ul>
</p>
<h3>Equals Methods</h3>
<p>
                The following Equals methods should not throw exceptions:
                <ul>
                  <li>


                        <code>Object.Equals</code>


                  </li>
                  <li>

                      M:IEquatable.Equals

                  </li>
                </ul>
                An Equals method should return <code>true</code> or <code>false</code> instead of throwing an exception. For example, if Equals is passed two mismatched types it should just return <code>false</code> instead of throwing an <code>ArgumentException</code>.
</p>
<h3>GetHashCode Methods</h3>
<p>
                The following GetHashCode methods should usually not throw exceptions:
                <ul>
                  <li>


                        <code>GetHashCode</code>


                  </li>
                  <li>

                      M:IEqualityComparer.GetHashCode(T)

                  </li>
                </ul>

                  GetHashCode should always return a value. Otherwise, you can lose items in the hash table.
                The versions of GetHashCode that take an argument can throw an <code>ArgumentException</code>. However, Object.GetHashCode should never throw an exception.
</p>
<h3>ToString Methods</h3>
<p>
                The debugger uses <code>Object.ToString</code> to help display information about objects in string format. Therefore, ToString should not change the state of an object and it should not throw exceptions.
</p>
<h3>Static Constructors</h3>
<p>
                Throwing exceptions from a static constructor causes the type to be unusable in the current application domain. You should have a very good reason (such as a security issue) for throwing an exception from a static constructor.
</p>
<h3>Finalizers</h3>
<p>
                Throwing an exception from a finalizer causes the CLR to fail fast, which tears down the process. Therefore, throwing exceptions in a finalizer should always be avoided.
</p>
<h3>Dispose Methods</h3>
<p>
                A <code>IDisposable.Dispose</code> method should not throw an exception. Dispose is often called as part of the clean up logic in a <code>finally</code> clause. Therefore, explicitly throwing an exception from Dispose forces the user to add exception handling inside the <code>finally</code> clause.
                The Dispose(false) code path should never throw exceptions, because this is almost always called from a finalizer.
</p>
<h3>Equality Operators (==, !=)</h3>
<p>
                Like Equals methods, equality operators should return either <code>true</code> or <code>false</code> and should not throw exceptions.
</p>
<h3>Implicit Cast Operators</h3>
<p>
                Because the user is often unaware that an implicit cast operator has been called, an exception thrown by the implicit cast operator is completely unexpected. Therefore, no exceptions should be thrown from implicit cast operators.
</p>
<h2>How to Fix Violations</h2>
<p>
            For property getters, either change the logic so that it no longer has to throw an exception, or change the property into a method.
            For all other method types listed previously, change the logic so that it no longer must throw an exception.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the violation was caused by an exception declaration instead of a thrown exception.
</p>
<h2>Related Rules</h2>
<p>


                CA2219: Do not raise exceptions in exception clauses


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb386039.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386039.aspx</a></p>
é
*fxcop:TypesShouldNotExtendCertainBaseTypesﬂ
fxcop$TypesShouldNotExtendCertainBaseTypes2CA1058: Types should not extend certain base types"MAJOR*cs2CA1058:Ë<h2>Cause</h2>
<p>
            An externally visible type extends certain base types. Currently, this rule reports types that derive from the following types:
            <ul>
              <li>


                    <code>System.ApplicationException</code>


              </li>
              <li>


                    <code>System.Xml.XmlDocument</code>


              </li>
              <li>


                    <code>System.Collections.CollectionBase</code>


              </li>
              <li>


                    <code>System.Collections.DictionaryBase</code>


              </li>
              <li>


                    <code>System.Collections.Queue</code>


              </li>
              <li>


                    <code>System.Collections.ReadOnlyCollectionBase</code>


              </li>
              <li>


                    <code>System.Collections.SortedList</code>


              </li>
              <li>


                    <code>System.Collections.Stack</code>


              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            For .NET Framework version 1, it was recommended to derive new exceptions from <code>ApplicationException</code>. The recommendation has changed and new exceptions should derive from <code>System.Exception</code> or one of its subclasses in the <code>System</code> namespace.
            Do not create a subclass of <code>XmlDocument</code> if you want to create an XML view of an underlying object model or data source.






                    Non-generic Collections










                Use and/or extend generic collections whenever possible. Do not extend non-generic collections in your code, unless you shipped it previously.

                  Examples of Incorrect Usage










            <pre>
public class MyCollection : CollectionBase
{
}

public class MyReadOnlyCollection : ReadOnlyCollectionBase
{
}
</pre>




Examples of Correct Usage









            <pre>
public class MyCollection : Collection&lt;T&gt;
{
}

public class MyReadOnlyCollection : ReadOnlyCollection&lt;T&gt;
{
}
</pre>






</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, derive the type from a different base type or a generic collection.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule for violations about <code>ApplicationException</code>. It is safe to suppress a warning from this rule for violations about <code>XmlDocument</code>. It is safe to suppress a warning about a non-generic collection if the code was released previously.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182171.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182171.aspx</a></p>
À
/fxcop:DoNotCallOverridableMethodsInConstructorsó
fxcop)DoNotCallOverridableMethodsInConstructors7CA2214: Do not call overridable methods in constructors"MAJOR*cs2CA2214:ñ<h2>Cause</h2>
<p>
            The constructor of an unsealed type calls a virtual method defined in its class.
</p>
<h2>Rule Description</h2>
<p>
            When a virtual method is called, the actual type that executes the method is not selected until run time. When a constructor calls a virtual method, it is possible that the constructor for the instance that invokes the method has not executed.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, do not call a type's virtual methods from within the type's constructors.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. The constructor should be redesigned to eliminate the call to the virtual method.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182331.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182331.aspx</a></p>
ﬂ
fxcop:DoNotIgnoreMethodResultsº
fxcopDoNotIgnoreMethodResults$CA1806: Do not ignore method results"MAJOR*cs2CA1806:ﬂ<h2>Cause</h2>
<p>
            There are several possible reasons for this warning:
            <ul>
              <li>
                A new object is created but never used.
              </li>
              <li>
                A method that creates and returns a new string is called and the new string is never used.
              </li>
              <li>
                A COM or P/Invoke method that returns a HRESULT or error code that is never used. Rule Description
              </li>
            </ul>
            Unnecessary object creation and the associated garbage collection of the unused object degrade performance.
            Strings are immutable and methods such as String.ToUpper returns a new instance of a string instead of modifying the instance of the string in the calling method.
            Ignoring HRESULT or error code can lead to unexpected behavior in error conditions or to low-resource conditions.
</p>
<h2>How to Fix Violations</h2>
<p>
            If method A creates a new instance of B object that is never used, pass the instance as an argument to another method or assign the instance to a variable. If the object creation is unnecessary, remove the it.-or-
            If method A calls method B, but does not use the new string instance that the method B returns. Pass the instance as an argument to another method, assign the instance to a variable. Or remove the call if it is unnecessary.
            -or-
            If method A calls method B, but does not use the HRESULT or error code that the method returns. Use the result in a conditional statement, assign the result to a variable, or pass it as an argument to another method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule unless the act of creating the object serves some purpose.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182273.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182273.aspx</a></p>
ñ
.fxcop:StringUriOverloadsCallSystemUriOverloads„
fxcop(StringUriOverloadsCallSystemUriOverloads6CA1057: String URI overloads call System.Uri overloads"MAJOR*cs2CA1057:‰<h2>Cause</h2>
<p>
            A type declares method overloads that differ only by the replacement of a string parameter with a <code>System.Uri</code> parameter, and the overload that takes the string parameter does not call the overload that takes the <code>Uri</code> parameter.
</p>
<h2>Rule Description</h2>
<p>
            Because the overloads differ only by the string/<code>Uri</code> parameter, the string is assumed to represent a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>Uri</code> class provides these services in a safe and secure manner. To reap the benefits of the <code>Uri</code> class, the string overload should call the <code>Uri</code> overload using the string argument.
</p>
<h2>How to Fix Violations</h2>
<p>
            Re-implement the method that uses the string representation of the URI so that it creates an instance of the <code>Uri</code> class using the string argument, and then passes the <code>Uri</code> object to the overload that has the <code>Uri</code> parameter.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the string parameter does not represent a URI.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:PassSystemUriObjectsInsteadOfStrings'>PassSystemUriObjectsInsteadOfStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriPropertiesShouldNotBeStrings'>UriPropertiesShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriParametersShouldNotBeStrings'>UriParametersShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriReturnValuesShouldNotBeStrings'>UriReturnValuesShouldNotBeStrings</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182170.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182170.aspx</a></p>
˛
fxcop:RemoveUnusedLocals·
fxcopRemoveUnusedLocalsCA1804: Remove unused locals"MAJOR*cs2CA1804:í<h2>Cause</h2>
<p>
            A method declares a local variable but does not use the variable except possibly as the recipient of an assignment statement. For analysis by this rule, the tested assembly must be built with debugging information and the associated program database (.pdb) file must be available.
</p>
<h2>Rule Description</h2>
<p>
            Unused local variables and unnecessary assignments increase the size of an assembly and decrease performance.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove or use the local variable. Note that the C# compiler that is included with .NET Framework¬†2.0 removes unused local variables when the <code>optimize</code> option is enabled.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if the variable was compiler emitted. It is also safe to suppress a warning from this rule, or to disable the rule, if performance and code maintenance are not primary concerns.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveLocals'>AvoidExcessiveLocals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidUncalledPrivateCode'>AvoidUncalledPrivateCode</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidUninstantiatedInternalClasses'>AvoidUninstantiatedInternalClasses</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ReviewUnusedParameters'>ReviewUnusedParameters</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182278.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182278.aspx</a></p>
¥
fxcop:SpecifyCultureInfoó
fxcopSpecifyCultureInfoCA1304: Specify CultureInfo"MAJOR*cs2CA1304:…<h2>Cause</h2>
<p>
            A method or constructor calls a member that has an overload that accepts a <code>System.Globalization.CultureInfo</code> parameter, and the method or constructor does not call the overload that takes the <code>CultureInfo</code> parameter. This rule ignores calls to the following methods:
            <ul>
              <li>


                    <code>Activator.CreateInstance</code>


              </li>
              <li>


                    <code>ResourceManager.GetObject</code>


              </li>
              <li>


                    <code>ResourceManager.GetString</code>


              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            When a <code>CultureInfo</code> or <code>System.IFormatProvider</code> object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. Also, .NET Framework members choose default culture and formatting based on assumptions that might not be correct for your code. To ensure the code works as expected for your scenarios, you should supply culture-specific information according to the following guidelines:
            <ul>
              <li>
                If the value will be displayed to the user, use the current culture. See <code>CultureInfo.CurrentCulture</code>.
              </li>
              <li>
                If the value will be stored and accessed by software, that is, persisted to a file or database, use the invariant culture. See <code>CultureInfo.InvariantCulture</code>.
              </li>
              <li>
                If you do not know the destination of the value, have the data consumer or provider specify the culture.
              </li>
            </ul>
            Note that <code>CultureInfo.CurrentUICulture</code> is used only to retrieve localized resources by using an instance of the <code>System.Resources.ResourceManager</code> class.
            Even if the default behavior of the overloaded member is appropriate for your needs, it is better to explicitly call the culture-specific overload so that your code is self-documenting and more easily maintained.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, use the overload that takes a <code>CultureInfo</code> or <code>IFormatProvider</code> and specify the argument according to the guidelines that were listed earlier.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when it is certain that the default culture/format provider is the correct choice, and where code maintainability is not an important development priority.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:SpecifyIFormatProvider'>SpecifyIFormatProvider</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182189.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182189.aspx</a></p>
‡
%fxcop:UseGenericEventHandlerInstances∂
fxcopUseGenericEventHandlerInstances+CA1003: Use generic event handler instances"MAJOR*cs2CA1003:À<h2>Cause</h2>
<p>
            A type contains a delegate that returns void, whose signature contains two parameters (the first an object and the second a type that is assignable to EventArgs), and the containing assembly targets .NET Framework¬†2.0.
</p>
<h2>Rule Description</h2>
<p>
            Before .NET Framework¬†2.0, in order to pass custom information to the event handler, a new delegate had to be declared that specified a class that was derived from the <code>System.EventArgs</code> class. This is no longer true in .NET Framework¬†2.0, which introduced the System.EventHandler&lt;TEventArgs&gt; delegate. This generic delegate allows any class that is derived from <code>EventArgs</code> to be used together with the event handler.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the delegate and replace its use by using the System.EventHandler&lt;TEventArgs&gt; delegate. If the delegate is autogenerated by the Visual Basic compiler, change the syntax of the event declaration to use the System.EventHandler&lt;TEventArgs&gt; delegate.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveParametersOnGenericTypes'>AvoidExcessiveParametersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CollectionsShouldImplementGenericInterface'>CollectionsShouldImplementGenericInterface</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareStaticMembersOnGenericTypes'>DoNotDeclareStaticMembersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotExposeGenericLists'>DoNotExposeGenericLists</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNestGenericTypesInMemberSignatures'>DoNotNestGenericTypesInMemberSignatures</a><br/>




                <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericsWhereAppropriate'>UseGenericsWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182178.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182178.aspx</a></p>
¸
,fxcop:WrapVulnerableFinallyClausesInOuterTryÀ
fxcop&WrapVulnerableFinallyClausesInOuterTry4CA2124: Wrap vulnerable finally clauses in outer try"MAJOR*cs2CA2124:–<h2>Cause</h2>
<p>
            In versions 1.0 and 1.1 of the .NET Framework, a public or protected method contains a <code>try</code>/<code>catch</code>/<code>finally</code> block. The <code>finally</code> block appears to reset security state and is not enclosed in a <code>finally</code> block.
</p>
<h2>Rule Description</h2>
<p>
            This rule locates <code>try</code>/<code>finally</code> blocks in code that targets versions 1.0 and 1.1 of the .NET Framework that might be vulnerable to malicious exception filters present in the call stack. If sensitive operations such as impersonation occur in the try block, and an exception is thrown, the filter can execute before the <code>finally</code> block. For the impersonation example, this means that the filter would execute as the impersonated user. Filters are currently implementable only in Visual Basic.





                    Caution





                      Note¬†¬†¬†In versions 2.0 and later of the .NET Framework, the runtime automatically protects a <code>try</code>/<code>catch</code>/ <code>finally</code> block from malicious exception filters, if the reset occurs directly within the method that contains the exception block.




</p>
<h2>How to Fix Violations</h2>
<p>
            Place the unwrapped <code>try</code>/<code>finally</code> in an outer try block. See the second example that follows. This forces the <code>finally</code> to execute before filter code.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Pseudo-code Example</h2>

<h3>Description</h3>
<p>
                The following pseudo-code illustrates the pattern detected by this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182322.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182322.aspx</a></p>
œ
!fxcop:DoNotUseIdleProcessPriority©
fxcopDoNotUseIdleProcessPriority(CA1600: Do not use idle process priority"MAJOR*cs2CA1600:≈<h2>Cause</h2>
<p>
            This rule occurs when processes are set to <code>ProcessPriorityClass.Idle</code>.
</p>
<h2>Rule Description</h2>
<p>
            Do not set process priority to Idle. Processes that have <code>System.Diagnostics.ProcessPriorityClass.Idle</code> will occupy the CPU when it would otherwise be idle, and will therefore block standby.
</p>
<h2>How to Fix Violations</h2>
<p>
            Set processes to <code>ProcessPriorityClass.BelowNormal</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            This rule should be suppressed only when Idle process priority is required and mobility considerations can be ignored safely.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182219.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182219.aspx</a></p>
ì
1fxcop:OverrideEqualsAndOperatorEqualsOnValueTypes›
fxcop+OverrideEqualsAndOperatorEqualsOnValueTypes:CA1815: Override equals and operator equals on value types"MAJOR*cs2CA1815:◊<h2>Cause</h2>
<p>
            A public value type does not override <code>Object.Equals</code>, or does not implement the equality operator (==). This rule does not check enumerations.
</p>
<h2>Rule Description</h2>
<p>
            For value types, the inherited implementation of <code>Equals</code> uses the Reflection library, and compares the contents of all fields. Reflection is computationally expensive, and comparing every field for equality might be unnecessary. If you expect users to compare or sort instances, or use them as hash table keys, your value type should implement <code>Equals</code>. If your programming language supports operator overloading, you should also provide an implementation of the equality and inequality operators.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, provide an implementation of <code>Equals</code>. If you can, implement the equality operator.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if instances of the value type will not be compared to each other.
</p>
<h2>Example of a Violation</h2>

<h3>Description</h3>
<p>
                The following example shows a structure (value type) that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    // Violates this rule    ¬†
    public¬†struct Point
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }
    }
}
</pre>





</p>
<h2>Example of How to Fix</h2>

<h3>Description</h3>
<p>
                The following example fixes the previous violation by overriding ValueType.Equals and implementing the equality operators (==, !=).
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    public¬†struct Point : IEquatable&lt;Point&gt;
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†int GetHashCode()
        {
            return _X ^ _Y;
        }

        public¬†override¬†bool Equals(object obj)
        {
            if (!(obj is Point))
                return¬†false;

            return Equals((Point)obj);
        }

        public¬†bool Equals(Point other)
        {
            if (_X != other._X)
                return¬†false;

            return _Y == other._Y;
        }

        public¬†static¬†bool¬†operator ==(Point point1, Point point2)
        {
            return point1.Equals(point2);
        }

        public¬†static¬†bool¬†operator !=(Point point1, Point point2)
        {
            return !point1.Equals(point2);
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:OverrideEqualsOnOverloadingOperatorEquals'>OverrideEqualsOnOverloadingOperatorEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals'>OverloadOperatorEqualsOnOverridingValueTypeEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorsShouldHaveSymmetricalOverloads'>OperatorsShouldHaveSymmetricalOverloads</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182276.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182276.aspx</a></p>
¥
'fxcop:UriReturnValuesShouldNotBeStringsà
fxcop!UriReturnValuesShouldNotBeStrings/CA1055: URI return values should not be strings"MAJOR*cs2CA1055:ó<h2>Cause</h2>
<p>
            The name of a method contains "uri", "Uri", "urn", "Urn", "url", or "Url", and the method returns a string.
</p>
<h2>Rule Description</h2>
<p>
            This rule splits the method name into tokens based on the Pascal casing convention and checks whether each token equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the rule assumes that the method returns a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>System.Uri</code> class provides these services in a safe and secure manner.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the return type to a <code>Uri</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the return value does not represent a URI.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:UriPropertiesShouldNotBeStrings'>UriPropertiesShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriParametersShouldNotBeStrings'>UriParametersShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:PassSystemUriObjectsInsteadOfStrings'>PassSystemUriObjectsInsteadOfStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:StringUriOverloadsCallSystemUriOverloads'>StringUriOverloadsCallSystemUriOverloads</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182176.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182176.aspx</a></p>
«!
3fxcop:MethodsMustOverrideWithConsistentTransparencyè!
fxcop-MethodsMustOverrideWithConsistentTransparencyNCA2134: Methods must keep consistent transparency when overriding base methods"MAJOR*cs2CA2134:Û<h2>Cause</h2>
<p>
            This rule fires when a method marked with the <code>SecurityCriticalAttribute</code> overrides a method that is transparent or marked with the <code>SecuritySafeCriticalAttribute</code>. The rule also fires when a method that is transparent or marked with the <code>SecuritySafeCriticalAttribute</code> overrides a method that is marked with a <code>SecurityCriticalAttribute</code>.
            The rule is applied when overriding a virtual method or implementing an interface.



</p>
<h2>Rule Description</h2>
<p>
            This rule fires on attempts to change the security accessibility of a method further up the inheritance chain. For example, if a virtual method in a base class is transparent or safe-critical, then the derived class must override it with a transparent or safe-critical method. Conversely, if the virtual is security critical, the derived class must override it with a security critical method. The same rule applies for implementing interface methods.
            Transparency rules are enforced when the code is JIT compiled instead of at runtime, so that the transparency calculation does not have dynamic type information. Therefore, the result of the transparency calculation must be able to be determined solely from the static types being JIT-compiled, regardless of the dynamic type.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the transparency of the method that is overriding a virtual method or implementing an interface to match the transparency of the virtual or interface method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress warnings from this rule. Violations of this rule will result in a runtime <code>TypeLoadException</code> for assemblies that use level 2 transparency.
</p>
<h2>Examples</h2>

<h3>Code</h3>
<p>










            <pre>
using System;
using System.Security;

namespace TransparencyWarningsDemo
{

    public¬†interface IInterface
    {
        void TransparentInterfaceMethod();

        [SecurityCritical]
        void CriticalInterfaceMethod();
    }

    public¬†class Base
    {
        public¬†virtual¬†void TransparentVirtual() { }

        [SecurityCritical]
        public¬†virtual¬†void CriticalVirtual() { }
    }

    public¬†class Derived : Base, IInterface
    {
        // CA2134 violation - implementing a transparent method with a critical one.  This can be fixed by any of:¬†
        //   1. Making IInterface.TransparentInterfaceMethod security critical¬†
        //   2. Making Derived.TransparentInterfaceMethod transparent¬†
        //   3. Making Derived.TransparentInterfaceMethod safe critical
        [SecurityCritical]
        public¬†void TransparentInterfaceMethod() { }

        // CA2134 violation - implementing a critical method with a transparent one.  This can be fixed by any of:¬†
        //   1. Making IInterface.CriticalInterfaceMethod transparent¬†
        //   2. Making IInterface.CriticalInterfaceMethod safe critical¬†
        //   3. Making Derived.TransparentInterfaceMethod critical¬†
        public¬†void CriticalInterfaceMethod() { }

        // CA2134 violation - overriding a transparent method with a critical one.  This can be fixed by any of:¬†
        //   1. Making Base.TrasnparentVirtual critical¬†
        //   2. Making Derived.TransparentVirtual transparent¬†
        //   3. Making Derived.TransparentVirtual safe critical
        [SecurityCritical]
        public¬†override¬†void TransparentVirtual() { }

        // CA2134 violation - overriding a critical method with a transparent one.  This can be fixed by any of:¬†
        //   1. Making Base.CriticalVirtual transparent¬†
        //   2. Making Base.CriticalVirtual safe critical¬†
        //   3. Making Derived.CriticalVirtual critical¬†
        public¬†override¬†void CriticalVirtual() { }
    }

}
</pre>





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997447.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997447.aspx</a></p>
–
0fxcop:MembersShouldNotExposeCertainConcreteTypesõ
fxcop*MembersShouldNotExposeCertainConcreteTypes8CA1059: Members should not expose certain concrete types"MAJOR*cs2CA1059:ò<h2>Cause</h2>
<p>
            An externally visible member is a certain concrete type or exposes certain concrete types through one of its parameters or return value. Currently, this rule reports exposure of the following concrete types:
            <ul>
              <li>
                A type derived from <code>System.Xml.XmlNode</code>.
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            A concrete type is a type that has a complete implementation and therefore can be instantiated. To allow widespread use of the member, replace the concrete type with the suggested interface. This allows the member to accept any type that implements the interface or be used where a type that implements the interface is expected.
            The following table lists the targeted concrete types and their suggested replacements.







                    Concrete type


                    Replacement






                        <code>XPathDocument</code>






                        <code>System.Xml.XPath.IXPathNavigable</code>
                      .
                    Using the interface decouples the member from a specific implementation of an XML data source.




</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the concrete type to the suggested interface.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a message from this rule if the specific functionality provided by the concrete type is required.
</p>
<h2>Related Rules</h2>
<p>


                <code>CA1011: Consider passing base types as parameters</code>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182160.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182160.aspx</a></p>
Ô
&fxcop:MarkAttributesWithAttributeUsageƒ
fxcop MarkAttributesWithAttributeUsage4CA1018: Mark attributes with AttributeUsageAttribute"MAJOR*cs2CA1018:œ<h2>Cause</h2>
<p>
            The <code>System.AttributeUsageAttribute</code> attribute is not present on the custom attribute.
</p>
<h2>Rule Description</h2>
<p>
            When you define a custom attribute, mark it by using <code>AttributeUsageAttribute</code> to indicate where in the source code the custom attribute can be applied. The meaning and intended usage of an attribute will determine its valid locations in code. For example, you might define an attribute that identifies the person who is responsible for maintaining and enhancing each type in a library, and that responsibility is always assigned at the type level. In this case, compilers should enable the attribute on classes, enumerations, and interfaces, but should not enable it on methods, events, or properties. Organizational policies and procedures would dictate whether the attribute should be enabled on assemblies.
            The <code>System.AttributeTargets</code> enumeration defines the targets that you can specify for a custom attribute. If you omit <code>AttributeUsageAttribute</code>, your custom attribute will be valid for all targets, as defined by the <code>All</code> value of <code>AttributeTargets</code> enumeration.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, specify targets for the attribute by using <code>AttributeUsageAttribute</code>. See the following example.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You should fix a violation of this rule instead of excluding the message. Even if the attribute inherits <code>AttributeUsageAttribute</code>, the attribute should be present to simplify code maintenance.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DefineAccessorsForAttributeArguments'>DefineAccessorsForAttributeArguments</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidUnsealedAttributes'>AvoidUnsealedAttributes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182158.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182158.aspx</a></p>
 
!fxcop:AvoidNamespacesWithFewTypes§
fxcopAvoidNamespacesWithFewTypes'CA1020: Avoid namespaces with few types"MAJOR*cs2CA1020:¡<h2>Cause</h2>
<p>
            A namespace other than the global namespace contains fewer than five types.
</p>
<h2>Rule Description</h2>
<p>
            Make sure that each of your namespaces has a logical organization, and that a valid reason exists to put types in a sparsely populated namespace. Namespaces should contain types that are used together in most scenarios. When their applications are mutually exclusive, types should be located in separate namespaces. For example, the <code>System.Web.UI</code> namespace contains types that are used in Web applications, and the <code>System.Windows.Forms</code> namespace contains types that are used in Windows-based applications. Even though both namespaces have types that control aspects of the user interface, these types are not designed for use in the same application.¬†Therefore, they are located in separate namespaces. Careful namespace organization can also be helpful because it increases the discoverability of a feature. By examining the namespace hierarchy, library consumers should be able to locate the types that implement a feature.





                    Note




                    Design-time types and permissions should not be merged into other namespaces to comply with this guideline. These types belong in their own namespaces below your main namespace, and the namespaces should end in <code>.Design</code> and <code>.Permissions</code>, respectively.




</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, try to combine namespaces that contain just a few types into a single namespace.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the namespace does not contain types that are used with the types in your other namespaces.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182130.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182130.aspx</a></p>
é
(fxcop:DoNotShipUnreleasedResourceFormats·
fxcop"DoNotShipUnreleasedResourceFormats/CA2228: Do not ship unreleased resource formats"MAJOR*cs2CA2228:Ô<h2>Cause</h2>
<p>
            A resource file was built using a version of the .NET Framework that is not currently supported.
</p>
<h2>Rule Description</h2>
<p>
            Resource files that were built by using pre-release versions of the .NET Framework might not be usable by supported versions of the .NET Framework.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, build the resource using a supported version of the .NET Frameworkk.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182339.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182339.aspx</a></p>
à
 fxcop:ReviewVisibleEventHandlers„
fxcopReviewVisibleEventHandlers%CA2109: Review visible event handlers"MAJOR*cs2CA2109:É<h2>Cause</h2>
<p>
            A public or protected event-handling method was detected.
</p>
<h2>Rule Description</h2>
<p>
            An externally visible event-handling method presents a security issue that requires review.
            Event-handling methods should not be exposed unless absolutely necessary. An event handler, a delegate type, that invokes the exposed method can be added to any event as long as the handler and event signatures match. Events can potentially be raised by any code, and are frequently raised by highly trusted system code in response to user actions such as clicking a button. Adding a security check to an event-handling method does not prevent code from registering an event handler that invokes the method.
            A demand cannot reliably protect a method invoked by an event handler. Security demands help protect code from untrusted callers by examining the callers on the call stack. Code that adds an event handler to an event is not necessarily present on the call stack when the event handler's methods run. Therefore, the call stack might have only highly trusted callers when the event handler method is invoked. This causes demands made by the event handler method to succeed. Also, the demanded permission might be asserted when the method is invoked. For these reasons, the risk of not fixing a violation of this rule can only be assessed after reviewing the event-handling method. When you review your code, consider the following issues:
            <ul>
              <li>
                Does your event handler perform any operations that are dangerous or exploitable, such as asserting permissions or suppressing unmanaged code permission?
              </li>
              <li>
                What are the security threats to and from your code because it can run at any time with only highly trusted callers on the stack?
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, review the method and evaluate the following:
            <ul>
              <li>
                Can you make the event-handling method non-public?
              </li>
              <li>
                Can you move all dangerous functionality out of the event handler?
              </li>
              <li>
                If a security demand is imposed, can this be accomplished in some other manner?
              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only after a careful security review to make sure that your code does not pose a security threat.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182312.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182312.aspx</a></p>
‰
*fxcop:CollectionPropertiesShouldBeReadOnlyµ
fxcop$CollectionPropertiesShouldBeReadOnly1CA2227: Collection properties should be read only"MAJOR*cs2CA2227:ø<h2>Cause</h2>
<p>
            An externally visible writable property is a type that implements <code>System.Collections.ICollection</code>. Arrays, indexers (properties with the name 'Item'), and permission sets are ignored by the rule.
</p>
<h2>Rule Description</h2>
<p>
            A writable collection property allows a user to replace the collection with a completely different collection. A read-only property stops the collection from being replaced but still allows the individual members to be set. If replacing the collection is a goal, the preferred design pattern is to include a method to remove all the elements from the collection and a method to re-populate the collection. See the <code>Clear</code> and <code>AddRange</code> methods of the <code>System.Collections.ArrayList</code> class for an example of this pattern.
            Both binary and XML serialization support read-only properties that are collections. The <code>System.Xml.Serialization.XmlSerializer</code> class has specific requirements for types that implement <code>ICollection</code> and <code>System.Collections.IEnumerable</code> in order to be serializable.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the property read-only and, if the design requires it, add methods to clear and re-populate the collection.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <code>CA1819: Properties should not return arrays</code>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182327.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182327.aspx</a></p>
°

-fxcop:DoNotDeclareVirtualMembersInSealedTypesÔ	
fxcop'DoNotDeclareVirtualMembersInSealedTypes6CA1048: Do not declare virtual members in sealed types"MAJOR*cs2CA1048:Ò<h2>Cause</h2>
<p>
            A public type is sealed and declares a method that is both <code>virtual</code> (<code>Overridable</code> in Visual Basic) and not final. This rule does not report violations for delegate types, which must follow this pattern.
</p>
<h2>Rule Description</h2>
<p>
            Types declare methods as virtual so that inheriting types can override the implementation of the virtual method. By definition, you cannot inherit from a sealed type, making a virtual method on a sealed type meaningless.
            The Visual Basic .NET and C# compilers do not allow types to violate this rule.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the method non-virtual or make the type inheritable.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Leaving the type in its current state can cause maintenance issues and does not provide any benefits.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182140.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182140.aspx</a></p>
 
7fxcop:OverloadOperatorEqualsOnOverloadingAddAndSubtracté
fxcop1OverloadOperatorEqualsOnOverloadingAddAndSubtract@CA1013: Overload operator equals on overloading add and subtract"MAJOR*cs2CA1013:¸	<h2>Cause</h2>
<p>
            A public or protected type implements the addition or subtraction operators without implementing the equality operator.
</p>
<h2>Rule Description</h2>
<p>
            When instances of a type can be combined by using operations such as addition and subtraction, you should almost always define equality to return <code>true</code> for any two instances that have the same constituent values.
            You cannot use the default equality operator in an overloaded implementation of the equality operator. Doing so will cause a stack overflow. To implement the equality operator, use the Object.Equals method in your implementation. See the following example.









            <pre>
if (Object.ReferenceEquals(left, null))
    return Object.ReferenceEquals(right, null);
return left.Equals(right);
</pre>











                How to Fix Violations





</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the default implementation of the equality operator provides the correct behavior for the type.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182164.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182164.aspx</a></p>
Ã
+fxcop:PropertyNamesShouldNotMatchGetMethodsú
fxcop%PropertyNamesShouldNotMatchGetMethods3CA1721: Property names should not match get methods"MAJOR*cs2CA1721:£<h2>Cause</h2>
<p>
            The name of a public or protected member starts with 'Get' and otherwise matches the name of a public or protected property. For example, a type that contains a method that is named 'GetColor' and a property that is named 'Color' violates this rule.
</p>
<h2>Rule Description</h2>
<p>
            Get methods and properties should have names that clearly distinguish their function.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Change the name so that it does not match the name of a method that is prefixed with 'Get'.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.





                    Note




                    This warning may be excluded if the Get method is caused by implementing IExtenderProvider interface.




</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:UsePropertiesWhereAppropriate'>UsePropertiesWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182253.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182253.aspx</a></p>
ˇ
3fxcop:TypesThatOwnNativeResourcesShouldBeDisposable«
fxcop-TypesThatOwnNativeResourcesShouldBeDisposable<CA1049: Types that own native resources should be disposable"MAJOR*cs2CA1049:Ω<h2>Cause</h2>
<p>
            A type references a <code>System.IntPtr</code> field, a <code>System.UIntPtr</code> field, or a <code>System.Runtime.InteropServices.HandleRef</code> field, but does not implement <code>System.IDisposable</code>.
</p>
<h2>Rule Description</h2>
<p>
            This rule assumes that <code>IntPtr</code>, <code>UIntPtr</code>, and <code>HandleRef</code> fields store pointers to unmanaged resources. Types that allocate unmanaged resources should implement <code>IDisposable</code> to let callers to release those resources on demand and shorten the lifetimes of the objects that hold the resources.
            The recommended design pattern to clean up unmanaged resources is to provide both an implicit and an explicit means to free those resources by using the <code>Object.Finalize</code> method and the <code>IDisposable.Dispose</code> method, respectively. The garbage collector calls the <code>Finalize</code> method of an object at some indeterminate time after the object is determined to be no longer reachable. After <code>Finalize</code> is called, an additional garbage collection is required to free the object. The <code>Dispose</code> method allows the caller to explicitly release resources on demand, earlier than the resources would be released if left to the garbage collector. After it cleans up the unmanaged resources, <code>Dispose</code> should call the <code>GC.SuppressFinalize</code> method to let the garbage collector know that <code>Finalize</code> no longer has to be called; this eliminates the need for the additional garbage collection and shortens the lifetime of the object.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement <code>IDisposable</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the type does not reference an unmanaged resource. Otherwise, do not suppress a warning from this rule because failure to implement <code>IDisposable</code> can cause unmanaged resources to become unavailable or underused.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallGCKeepAliveWhenUsingNativeResources'>CallGCKeepAliveWhenUsingNativeResources</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CallGCSuppressFinalizeCorrectly'>CallGCSuppressFinalizeCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DisposableTypesShouldDeclareFinalizer'>DisposableTypesShouldDeclareFinalizer</a><br/>




                <a href='/coding_rules#rule_key=fxcop:TypesThatOwnDisposableFieldsShouldBeDisposable'>TypesThatOwnDisposableFieldsShouldBeDisposable</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182173.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182173.aspx</a></p>
‰
Gfxcop:TransparentMethodsMustNotCallSuppressUnmanagedCodeSecurityMethodsò
fxcopATransparentMethodsMustNotCallSuppressUnmanagedCodeSecurityMethodsbCA2138: Transparent methods must not call methods with the SuppressUnmanagedCodeSecurity attribute"MAJOR*cs2CA2138:‘<h2>Cause</h2>
<p>
            A security transparent method calls a method that is marked with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>
            This rule fires on any transparent method that calls directly into native code, for example, by using a via a P/Invoke (platform invoke) call. P/Invoke and COM interop methods that are marked with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute result in a LinkDemand being done against the calling method. Because security transparent code cannot satisfy LinkDemands, the code also cannot call methods that are marked with the SuppressUnmanagedCodeSecurity attribute, or methods of class that is marked with SuppressUnmanagedCodeSecurity attribute. The method will fail, or the demand will be converted to a full demand.
            Violations of this rule lead to a <code>MethodAccessException</code> in the Level 2 security transparency model, and a full demand for <code>UnmanagedCode</code> in the Level 1 transparency model.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute and mark the method with the <code>SecurityCriticalAttribute</code> or the <code>SecuritySafeCriticalAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997711.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997711.aspx</a></p>
©
/fxcop:UseSafeHandleToEncapsulateNativeResourcesı
fxcop)UseSafeHandleToEncapsulateNativeResources6CA2006: Use SafeHandle to encapsulate native resources"MAJOR*cs2CA2006:ı<h2>Cause</h2>
<p>
            Managed code uses <code>IntPtr</code> to access native resources.
</p>
<h2>Rule Description</h2>
<p>
            Use of <code>IntPtr</code> in managed code might indicate a potential security and reliability problem. All uses of <code>IntPtr</code> must be reviewed to determine whether the use of a <code>SafeHandle</code> , or a similar technology, is required in its place. Problems will occur if the <code>IntPtr</code> represents some native resource, such as memory, a file handle, or a socket, that the managed code is considered to own. If the managed code owns the resource, it must also release the native resources associated with it, because a failure to do so would cause resource leakage.
            In such scenarios, security or reliability problems will also exist if multithreaded access is allowed to the <code>IntPtr</code> and a way of releasing the resource that is represented by the <code>IntPtr</code> is provided. These problems involve recycling of the <code>IntPtr</code> value on resource release while simultaneous use of the resource is being made on another thread. This can cause race conditions where one thread can read or write data that is associated with the wrong resource. For example, if your type stores an OS handle as an <code>IntPtr</code> and allows users to call both Close and any other method that uses that handle simultaneously and without some kind of synchronization, your code has a handle recycling problem.
            This handle recycling problem can cause data corruption and, frequently, a security vulnerability. <code>SafeHandle</code> and its sibling class <code>CriticalHandle</code> provide a mechanism to encapsulate a native handle to a resource so that such threading problems can be avoided. Additionally, you can use <code>SafeHandle</code> and its sibling class <code>CriticalHandle</code> for other threading issues, for example, to carefully control the lifetime of managed objects that contain a copy of the native handle over calls to native methods. In this situation, you can often remove calls to <code>GC.KeepAlive</code>. The performance overhead thay you incur when you use <code>SafeHandle</code> and, to a lesser degree, <code>CriticalHandle</code>, can frequently be reduced through careful design.
</p>
<h2>How to Fix Violations</h2>
<p>
            Convert <code>IntPtr</code> usage to <code>SafeHandle</code> to safely manage access to native resources. See the <code>SafeHandle</code> reference topic for examples.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You should not suppress this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182294.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182294.aspx</a></p>
ı	
fxcop:DoNotHideBaseClassMethods—	
fxcopDoNotHideBaseClassMethods&CA1061: Do not hide base class methods"MAJOR*cs2CA1061:Ò<h2>Cause</h2>
<p>
            A derived type declares a method with the same name and with the same number of parameters as one of its base methods; one or more of the parameters is a base type of the corresponding parameter in the base method; and any remaining parameters have types that are identical to the corresponding parameters in the base method.
</p>
<h2>Rule Description</h2>
<p>
            A method in a base type is hidden by an identically named method in a derived type when the parameter signature of the derived method differs only by types that are more weakly derived than the corresponding types in the parameter signature of the base method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove or rename the method, or change the parameter signature so that the method does not hide the base method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182143.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182143.aspx</a></p>
Ä

1fxcop:DoNotIndirectlyExposeMethodsWithLinkDemands 	
fxcop+DoNotIndirectlyExposeMethodsWithLinkDemands:CA2122: Do not indirectly expose methods with link demands"MAJOR*cs2CA2122:ƒ<h2>Cause</h2>
<p>
            A public or protected member has a Link Demands and is called by a member that does not perform any security checks.
</p>
<h2>Rule Description</h2>
<p>
            A link demand checks the permissions of the immediate caller only. If a member X makes no security demands of its callers, and calls code protected by a link demand, a caller without the necessary permission can use X to access the protected member.
</p>
<h2>How to Fix Violations</h2>
<p>
            Add a security <code>Data and Modeling in the .NET Framework</code> or link demand to the member so that it no longer provides unsecured access to the link demand-protected member.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            To safely suppress a warning from this rule, you must make sure that your code does not grant its callers access to operations or resources that can be used in a destructive manner.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182303.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182303.aspx</a></p>
‚
7fxcop:ResourceStringCompoundWordsShouldBeCasedCorrectly¶
fxcop1ResourceStringCompoundWordsShouldBeCasedCorrectly@CA1701: Resource string compound words should be cased correctly"MAJOR*cs2CA1701:î<h2>Cause</h2>
<p>
            A resource string contains a compound word that does not appear to be cased correctly.
</p>
<h2>Rule Description</h2>
<p>
            Each word in the resource string is split into tokens that are based on the casing. Each contiguous two-token combination is checked by the Microsoft spelling checker library. If recognized, the word produces a violation of the rule. Examples of compound words that cause a violation are "CheckSum" and "MultiPart", which should be cased as "Checksum" and "Multipart", respectively. Due to previous common usage, several exceptions are built into the rule, and several single words are flagged, such as "Toolbar" and "Filename", that should be cased as two distinct words. In this example, "ToolBar" and "FileName" would be flagged.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Change the word so that it is cased correctly.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if both parts of the compound word are recognized by the spelling dictionary and the intent is to use two words.
            You can also add compound words to a custom dictionary for the spelling checker. Words in the custom dictionary do not cause violations. For more information, see How to: Customize the Code Analysis Dictionary.
</p>
<h2>Related Rules</h2>
<p>


                CA1702: Compound words should be cased correctly




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldBeCasedCorrectly'>IdentifiersShouldBeCasedCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldDifferByMoreThanCase'>IdentifiersShouldDifferByMoreThanCase</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264481.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264481.aspx</a></p>
¶

$fxcop:PropertiesShouldNotBeWriteOnly˝	
fxcopPropertiesShouldNotBeWriteOnly+CA1044: Properties should not be write only"MAJOR*cs2CA1044:ì	<h2>Cause</h2>
<p>
            The public or protected property has a set accessor but does not have a get accessor.
</p>
<h2>Rule Description</h2>
<p>
            Get accessors provide read access to a property and set accessors provide write access. Although it is acceptable and often necessary to have a read-only property, the design guidelines prohibit the use of write-only properties. This is because letting a user set a value and then preventing the user from viewing the value does not provide any security. Also, without read access, the state of shared objects cannot be viewed, which limits their usefulness.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add a get accessor to the property. Alternatively, if the behavior of a write-only property is necessary, consider converting this property to a method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is strongly recommended that you do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182165.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182165.aspx</a></p>
•
-fxcop:DoNotNestGenericTypesInMemberSignaturesÛ
fxcop'DoNotNestGenericTypesInMemberSignatures6CA1006: Do not nest generic types in member signatures"MAJOR*cs2CA1006:ı<h2>Cause</h2>
<p>
            An externally visible member has a signature that contains a nested type argument.
</p>
<h2>Rule Description</h2>
<p>
            A nested type argument is a type argument that is also a generic type. To call a member whose signature contains a nested type argument, the user must instantiate one generic type and pass this type to the constructor of a second generic type. The required procedure and syntax are complex and should be avoided.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the design to remove the nested type argument.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveParametersOnGenericTypes'>AvoidExcessiveParametersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CollectionsShouldImplementGenericInterface'>CollectionsShouldImplementGenericInterface</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareStaticMembersOnGenericTypes'>DoNotDeclareStaticMembersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotExposeGenericLists'>DoNotExposeGenericLists</a><br/>




                <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericEventHandlerInstances'>UseGenericEventHandlerInstances</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericsWhereAppropriate'>UseGenericsWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182144.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182144.aspx</a></p>
ÿ
4fxcop:TypesThatOwnDisposableFieldsShouldBeDisposableü
fxcop.TypesThatOwnDisposableFieldsShouldBeDisposable=CA1001: Types that own disposable fields should be disposable"MAJOR*cs2CA1001:ì<h2>Cause</h2>
<p>
            A class declares and implements an instance field that is a <code>System.IDisposable</code> type and the class does not implement <code>IDisposable</code>.
</p>
<h2>Rule Description</h2>
<p>
            A class implements the <code>IDisposable</code> interface to dispose of unmanaged resources that it owns. An instance field that is an <code>IDisposable</code> type indicates that the field owns an unmanaged resource. A class that declares an <code>IDisposable</code> field indirectly owns an unmanaged resource and should implement the <code>IDisposable</code> interface. If the class does not directly own any unmanaged resources, it should not implement a finalizer.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement <code>IDisposable</code> and from the <code>IDisposable.Dispose</code> method call the <code>Dispose</code> method of the field.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DisposableFieldsShouldBeDisposed'>DisposableFieldsShouldBeDisposed</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DisposableTypesShouldDeclareFinalizer'>DisposableTypesShouldDeclareFinalizer</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DisposeMethodsShouldCallBaseClassDispose'>DisposeMethodsShouldCallBaseClassDispose</a><br/>




                <a href='/coding_rules#rule_key=fxcop:TypesThatOwnNativeResourcesShouldBeDisposable'>TypesThatOwnNativeResourcesShouldBeDisposable</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182172.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182172.aspx</a></p>
‘
fxcop:DoNotTreatFibersAsThreads∞
fxcopDoNotTreatFibersAsThreads&CA2003: Do not treat fibers as threads"MAJOR*cs2CA2003:–<h2>Cause</h2>
<p>
            A managed thread is being treated as a Win32 thread.
</p>
<h2>Rule Description</h2>
<p>
            Do not assume a managed thread is a Win32 thread. It is a fiber. The common language runtime (CLR) will run managed threads as fibers in the context of real threads that are owned by SQL. These threads can be shared across AppDomains and even databases in the SQL Server process. Using managed thread local storage will work, but you may not use unmanaged thread local storage or assume that your code will run on the current OS thread again. Do not change settings such as the locale of the thread. Do not call CreateCriticalSection or CreateMutex via P/Invoke because they require that the thread that enters a lock must also exit the lock. Because this will not be the case when you use fibers, Win32 critical sections and mutexes will be useless in SQL. You may safely use most of the state on a managed System.Thread object. This includes managed thread local storage and the current user interface (UI) culture of the thread. However, for programming model reasons, you will not be able to change the current culture of a thread when you  use SQL; this will be enforced through a new permission.
</p>
<h2>How to Fix Violations</h2>
<p>
            Examine your usage of threads and change your code accordingly.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You should not suppress this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182291.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182291.aspx</a></p>
˝
&fxcop:OverrideMethodsOnComparableTypes“
fxcop OverrideMethodsOnComparableTypes,CA1036: Override methods on comparable types"MAJOR*cs2CA1036:Â<h2>Cause</h2>
<p>
            A public or protected type implements the <code>System.IComparable</code> interface and does not override <code>Object.Equals</code> or does not overload the language-specific operator for equality, inequality, less than, or greater than. The rule does not report a violation if the type inherits only an implementation of the interface.
</p>
<h2>Rule Description</h2>
<p>
            Types that define a custom sort order implement the <code>IComparable</code> interface. The <code>CompareTo</code> method returns an integer value that indicates the correct sort order for two instances of the type. This rule identifies types that set a sort order; this implies that the ordinary meaning of equality, inequality, less than, and greater than do not apply. When you provide an implementation of <code>IComparable</code>, you must usually also override <code>Equals</code> so that it returns values that are consistent with <code>CompareTo</code>. If you override <code>Equals</code> and are coding in a language that supports operator overloads, you should also provide operators that are consistent with <code>Equals</code>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, override <code>Equals</code>. If your programming language supports operator overloading, supply the following operators:
            <ul>
              <li>
                op_Equality
              </li>
              <li>
                op_Inequality
              </li>
              <li>
                op_LessThan
              </li>
              <li>
                op_GreaterThan
              </li>
            </ul>
            In C#, the tokens that are used to represent these operators are as follows: ==, !=, &lt;, and &gt;.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the violation is caused by missing operators and your programming language does not support operator overloading, as is the case with Visual Basic¬†.NET. It is also safe to suppress a warning for from this rule when it fires on equality operators other than op_Equality if you determine that implementing the operators does not make sense in your application context. However, you should always over op_Equality and the == operator if you override Object.Equals.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182163.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182163.aspx</a></p>
Ì	
 fxcop:PInvokesShouldNotBeVisible»	
fxcopPInvokesShouldNotBeVisible'CA1401: P/Invokes should not be visible"MAJOR*cs2CA1401:Ê<h2>Cause</h2>
<p>
            A public or protected method in a public type has the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute (also implemented by the <code>Declare</code> keyword in Visual Basic).
</p>
<h2>Rule Description</h2>
<p>
            Methods that are marked with the <code>DllImportAttribute</code> attribute (or methods that are defined by using the <code>Declare</code> keyword in Visual Basic) use Platform Invocation Services to access unmanaged code. Such methods should not be exposed. By keeping these methods private or internal, you make sure that your library cannot be used to breach security by allowing callers access to unmanaged APIs that they could not call otherwise.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the access level of the method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182209.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182209.aspx</a></p>
Ñ
*fxcop:PassSystemUriObjectsInsteadOfStrings’
fxcop$PassSystemUriObjectsInsteadOfStrings2CA2234: Pass System.Uri objects instead of strings"MAJOR*cs2CA2234:ﬁ<h2>Cause</h2>
<p>
            A call is made to a method that has a string parameter whose name contains "uri", "Uri", "urn", "Urn", "url", or "Url"; and the declaring type of the method contains a corresponding method overload that has a <code>System.Uri</code> parameter.
</p>
<h2>Rule Description</h2>
<p>
            A parameter name is split into tokens based on the camel casing convention, and then each token is checked to see whether it equals "uri", "Uri", "urn", "Urn", "url", or "Url". If there is a match, the parameter is assumed to represent a uniform resource identifier (URI). A string representation of a URI is prone to parsing and encoding errors, and can lead to security vulnerabilities. The <code>Uri</code> class provides these services in a safe and secure manner. When there is a choice between two overloads that differ only regarding the representation of a URI, the user should choose the overload that takes a <code>Uri</code> argument.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call the overload that takes the <code>Uri</code> argument.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the string parameter does not represent a URI.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:StringUriOverloadsCallSystemUriOverloads'>StringUriOverloadsCallSystemUriOverloads</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriPropertiesShouldNotBeStrings'>UriPropertiesShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriParametersShouldNotBeStrings'>UriParametersShouldNotBeStrings</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UriReturnValuesShouldNotBeStrings'>UriReturnValuesShouldNotBeStrings</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182360.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182360.aspx</a></p>
Ö
#fxcop:NestedTypesShouldNotBeVisible›
fxcopNestedTypesShouldNotBeVisible*CA1034: Nested types should not be visible"MAJOR*cs2CA1034:ı
<h2>Cause</h2>
<p>
            An externally visible type contains an externally visible type declaration. Nested enumerations and protected types are exempt from this rule.
</p>
<h2>Rule Description</h2>
<p>
            A nested type is a type declared within the scope of another type. Nested types are useful for encapsulating private implementation details of the containing type. Used for this purpose, nested types should not be externally visible.
            Do not use externally visible nested types for logical grouping or to avoid name collisions; instead, use namespaces.
            Nested types include the notion of member accessibility, which some programmers do not understand clearly.
            Protected types can be used in subclasses and nested types in advance customization scenarios.
</p>
<h2>How to Fix Violations</h2>
<p>
            If you do not intend the nested type to be externally visible, change the type's accessibility. Otherwise, remove the nested type from its parent. If the purpose of the nesting is to categorize the nested type, use a namespace to create the hierarchy instead.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182162.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182162.aspx</a></p>
¢
Afxcop:TransparentMethodsShouldNotUseSuppressUnmanagedCodeSecurity‹
fxcop;TransparentMethodsShouldNotUseSuppressUnmanagedCodeSecuritycCA2145: Transparent methods should not be decorated with the SuppressUnmanagedCodeSecurityAttribute"MAJOR*cs2CA2145:ù<h2>Cause</h2>
<p>
            A transparent method, a method that is marked with the <code>SecuritySafeCriticalAttribute</code> method, or a type that contains a method is marked with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>
            Methods decorated with the <code>SuppressUnmanagedCodeSecurityAttribute</code> attribute have an implicit LinkDemand placed upon any method that calls it. This LinkDemand requires that the calling code be security critical. Marking the method that uses SuppressUnmanagedCodeSecurity with the <code>SecurityCriticalAttribute</code> attribute makes this requirement more obvious for callers of the method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, mark the method or type with the <code>SecurityCriticalAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>

<h3>Code</h3>
<p>










            <pre>
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace TransparencyWarningsDemo
{

    public¬†class SafeNativeMethods
    {
        // CA2145 violation - transparent method marked SuppressUnmanagedCodeSecurity.  This should be fixed by¬†
        // marking this method SecurityCritical.
        [DllImport("kernel32.dll", SetLastError = true)]
        [SuppressUnmanagedCodeSecurity]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal¬†static¬†extern¬†bool Beep(uint dwFreq, uint dwDuration);
    }
}
</pre>





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997570.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997570.aspx</a></p>
ä
fxcop:EnumStorageShouldBeInt32Á
fxcopEnumStorageShouldBeInt32$CA1028: Enum storage should be Int32"MAJOR*cs2CA1028:ä<h2>Cause</h2>
<p>
            The underlying type of a public enumeration is not System.Int32.
</p>
<h2>Rule Description</h2>
<p>
            An enumeration is a value type that defines a set of related named constants. By default, the System.Int32 data type is used to store the constant value. Even though you can change this underlying type, it is not necessary or recommended for most scenarios. Note that no significant performance gain is achieved by using a data type that is smaller than Int32. If you cannot use the default data type, you should use one of the Common Language System (CLS)-compliant integral types, <code>Byte</code>, Int16, Int32, or Int64 to make sure that all values of the enumeration can be represented in CLS-compliant programming languages.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, unless size or compatibility issues exist, use Int32. For situations where Int32 is not large enough to hold the values, use Int64. If backward compatibility requires a smaller data type, use <code>Byte</code> or Int16.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only if backward compatibility issues require it. In applications, failure to comply with this rule usually does not cause problems. In libraries, where language interoperability is required, failure to comply with this rule might adversely affect your users.
</p>
<h2>Example of a Violation</h2>

<h3>Description</h3>
<p>
                The following example shows two enumerations that do not use the recommended underlying data type.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace DesignLibrary
{
   [Flags]
   public¬†enum Days : uint
   {
      None        = 0,
      Monday      = 1,
      Tuesday     = 2,
      Wednesday   = 4,
      Thursday    = 8,
      Friday      = 16,
      All         = Monday| Tuesday | Wednesday | Thursday | Friday
   }

   public¬†enum Color :sbyte
   {
      None        = 0,
      Red         = 1,
      Orange      = 3,
      Yellow      = 4
   }
}
</pre>





</p>
<h2>Example of How to Fix</h2>

<h3>Description</h3>
<p>
                The following example fixes the previous violation by changing the underlying data type to Int32.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    [Flags]
    public¬†enum Days : int
    {
        None        = 0,
        Monday      = 1,
        Tuesday     = 2,
        Wednesday   = 4,
        Thursday    = 8,
        Friday      = 16,
        All         = Monday| Tuesday | Wednesday | Thursday | Friday
    }

    public¬†enum Color : int
    {
        None        = 0,
        Red         = 1,
        Orange      = 3,
        Yellow      = 4
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:EnumsShouldHaveZeroValue'>EnumsShouldHaveZeroValue</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkEnumsWithFlags'>MarkEnumsWithFlags</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotMarkEnumsWithFlags'>DoNotMarkEnumsWithFlags</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNameEnumValuesReserved'>DoNotNameEnumValuesReserved</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotPrefixEnumValuesWithTypeName'>DoNotPrefixEnumValuesWithTypeName</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182147.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182147.aspx</a></p>
Ÿ
'fxcop:IdentifiersShouldNotMatchKeywords≠
fxcop!IdentifiersShouldNotMatchKeywords-CA1716: Identifiers should not match keywords"MAJOR*cs2CA1716:æ<h2>Cause</h2>
<p>
            A name of a namespace, a type, or a viritual or interface member matches a reserved keyword in a programming language.
</p>
<h2>Rule Description</h2>
<p>
            Identifiers for namespaces, types, and virtual and interface members should not match keywords that are defined by languages that target the common language runtime. Depending on the language that is used and the keyword, compiler errors and ambiguities can make the library difficult to use.
            This rule checks against keywords in the following languages:
            <ul>
              <li>
                Visual Basic
              </li>
              <li>
                C#
              </li>
              <li>
                C++/CLI
              </li>
            </ul>
            Case-insensitive comparison is used for Visual Basic keywords, and case-sensitive comparison is used for the other languages.
</p>
<h2>How to Fix Violations</h2>
<p>
            Select a name that does not appear in the list of keywords.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You can suppress a warning from this rule if you are convinced that the identifier will not confuse users of the API, and that  the library is usable in all available languages in the .NET Framework.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182248.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182248.aspx</a></p>
√
,fxcop:SecurityTransparentCodeShouldNotAssertí
fxcop&SecurityTransparentCodeShouldNotAssert8CA2147: Transparent methods may not use security asserts"MAJOR*cs2CA2147:ì<h2>Cause</h2>
<p>
            Code that is marked as <code>SecurityTransparentAttribute</code> is not granted sufficient permissions to assert.
</p>
<h2>Rule Description</h2>
<p>
            This rule analyzes all methods and types in an assembly which is either 100% transparent or mixed transparent/critical, and flags any declarative or imperative usage of <code>Assert</code>.
            At run time, any calls to <code>Assert</code> from transparent code will cause a <code>InvalidOperationException</code> to be thrown. This can occur in both 100% transparent assemblies, and also in mixed transparent/critical assemblies where a method or type is declared transparent, but includes a declarative or imperative Assert.
            The .NET Framework 2.0 introduced a feature named transparency. Individual methods, fields, interfaces, classes, and types can be either transparent or critical.
            Transparent code is not allowed to elevate security privileges. Therefore, any permissions granted or demanded of it are automatically passed through the code to the caller or host application domain. Examples of elevations include Asserts, LinkDemands, SuppressUnmanagedCode, and <code>unsafe</code> code.
</p>
<h2>How to Fix Violations</h2>
<p>
            To resolve the issue, either mark the code which calls the Assert with the <code>SecurityCriticalAttribute</code>, or remove the Assert.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a message from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264482.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264482.aspx</a></p>
Ó
fxcop:EnumsShouldHaveZeroValueÀ
fxcopEnumsShouldHaveZeroValue$CA1008: Enums should have zero value"MAJOR*cs2CA1008:Ó<h2>Cause</h2>
<p>
            An enumeration without an applied <code>System.FlagsAttribute</code> does not define a member that has a value of zero; or an enumeration that has an applied <code>FlagsAttribute</code> defines a member that has a value of zero but its name is not 'None', or the enumeration defines multiple zero-valued members.
</p>
<h2>Rule Description</h2>
<p>
            The default value of an uninitialized enumeration, just like other value types, is zero. A non-flags‚àíattributed enumeration should define a member that has the value of zero so that the default value is a valid value of the enumeration. If appropriate, name the member 'None'. Otherwise, assign zero to the most frequently used member. Note that, by default, if the value of the first enumeration member is not set in the declaration, its value is zero.
            If an enumeration that has the <code>FlagsAttribute</code> applied defines a zero-valued member, its name should be 'None' to indicate that no values have been set in the enumeration. Using a zero-valued member for any other purpose is contrary to the use of the <code>FlagsAttribute</code> in that the AND and OR bitwise operators are useless with the member. This implies that only one member should be assigned the value zero. Note that if multiple members that have the value zero occur in a flags-attributed enumeration, Enum.ToString() returns incorrect results for members that are not zero.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule for non-flags‚àíattributed enumerations, define a member that has the value of zero; this is a non-breaking change. For flags-attributed enumerations that define a zero-valued member, name this member 'None' and delete any other members that have a value of zero; this is a breaking change.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule except for flags-attributed enumerations that have previously shipped.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotMarkEnumsWithFlags'>DoNotMarkEnumsWithFlags</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNameEnumValuesReserved'>DoNotNameEnumValuesReserved</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotPrefixEnumValuesWithTypeName'>DoNotPrefixEnumValuesWithTypeName</a><br/>




                <a href='/coding_rules#rule_key=fxcop:EnumStorageShouldBeInt32'>EnumStorageShouldBeInt32</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkEnumsWithFlags'>MarkEnumsWithFlags</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182149.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182149.aspx</a></p>
µ
4fxcop:TransparentMethodsMustNotReferenceCriticalCode¸
fxcop.TransparentMethodsMustNotReferenceCriticalCodeCCA2140: Transparent code must not reference security critical items"MAJOR*cs2CA2140:Í<h2>Cause</h2>
<p>
            A transparent method:
            <ul>
              <li>
                handles a security critical security exception type
              </li>
              <li>
                has a parameter that is marked as a security critical type
              </li>
              <li>
                has a generic parameter with a security critical constraints
              </li>
              <li>
                has a local variable of a security critical type
              </li>
              <li>
                references a type that is marked as security critical
              </li>
              <li>
                calls a method that is marked as security critical
              </li>
              <li>
                references a field that is marked as security critical
              </li>
              <li>
                returns a type that is marked as security critical
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            A code element that is marked with the <code>SecurityCriticalAttribute</code>  attribute is security critical. A transparent method cannot use a security critical element. If a transparent type attempts to use a security critical type a <code>TypeAccessException</code>, <code>MethodAccessException</code> , or <code>FieldAccessException</code> is raised.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, do one of the following:
            <ul>
              <li>
                Mark the code element that uses the security critical code with the <code>SecurityCriticalAttribute</code> attribute
                - or -
              </li>
              <li>
                Remove the <code>SecurityCriticalAttribute</code> attribute from the code elements that are marked as security critical and instead mark them with the <code>SecuritySafeCriticalAttribute</code> or <code>SecurityTransparentAttribute</code> attribute.
              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264475.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264475.aspx</a></p>
É
&fxcop:ComVisibleTypesShouldBeCreatableÿ
fxcop ComVisibleTypesShouldBeCreatable-CA1409: Com visible types should be creatable"MAJOR*cs2CA1409:Í<h2>Cause</h2>
<p>
            A reference type that is specifically marked as visible to Component Object Model (COM) contains a public parameterized constructor but does not contain a public default (parameterless) constructor.
</p>
<h2>Rule Description</h2>
<p>
            A type without a public default constructor cannot be created by COM clients. However, the type can still be accessed by COM clients if another means is available to create the type and pass it to the client (for example, through the return value of a method call).
            The rule ignores types that are derived from <code>System.Delegate</code>.
            By default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add a public default constructor or remove the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> from the type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if other ways are provided to create and pass the object to the COM client.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:MarkAssembliesWithComVisible'>MarkAssembliesWithComVisible</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182203.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182203.aspx</a></p>
å
fxcop:AvoidExcessiveComplexityÈ
fxcopAvoidExcessiveComplexity"CA1502: Avoid excessive complexity"MAJOR*cs2CA1502:é<h2>Cause</h2>
<p>
            A method has an excessive cyclomatic complexity.
</p>
<h2>Rule Description</h2>
<p>

              Cyclomatic complexity measures the number of linearly independent paths through the method, which is determined by the number and complexity of conditional branches. A low cyclomatic complexity generally indicates a method that is easy to understand, test, and maintain. The cyclomatic complexity is calculated from a control flow graph of the method and is given as follows:
            cyclomatic complexity = the number of edges - the number of nodes + 1
            where a node represents a logic branch point and an edge represents a line between nodes.
            The rule reports a violation when the cyclomatic complexity is more than 25.
            You can learn more about code metrics at Measuring Complexity and Maintainability of Managed Code,
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, refactor the method to reduce its cyclomatic complexity.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the complexity cannot easily be reduced and the method is easy to understand, test, and maintain. In particular, a method that contains a large <code>switch</code> (<code>Select</code> in Visual Basic) statement is a candidate for exclusion. The risk of destabilizing the code base late in the development cycle or introducing an unexpected change in runtime behavior in previously shipped code might outweigh the maintainability benefits of refactoring the code.
</p>
<h2>How Cyclomatic Complexity is Calculated</h2>
<p>
            The cyclomatic complexity is calculated by adding 1 to the following:
            <ul>
              <li>
                Number of branches (such as <code>if</code>, <code>while</code>, and <code>do</code>)
              </li>
              <li>
                Number of <code>case</code> statements in a <code>switch</code>
              </li>
            </ul>
            The following examples show methods that have varying cyclomatic complexities.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveInheritance'>AvoidExcessiveInheritance</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182212.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182212.aspx</a></p>
Å

fxcop:SecureAssertsÈ	
fxcopSecureAssertsCA2106: Secure asserts"MAJOR*cs2CA2106:•	<h2>Cause</h2>
<p>
            A method asserts a permission and no security checks are performed on the caller.
</p>
<h2>Rule Description</h2>
<p>
            Asserting a security permission without performing any security checks can leave an exploitable security weakness in your code. A security stack walk stops when a security permission is asserted. If you assert a permission without performing any checks on the caller, the caller could indirectly execute code by using your permissions. Asserts without security checks are permissible only when you are sure that the assert cannot be used in a harmful manner. An assert is harmless if the code you call is harmless, or users cannot pass arbitrary information to code that you call.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add a security demand to the method or its declaring type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only after a careful security review.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182314.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182314.aspx</a></p>
∫
0fxcop:SpecifyMarshalingForPInvokeStringArgumentsÖ
fxcop*SpecifyMarshalingForPInvokeStringArguments8CA2101: Specify marshaling for P/Invoke string arguments"MAJOR*cs2CA2101:Ç<h2>Cause</h2>
<p>
            A platform invoke member allows for partially trusted callers, has a string parameter, and does not explicitly marshal the string.
</p>
<h2>Rule Description</h2>
<p>
            When you convert from Unicode to ANSI, it is possible that not all Unicode characters can be represented in a specific ANSI code page. Best-fit mapping tries to solve this problem by substituting a character for the character that cannot be represented. The use of this feature can cause a potential security vulnerability because you cannot control the character that is chosen. For example, malicious code could intentionally create a Unicode string that contains characters that are not found in a particular code page, which are converted to file system special characters such as '..' or '/'. Note also that security checks for special characters frequently occur before the string is converted to ANSI.
            Best-fit mapping is the default for the unmanaged conversion, WChar to MByte. Unless you explicitly disable best-fit mapping, your code might contain an exploitable security vulnerability because of this issue.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, explicitly marshal string data types.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182319.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182319.aspx</a></p>
ÿ
-fxcop:CallGetLastErrorImmediatelyAfterPInvoke¶
fxcop'CallGetLastErrorImmediatelyAfterPInvoke4CA1404: Call GetLastError immediately after P/Invoke"MAJOR*cs2CA1404:™<h2>Cause</h2>
<p>
            A call is made to the Marshal.GetLastWin32Error method or the equivalent Win32 <code>GetLastError</code> function, and the call that comes immediately before is not to a platform invoke method.
</p>
<h2>Rule Description</h2>
<p>
            A platform invoke method accesses unmanaged code and is defined by using the <code>Declare</code> keyword in Visual Basic or the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute. Generally, upon failure, unmanaged functions call the Win32 <code>SetLastError</code> function to set an error code that is associated with the failure. The caller of the failed function calls the Win32 <code>GetLastError</code> function to retrieve the error code and determine the cause of the failure. The error code is maintained on a per-thread basis and is overwritten by the next call to <code>SetLastError</code>. After a call to a failed platform invoke method, managed code can retrieve the error code by calling the GetLastWin32Error method. Because the error code can be overwritten by internal calls from other managed class library methods, the <code>GetLastError</code> or GetLastWin32Error method should be called immediately after the platform invoke method call.
            The rule ignores calls to the following managed members when they occur between the call to the platform invoke method and the call to GetLastWin32Error. These members do not change the error code and are useful for determining the success of some platform invoke method calls.
            <ul>
              <li>


                    <code>IntPtr.Zero</code>


              </li>
              <li>


                    IntPtr.Equality


              </li>
              <li>


                    IntPtr.Inequality


              </li>
              <li>


                    <code>SafeHandle.IsInvalid</code>


              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, move the call to GetLastWin32Error so that it immediately follows the call to the platform invoke method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the code between the platform invoke method call and the GetLastWin32Error method call cannot explicitly or implicitly cause the error code to change.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:MovePInvokesToNativeMethodsClass'>MovePInvokesToNativeMethodsClass</a><br/>




                <a href='/coding_rules#rule_key=fxcop:PInvokeEntryPointsShouldExist'>PInvokeEntryPointsShouldExist</a><br/>




                <a href='/coding_rules#rule_key=fxcop:PInvokesShouldNotBeVisible'>PInvokesShouldNotBeVisible</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SpecifyMarshalingForPInvokeStringArguments'>SpecifyMarshalingForPInvokeStringArguments</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseManagedEquivalentsOfWin32Api'>UseManagedEquivalentsOfWin32Api</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182199.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182199.aspx</a></p>
ä
%fxcop:CallGCSuppressFinalizeCorrectly‡
fxcopCallGCSuppressFinalizeCorrectly*CA1816: Call GC.SuppressFinalize correctly"MAJOR*cs2CA1816:ˆ<h2>Cause</h2>
<p>
            <ul>
              <li>
                A method that is an implementation of <code>IDisposable.Dispose</code> does not call <code>GC.SuppressFinalize</code>.
              </li>
              <li>
                A method that is not an implementation of <code>IDisposable.Dispose</code> calls <code>GC.SuppressFinalize</code>.
              </li>
              <li>
                A method calls <code>GC.SuppressFinalize</code> and passes something other than this (Me in Visual Basic).
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            The <code>IDisposable.Dispose</code> method lets users release resources at any time before the object becoming available for garbage collection. If the <code>IDisposable.Dispose</code> method is called, it frees resources of the object. This makes finalization unnecessary. <code>IDisposable.Dispose</code> should call <code>GC.SuppressFinalize</code> so the garbage collector does not call the finalizer of the object.
            ¬†
            To prevent derived types with finalizers from having to re-implement [System.IDisposable] and to call it, unsealed types without finalizers should still call <code>GC.SuppressFinalize</code>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule:
            If the method is an implementation of <code>Dispose</code>, add a call to <code>GC.SuppressFinalize</code>.
            If the method is¬†not an¬†implementation of <code>Dispose</code>, either remove the call to <code>GC.SuppressFinalize</code> or move it to the type's <code>Dispose</code> implementation.
            Change¬†all calls to¬†<code>GC.SuppressFinalize</code> to pass this (Me in Visual Basic).
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Only¬†suppress a warning from this rule if you are deliberating using <code>GC.SuppressFinalize</code> to control the lifetime of other objects. Do not¬†suppress a warning from this rule if an implementation of <code>Dispose</code> does not call <code>GC.SuppressFinalize</code>. In this situation, failing to suppress finalization degrades performance and provide no benefits.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DisposeMethodsShouldCallBaseClassDispose'>DisposeMethodsShouldCallBaseClassDispose</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DisposableTypesShouldDeclareFinalizer'>DisposableTypesShouldDeclareFinalizer</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182269.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182269.aspx</a></p>
Ç
fxcop:ReviewUnusedParameters·
fxcopReviewUnusedParameters CA1801: Review unused parameters"MAJOR*cs2CA1801:ä<h2>Cause</h2>
<p>
            A method signature includes a parameter that is not used in the method body. This rule does not examine the following methods:
            <ul>
              <li>
                Methods referenced by a delegate.
              </li>
              <li>
                Methods used as event handlers.
              </li>
              <li>
                Methods declared with the <code>abstract</code> (<code>MustOverride</code> in Visual Basic) modifier.
              </li>
              <li>
                Methods declared with the <code>virtual</code> (<code>Overridable</code> in Visual Basic) modifier.
              </li>
              <li>
                Methods declared with the <code>override</code> (<code>Overrides</code> in Visual Basic) modifier.
              </li>
              <li>
                Methods declared with the <code>extern</code> (<code>Declare</code> statement in Visual Basic) modifier.
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            Review parameters in non-virtual methods that are not used in the method body to make sure no correctness exists around failure to access them. Unused parameters incur maintenance and performance costs.
            Sometimes a violation of this rule can point to an implementation bug in the method. For example, the parameter should have been used in the method body. Suppress warnings of this rule if the parameter has to exist because of backward compatibility.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the unused parameter (a breaking change) or use the parameter in the method body (a non-breaking change).
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule for previously shipped code for which the fix would be a breaking change.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidUncalledPrivateCode'>AvoidUncalledPrivateCode</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidUninstantiatedInternalClasses'>AvoidUninstantiatedInternalClasses</a><br/>




                <a href='/coding_rules#rule_key=fxcop:RemoveUnusedLocals'>RemoveUnusedLocals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182268.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182268.aspx</a></p>
ß
(fxcop:DoNotUseAutoDualClassInterfaceType˙
fxcop"DoNotUseAutoDualClassInterfaceType.CA1408: Do not use AutoDual ClassInterfaceType"MAJOR*cs2CA1408:â<h2>Cause</h2>
<p>
            A Component Object Model (COM) visible type is marked with the <code>ClassInterfaceAttribute</code> attribute set to the <code>AutoDual</code> value of <code>ClassInterfaceType</code>.
</p>
<h2>Rule Description</h2>
<p>
            Types that use a dual interface enable clients to bind to a specific interface layout. Any changes in a future version to the layout of the type or any base types will break COM clients that bind to the interface. By default, if the <code>ClassInterfaceAttribute</code> attribute is not specified, a dispatch-only interface is used.
            Unless marked otherwise, all public nongeneric types are visible to COM; all nonpublic and generic types are invisible to COM.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the value of the <code>ClassInterfaceAttribute</code> attribute to the <code>None</code> value of <code>ClassInterfaceType</code> and explicitly define the interface.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule unless it is certain that the layout of the type and its base types will not change in a future version.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AutoLayoutTypesShouldNotBeComVisible'>AutoLayoutTypesShouldNotBeComVisible</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkComSourceInterfacesAsIDispatch'>MarkComSourceInterfacesAsIDispatch</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182205.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182205.aspx</a></p>
™
'fxcop:DoNotPrefixEnumValuesWithTypeName˛
fxcop!DoNotPrefixEnumValuesWithTypeName0CA1712: Do not prefix enum values with type name"MAJOR*cs2CA1712:å<h2>Cause</h2>
<p>
            An enumeration contains a member whose name starts with the type name of the enumeration.
</p>
<h2>Rule Description</h2>
<p>
            Names of enumeration members are not prefixed with the type name because type information is expected to be provided by development tools.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required for to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the type name prefix from the enumeration member.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldNotHaveIncorrectSuffix'>IdentifiersShouldNotHaveIncorrectSuffix</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkEnumsWithFlags'>MarkEnumsWithFlags</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotMarkEnumsWithFlags'>DoNotMarkEnumsWithFlags</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182237.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182237.aspx</a></p>
À
fxcop:ExceptionsShouldBePublic®
fxcopExceptionsShouldBePublic#CA1064: Exceptions should be public"MAJOR*cs2CA1064:Ã<h2>Cause</h2>
<p>
            A non-public exception derives directly from <code>Exception</code>, <code>SystemException</code>, or <code>ApplicationException</code>.
</p>
<h2>Rule Description</h2>
<p>
            An internal exception is only visible inside its own internal scope. After the exception falls outside the internal scope, only the base exception can be used to catch the exception. If the internal exception is inherited from <code>Exception</code>, <code>SystemException</code>, or <code>ApplicationException</code>, the external code will not have sufficient information to know what to do with the exception.
            But, if the code has a public exception that later is used as the base for a internal exception, it is reasonable to assume the code further out will be able to do something intelligent with the base exception. The public exception will have more information than what is provided by T:System.Exception, T:System.SystemException, or T:System.ApplicationException.
</p>
<h2>How to Fix Violations</h2>
<p>
            Make the exception public, or derive the internal exception from a public exception that is not <code>Exception</code>, <code>SystemException</code>, or <code>ApplicationException</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a message from this rule if you are sure in all cases that the private exception will be caught within its own internal scope.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264484.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264484.aspx</a></p>
Ä	
fxcop:AvoidExcessiveInheritance‹
fxcopAvoidExcessiveInheritance#CA1501: Avoid excessive inheritance"MAJOR*cs2CA1501:ˇ<h2>Cause</h2>
<p>
            A type is more than four levels deep in its inheritance hierarchy.
</p>
<h2>Rule Description</h2>
<p>
            Deeply nested type hierarchies can be difficult to follow, understand, and maintain. This rule limits analysis to hierarchies in the same module.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, derive the type from a base type that is less deep in the inheritance hierarchy or eliminate some of the intermediate base types.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule. However, the code might be more difficult to maintain. Note that, depending on the visibility of base types, resolving violations of this rule might create breaking changes. For example, removing public base types is a breaking change.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182213.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182213.aspx</a></p>
Ï
+fxcop:IdentifiersShouldDifferByMoreThanCaseº
fxcop%IdentifiersShouldDifferByMoreThanCase3CA1708: Identifiers should differ by more than case"MAJOR*cs2CA1708:√<h2>Cause</h2>
<p>
            The names of two types, members, parameters, or fully qualified namespaces are identical when they are converted to lowercase.
</p>
<h2>Rule Description</h2>
<p>
            Identifiers for namespaces, types, members, and parameters cannot differ only by case because languages that target the common language runtime are not required to be case-sensitive. For example, Visual Basic is a widely used case-insensitive language.
            This rule fires on publicly visible members only.
</p>
<h2>How to Fix Violations</h2>
<p>
            Select a name that is unique when it is compared to other identifiers in a case-insensitive manner.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. The library might not be usable in all available languages in the .NET Framework.
</p>
<h2>Example of a Violation</h2>
<p>
            The following example demonstrates a violation of this rule.










            <pre>
using System;
namespace NamingLibrary
{
    public¬†class Class1	// IdentifiersShouldDifferByMoreThanCase
    {
        protected¬†string someProperty;

        public¬†string SomeProperty
        {
            get { return someProperty; }
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldBeCasedCorrectly'>IdentifiersShouldBeCasedCorrectly</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182242.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182242.aspx</a></p>
Ÿ
.fxcop:ComRegistrationMethodsShouldNotBeVisible¶
fxcop(ComRegistrationMethodsShouldNotBeVisible6CA1411: COM registration methods should not be visible"MAJOR*cs2CA1411:ß<h2>Cause</h2>
<p>
            A method that is marked with the <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> or the <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code> attribute is externally visible.
</p>
<h2>Rule Description</h2>
<p>
            When an assembly is registered with Component Object Model (COM), entries are added to the registry for each COM-visible type in the assembly. Methods that are marked with the <code>ComRegisterFunctionAttribute</code> and <code>ComUnregisterFunctionAttribute</code> attributes are called during the registration and unregistration processes, respectively, to run user code that is specific to the registration/unregistration of these types. This code should not be called outside these processes.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the accessibility of the method to <code>private</code> or <code>internal</code> (<code>Friend</code> in Visual Basic).
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:ComRegistrationMethodsShouldBeMatched'>ComRegistrationMethodsShouldBeMatched</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182201.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182201.aspx</a></p>
¿
!fxcop:UseLiteralsWhereAppropriateö
fxcopUseLiteralsWhereAppropriate&CA1802: Use Literals Where Appropriate"MAJOR*cs2CA1802:∏<h2>Cause</h2>
<p>
            A field is declared <code>static</code> and <code>readonly</code> (<code>Shared</code> and <code>ReadOnly</code> in Visual Basic), and is initialized with a value that is computable at compile time.
</p>
<h2>Rule Description</h2>
<p>
            The value of a <code>static</code> <code>readonly</code> field is computed at runtime when the static constructor for the declaring type is called. If the <code>static</code> <code>readonly</code> field is initialized when it is declared and a static constructor is not declared explicitly, the compiler emits a static constructor to initialize the field.
            The value of a <code>const</code> field is computed at compile time and stored in the metadata, which increases runtime performance when it is compared to a <code>static</code> <code>readonly</code> field.
            Because the value assigned to the targeted field is computable at compile time, change the declaration to a <code>const</code> field so that the value is computed at compile time instead of at runtime.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, replace the <code>static</code> and <code>readonly</code> modifiers with the <code>const</code> modifier.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule, or disable the rule, if performance is not of concern.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182280.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182280.aspx</a></p>
ç
"fxcop:ConstantsShouldBeTransparentÊ
fxcopConstantsShouldBeTransparent9CA2130: Security critical constants should be transparent"MAJOR*cs2CA2130:<h2>Cause</h2>
<p>
            A constant field or an enumeration member is marked with the <code>SecurityCriticalAttribute</code>.
</p>
<h2>Rule Description</h2>
<p>
            Transparency enforcement is not enforced for constant values because compilers inline constant values so that no lookup is required at run time. Constant fields should be security transparent so that code reviewers do not assume that transparent code cannot access the constant.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the SecurityCritical attribute from the field or value.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997446.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997446.aspx</a></p>
∆
@fxcop:TransparentMethodsMustNotHandleProcessCorruptingExceptionsÅ
fxcop:TransparentMethodsMustNotHandleProcessCorruptingExceptionsWCA2139: Transparent methods may not use the HandleProcessCorruptingExceptions attribute"MAJOR*cs2CA2139:œ
<h2>Cause</h2>
<p>
            A transparent method is marked with the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>
            This rule fires any method which is transparent and attempts to handle a process corrupting exception by using the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute. A process corrupting exception is a CLR version 4.0 exception classification of exceptions such <code>AccessViolationException</code>. The HandleProcessCorruptedStateExceptionsAttribute attribute may only be used by security critical methods, and will be ignored if it is applied to a transparent method. To handle process corrupting exceptions, this method must become security critical or security safe-critical.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute, or mark the method with the <code>SecurityCriticalAttribute</code> or the <code>SecuritySafeCriticalAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997565.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997565.aspx</a></p>
Ù
Efxcop:SecurityRuleSetLevel2MethodsShouldNotBeProtectedWithLinkDemands™
fxcop?SecurityRuleSetLevel2MethodsShouldNotBeProtectedWithLinkDemands9CA2135: Level 2 assemblies should not contain LinkDemands"MAJOR*cs2CA2135:ë<h2>Cause</h2>
<p>
            A class or class member is using a <code>LinkDemand</code> in an application that is using Level 2 security.
</p>
<h2>Rule Description</h2>
<p>
            LinkDemands are deprecated in the level 2 security rule set. Instead of using LinkDemands to enforce security at just-in-time (JIT) compilation time, mark the methods, types, and fields with the <code>SecurityCriticalAttribute</code> attribute.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the <code>LinkDemand</code> and mark the type or member with the <code>SecurityCriticalAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997569.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997569.aspx</a></p>
°
-fxcop:IdentifiersShouldNotHaveIncorrectPrefixÔ

fxcop'IdentifiersShouldNotHaveIncorrectPrefix4CA1722: Identifiers should not have incorrect prefix"MAJOR*cs2CA1722:Û	<h2>Cause</h2>
<p>
            An identifier has an incorrect prefix.
</p>
<h2>Rule Description</h2>
<p>
            By convention, only certain programming elements have names that begin with a specific prefix.
            Type names do not have a specific prefix and should not be prefixed with a 'C'. This rule reports violations for type names such as 'CMyClass' and does not report violations for type names such as 'Cache'.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Remove the prefix from the identifier.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldHaveCorrectPrefix'>IdentifiersShouldHaveCorrectPrefix</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182246.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182246.aspx</a></p>
à	
'fxcop:TypeNamesShouldNotMatchNamespaces‹
fxcop!TypeNamesShouldNotMatchNamespaces.CA1724: Type Names Should Not Match Namespaces"MAJOR*cs2CA1724:Ï<h2>Cause</h2>
<p>
            A type name matches a .NET Framework namespace names in a case-insensitive comparison.
</p>
<h2>Rule Description</h2>
<p>
            Type names should not match the names of namespaces that are defined in the .NET Framework class library. Violating this rule can reduce the usability of the library.
</p>
<h2>How to Fix Violations</h2>
<p>
            Select a type name that does not match the name of a .NET Framework class library namespace.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            For new development, no known scenarios occur where you must suppress a warning from this rule. Before you suppress the warning, carefully consider how the users of your library might be confused by the matching name. For shipping libraries, you might have to suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182257.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182257.aspx</a></p>
‘4
*fxcop:OperatorOverloadsHaveNamedAlternates•4
fxcop$OperatorOverloadsHaveNamedAlternates0CA2225: Operator overloads have named alternates"MAJOR*cs2CA2225:∞3<h2>Cause</h2>
<p>
            An operator overload was detected, and the expected named alternative method was not found.
</p>
<h2>Rule Description</h2>
<p>
            Operator overloading allows the use of symbols to represent computations for a type. For example, a type that overloads the plus symbol (+) for addition would typically have an alternative member named 'Add'. The named alternative member provides access to the same functionality as the operator, and is provided for developers who program in languages that do not support overloaded operators.
            This rule examines the operators listed in the following table.







                    C#


                    Visual Basic


                    C++


                    Alternate name




                    + (binary)


                    +


                    + (binary)


                    Add




                    +=


                    +=


                    +=


                    Add




                    &amp;


                    And


                    &amp;


                    BitwiseAnd




                    &amp;=


                    And=


                    &amp;=


                    BitwiseAnd




                    |


                    Or


                    |


                    BitwiseOr




                    |=


                    Or=


                    |=


                    BitwiseOr




                    --


                    N/A


                    --


                    Decrement




                    /


                    /


                    /


                    Divide




                    /=


                    /=


                    /=


                    Divide




                    ==


                    =


                    ==


                    Equals




                    ^


                    Xor


                    ^


                    Xor




                    ^=


                    Xor=


                    ^=


                    Xor




                    &gt;


                    &gt;


                    &gt;


                    Compare




                    &gt;=


                    &gt;=


                    &gt;=


                    Compare




                    ++


                    N/A


                    ++


                    Increment




                    !=


                    &lt;&gt;


                    !=


                    Equals




                    &lt;&lt;


                    &lt;&lt;


                    &lt;&lt;


                    LeftShift




                    &lt;&lt;=


                    &lt;&lt;=


                    &lt;&lt;=


                    LeftShift




                    &lt;


                    &lt;


                    &lt;


                    Compare




                    &lt;=


                    &lt;=


                    &lt;=


                    Compare




                    &amp;&amp;


                    N/A


                    &amp;&amp;


                    LogicalAnd




                    ||


                    N/A


                    ||


                    LogicalOr




                    !


                    N/A


                    !


                    LogicalNot




                    %


                    Mod


                    %


                    Mod or Remainder




                    %=


                    N/A


                    %=


                    Mod




                    * (binary)


                    *


                    *


                    Multiply




                    *=


                    N/A


                    *=


                    Multiply




                    ~


                    Not


                    ~


                    OnesComplement




                    &gt;&gt;


                    &gt;&gt;


                    &gt;&gt;


                    RightShift




                    &gt;&gt;=


                    N/A


                    &gt;&gt;=


                    RightShift




                    - (binary)


                    - (binary)


                    - (binary)


                    Subtract




                    -=


                    N/A


                    -=


                    Subtract




                    true


                    IsTrue


                    N/A


                    IsTrue (Property)




                    - (unary)


                    N/A


                    -


                    Negate




                    + (unary)


                    N/A


                    +


                    Plus




                    false


                    IsFalse


                    False


                    IsTrue (Property)




            N/A == Cannot be overloaded in the selected language.
            The rule also checks implicit and explicit cast operators in a type (SomeType) by checking for methods named ToSomeType and FromSomeType.
            In C#, when a binary operator is overloaded, the corresponding assignment operator, if any, is also implicitly overloaded.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement the alternative method for the operator; name it using the recommended alternative name.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule if you are implementing a shared library. Applications can ignore a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes'>DoNotOverloadOperatorEqualsOnReferenceTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorsShouldHaveSymmetricalOverloads'>OperatorsShouldHaveSymmetricalOverloads</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideEqualsOnOverloadingOperatorEquals'>OverrideEqualsOnOverloadingOperatorEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideGetHashCodeOnOverridingEquals'>OverrideGetHashCodeOnOverridingEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals'>OverloadOperatorEqualsOnOverridingValueTypeEquals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182355.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182355.aspx</a></p>
∑
fxcop:MarkMembersAsStaticô
fxcopMarkMembersAsStaticCA1822: Mark members as static"MAJOR*cs2CA1822:«<h2>Cause</h2>
<p>
            A member that does not access instance data is not marked as static (Shared in Visual Basic).
</p>
<h2>Rule Description</h2>
<p>
            Members that do not access instance data or call instance methods can be marked as static (Shared in Visual Basic). After you mark the methods as static, the compiler will emit nonvirtual call sites to these members. Emitting nonvirtual call sites will prevent a check at runtime for each call that makes sure that the current object pointer is non-null. This can achieve a measurable performance gain for performance-sensitive code. In some cases, the failure to access the current object instance represents a correctness issue.
</p>
<h2>How to Fix Violations</h2>
<p>
            Mark the member as static (or Shared in Visual Basic) or use 'this'/'Me' in the method body, if appropriate.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule for previously shipped code for which the fix would be a breaking change.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidUncalledPrivateCode'>AvoidUncalledPrivateCode</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidUninstantiatedInternalClasses'>AvoidUninstantiatedInternalClasses</a><br/>




                <a href='/coding_rules#rule_key=fxcop:RemoveUnusedLocals'>RemoveUnusedLocals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms245046.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms245046.aspx</a></p>
‰
'fxcop:IdentifiersShouldBeCasedCorrectly∏
fxcop!IdentifiersShouldBeCasedCorrectly-CA1709: Identifiers should be cased correctly"MAJOR*cs2CA1709:…<h2>Cause</h2>
<p>
            The name of an identifier is not cased correctly.
            - or -
            The name of an identifier contains a two-letter acronym and the second letter is lowercase.
            - or -
            The name of an identifier contains an acronym of three or more uppercase letters.
</p>
<h2>Rule Description</h2>
<p>
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
            By convention, parameter names use camel casing; namespace, type, and member names use Pascal casing. In a camel-cased name, the first letter is lowercase, and the first letter of any remaining words in the name is in uppercase. Examples of camel-cased names are "packetSniffer", "ioFile", and "fatalErrorCode". In a Pascal-cased name, the first letter is uppercase, and the first letter of any remaining words in the name is in uppercase. Examples of Pascal-cased names are "PacketSniffer", "IOFile", and "FatalErrorCode".
            This rule splits the name into words based on the casing and checks any two-letter words against a list of common two-letter words, such as "In" or "My". If a match is not found, the word is assumed to be an acronym. In addition, this rule assumes it has found an acronym when the name contains either four uppercase letters in a row or three uppercase letters in a row at the end of the name.
            By convention, two-letter acronyms use all uppercase letters, and acronyms of three or more characters use Pascal casing. The following examples use this naming convention: 'DB', 'CR', 'Cpa', and 'Ecma'. The following examples violate the convention: 'Io', 'XML', and 'DoD', and for nonparameter names, 'xp' and 'cpl'.
            'ID' is special-cased to cause a violation of this rule. 'Id' is not an acronym but is an abbreviation for 'identification'.
</p>
<h2>How to Fix Violations</h2>
<p>
            Change the name so that it is cased correctly.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress this warning if you have your own naming conventions, or if the identifier represents a proper name, for example, the name of a company or a technology.
            You can also add specific terms, abbreviations, and acronyms that to a code analysis custom dictionary. Terms specified in the custom dictionary will not cause violations of this rule. For more information, see How to: Customize the Code Analysis Dictionary
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldDifferByMoreThanCase'>IdentifiersShouldDifferByMoreThanCase</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182240.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182240.aspx</a></p>
ø$
fxcop:AvoidOutParameters¢$
fxcopAvoidOutParametersCA1021: Avoid out parameters"MAJOR*cs2CA1021:”#<h2>Cause</h2>
<p>
            A public or protected method in a public type has an <code>out</code> parameter.
</p>
<h2>Rule Description</h2>
<p>
            Passing types by reference (using <code>out</code> or <code>ref</code>) requires experience with pointers, understanding how value types and reference types differ, and handling methods with multiple return values. Also, the difference between <code>out</code> and <code>ref</code> parameters is not widely understood.
            When a reference type is passed "by reference," the method intends to use the parameter to return a different instance of the object. Passing a reference type by reference is also known as using a double pointer, pointer to a pointer, or double indirection. By using the default calling convention, which is pass "by value," a parameter that takes a reference type already receives a pointer to the object. The pointer, not the object to which it points, is passed by value. Pass by value means that the method cannot change the pointer to have it point to a new instance of the reference type. However, it can change the contents of the object to which it points. For most applications this is sufficient and yields the desired behavior.
            If a method must return a different instance, use the return value of the method to accomplish this. See the <code>System.String</code> class for a variety of methods that operate on strings and return a new instance of a string. When this model is used, the caller must decide whether the original object is preserved.
            Although return values are commonplace and heavily used, the correct application of <code>out</code> and <code>ref</code> parameters requires intermediate design and coding skills. Library architects who design for a general audience should not expect users to master working with <code>out</code> or <code>ref</code> parameters.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule that is caused by a value type, have the method return the object as its return value. If the method must return multiple values, redesign it to return a single instance of an object that holds the values.
            To fix a violation of this rule that is caused by a reference type, make sure that the desired behavior is to return a new instance of the reference. If it is, the method should use its return value to do this.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule. However, this design could cause usability issues.
</p>
<h2>Example</h2>

<h3>Description</h3>
<p>
                Methods that implement the Try&lt;Something&gt; pattern, such as Int32.TryParse, do not raise this violation. The following example shows a structure (value type) that implements the Int32.TryParse method.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    public¬†struct Point
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int axisX, int axisY)
        {
            _X = axisX;
            _Y = axisY;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†int GetHashCode()
        {
            return _X ^ _Y;
        }

        public¬†override¬†bool Equals(object obj)
        {
            if (!(obj is Point))
                return¬†false;

            return Equals((Point)obj);
        }

        public¬†bool Equals(Point other)
        {
            if (_X != other._X)
                return¬†false;

            return _Y == other._Y;
        }

        public¬†static¬†bool¬†operator ==(Point point1, Point point2)
        {
            return point1.Equals(point2);
        }

        public¬†static¬†bool¬†operator !=(Point point1, Point point2)
        {
            return !point1.Equals(point2);
        }

        // Does not violate this rule¬†
        public¬†static¬†bool TryParse(string¬†value, out Point result)
        {
            // TryParse Implementation
            result = new Point(0,0);
            return¬†false;
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotPassTypesByReference'>DoNotPassTypesByReference</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182131.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182131.aspx</a></p>
Õ
,fxcop:ImplementStandardExceptionConstructorsú
fxcop&ImplementStandardExceptionConstructors1CA1032: Implement standard exception constructors"MAJOR*cs2CA1032:§<h2>Cause</h2>
<p>
            A type extends <code>System.Exception</code> and does not declare all the required constructors.
</p>
<h2>Rule Description</h2>
<p>
            Exception types must implement the following constructors:
            <ul>
              <li>
                public NewException()
              </li>
              <li>
                public NewException(string)
              </li>
              <li>
                public NewException(string, Exception)
              </li>
              <li>
                protected or private NewException(SerializationInfo, StreamingContext)
              </li>
            </ul>
            Failure to provide the full set of constructors can make it difficult to correctly handle exceptions. For example, the constructor that has the signature NewException(string, Exception) is used to create exceptions that are caused by other exceptions. Without this constructor you cannot create and throw an instance of your custom exception that contains an inner (nested) exception, which is what managed code should do in such a situation. The first three exception constructors are public by convention. The fourth constructor is protected in unsealed classes, and private in sealed classes. For more information, see <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add the missing constructors to the exception, and make sure that they have the correct accessibility.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the violation is caused by using a different access level for the public constructors.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182151.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182151.aspx</a></p>
∏
fxcop:AvoidUnsealedAttributesñ
fxcopAvoidUnsealedAttributes!CA1813: Avoid unsealed attributes"MAJOR*cs2CA1813:Ω<h2>Cause</h2>
<p>
            A public type inherits from <code>System.Attribute</code>, is not abstract, and is not sealed (<code>NotInheritable</code> in Visual Basic).
</p>
<h2>Rule Description</h2>
<p>
            The .NET Framework class library provides methods for retrieving custom attributes. By default, these methods search the attribute inheritance hierarchy; for example <code>Attribute.GetCustomAttribute</code> searches for the specified attribute type, or any attribute type that extends the specified attribute type. Sealing the attribute eliminates the search through the inheritance hierarchy, and can improve performance.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, seal the attribute type or make it abstract.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule. You should do this only if you are defining an attribute hierarchy and cannot seal the attribute or make it abstract.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DefineAccessorsForAttributeArguments'>DefineAccessorsForAttributeArguments</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAttributesWithAttributeUsage'>MarkAttributesWithAttributeUsage</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182267.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182267.aspx</a></p>
ã
fxcop:ListsAreStronglyTypedÎ
fxcopListsAreStronglyTyped CA1039: Lists are strongly typed"MAJOR*cs2CA1039:ï<h2>Cause</h2>
<p>
            The public or protected type implements <code>System.Collections.IList</code> but does not provide a strongly typed method for one or more of the following:
            <ul>
              <li>
                IList.Item
              </li>
              <li>
                IList.Add
              </li>
              <li>
                IList.Contains
              </li>
              <li>
                IList.IndexOf
              </li>
              <li>
                IList.Insert
              </li>
              <li>
                IList.Remove
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            This rule requires <code>IList</code> implementations to provide strongly typed members so that users are not required to cast arguments to the <code>System.Object</code> type when they use the functionality that is provided by the interface. The <code>IList</code> interface is implemented by collections of objects that can be accessed by index. This rule assumes that the type that implements <code>IList</code> does this to manage a collection of instances of a type that is stronger than <code>Object</code>.


                <code>IList</code>
               implements the <code>System.Collections.ICollection</code> and <code>System.Collections.IEnumerable</code> interfaces. If you implement <code>IList</code>, you must provide the required strongly typed members for <code>ICollection</code>. If the objects in the collection extend <code>System.ValueType</code>, you must provide a strongly typed member for <code>GetEnumerator</code> to avoid the decrease in performance that is caused by boxing; this is not required when the objects of the collection are a reference type.
            To comply with this rule, implement the interface members explicitly by using names in the form InterfaceName.InterfaceMemberName, such as <code>Add</code>. The explicit interface members use the data types that are declared by the interface. Implement the strongly typed members by using the interface member name, such as Add. Declare the strongly typed members as public, and declare parameters and return values to be of the strong type that is managed by the collection. The strong types replace weaker types such as <code>Object</code> and <code>Array</code> that are declared by the interface.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, explicitly implement <code>IList</code> members and provide strongly typed alternatives for the members that were noted previously. For code that correctly implements the <code>IList</code> interface and provides the required strongly typed members, see the following example.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule when you implement a new object-based collection, such as a linked list, where types that extend the new collection determine the strong type. These types should comply with this rule and expose strongly typed members.
</p>
<h2>Example</h2>
<p>


                <code>CA1035: ICollection implementations have strongly typed members</code>




                <a href='/coding_rules#rule_key=fxcop:EnumeratorsShouldBeStronglyTyped'>EnumeratorsShouldBeStronglyTyped</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182154.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182154.aspx</a></p>
ä

 fxcop:AvoidDuplicateAcceleratorsÂ	
fxcopAvoidDuplicateAccelerators$CA1301: Avoid duplicate accelerators"MAJOR*cs2CA1301:Ü	<h2>Cause</h2>
<p>
            A type extends <code>System.Windows.Forms.Control</code> and contains two or more top level controls that have identical access keys that are stored in a resource file.
</p>
<h2>Rule Description</h2>
<p>
            An access key, also known as an accelerator, enables keyboard access to a control by using the ALT key. When multiple controls have duplicate access keys, the behavior of the access key is not well defined. The user might not be able to access the intended control by using the access key and a control other than the one that is intended might be enabled.
            The current implementation of this rule ignores menu items. However, menu items in the same submenu should not have identical access keys.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, define unique access keys for all controls.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182185.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182185.aspx</a></p>
Ù#
*fxcop:AssembliesShouldHaveValidStrongNames≈#
fxcop$AssembliesShouldHaveValidStrongNames1CA2210: Assemblies should have valid strong names"MAJOR*cs2CA2210:œ"<h2>Cause</h2>
<p>
            An assembly is not signed with a strong name, the strong name could not be verified, or the strong name would not be valid without the current registry settings of the computer.
</p>
<h2>Rule Description</h2>
<p>
            This rule retrieves and verifies the strong name of an assembly. A violation occurs if any of the following are true:
            <ul>
              <li>
                The assembly does not have a strong name.
              </li>
              <li>
                The assembly was altered after signing.
              </li>
              <li>
                The assembly is delay-signed.
              </li>
              <li>
                The assembly was incorrectly signed, or signing failed.
              </li>
              <li>
                The assembly requires registry settings to pass verification. For example, the Strong Name tool (Sn.exe) was used to skip verification for the assembly.
              </li>
            </ul>
            The strong name protects clients from unknowingly loading an assembly that has been tampered with. Assemblies without strong names should not be deployed outside very limited scenarios. If you share or distribute assemblies that are not correctly signed, the assembly can be tampered with, the common language runtime might not load the assembly, or the user might have to disable verification on his or her computer. An assembly without a strong name has from the following drawbacks:
            <ul>
              <li>
                Its origins cannot be verified.
              </li>
              <li>
                The common language runtime cannot warn users if the contents of the assembly have been altered.
              </li>
              <li>
                It cannot be loaded into the global assembly cache.
              </li>
            </ul>
            Note that to load and analyze a delay-signed assembly, you must disable verification for the assembly.
</p>
<h2>How to Fix Violations</h2>
<p>

              To create a key file
            Use one of the following procedures:
            <ul>
              <li>
                Use the Assembly Linker tool (Al.exe) provided by the .NET Framework SDK.
              </li>
              <li>
                For the .NET Framework v1.0 or v1.1, use either the <code>System.Reflection.AssemblyKeyFileAttribute</code> or <code>System.Reflection.AssemblyKeyNameAttribute</code> attribute.
              </li>
              <li>
                For the .NET Framework¬†2.0, use either the /keyfile or /keycontainer compiler option /KEYFILE (Specify Key or Key Pair to Sign an Assembly) or <code>/KEYCONTAINER (Specify a Key Container to Sign an Assembly)</code> linker option in C++).
              </li>
            </ul>

              To sign your assembly with a strong name in Visual Studio


              <li>
                In Visual Studio, open your solution.
              </li>
              <li>
                In Solution Explorer, right-click your project and then click Properties.
              </li>
              <li>
                Click the Signing tab, and select the Sign the assembly check box.
              </li>
              <li>
                From Choose a strong name key file, select New.
                The Create Strong Name Key window will display.
              </li>
              <li>
                In Key file name, type a name for your strong name key.
              </li>
              <li>
                Choose whether to protect the key with a password, and then click OK.
              </li>
              <li>
                In Solution Explorer, right-click your project and then click Build.
              </li>





              To sign your assembly with a strong name outside Visual Studio

            <ul>
              <li>
                Use the strong name tool (Sn.exe) that is provided by the .NET Framework SDK. For more information, see Sn.exe (Strong Name Tool).
              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Only suppress a warning from this rule if the assembly is used in an environment where tampering with the contents is not a concern.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182127.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182127.aspx</a></p>
«
+fxcop:ComRegistrationMethodsShouldBeMatchedó
fxcop%ComRegistrationMethodsShouldBeMatched2CA1410: COM registration methods should be matched"MAJOR*cs2CA1410:ü<h2>Cause</h2>
<p>
            A type declares a method that is marked with the <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> attribute but does not declare a method that is marked with the <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code> attribute, or vice versa.
</p>
<h2>Rule Description</h2>
<p>
            For Component Object Model (COM) clients to create a .NET Framework type, the type must first be registered. If it is available, a method that is marked with the <code>ComRegisterFunctionAttribute</code> attribute is called during the registration process to run user-specified code. A corresponding method that is marked with the <code>ComUnregisterFunctionAttribute</code> attribute is called during the unregistration process to reverse the operations of the registration method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add the corresponding registration or unregistration method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:ComRegistrationMethodsShouldNotBeVisible'>ComRegistrationMethodsShouldNotBeVisible</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182200.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182200.aspx</a></p>
¯
(fxcop:AvoidUninstantiatedInternalClassesÀ
fxcop"AvoidUninstantiatedInternalClasses-CA1812: Avoid uninstantiated internal classes"MAJOR*cs2CA1812:€<h2>Cause</h2>
<p>
            An instance of an assembly-level type is not created by code in the assembly.
</p>
<h2>Rule Description</h2>
<p>
            This rule tries to locate a call to one of the constructors of the type, and reports a violation if no call is found.
            The following types are not examined by this rule:
            <ul>
              <li>
                Value types
              </li>
              <li>
                Abstract types
              </li>
              <li>
                Enumerations
              </li>
              <li>
                Delegates
              </li>
              <li>
                Compiler-emitted array types
              </li>
              <li>
                Types that cannot be instantiated and that define <code>static</code> (<code>Shared</code> in Visual Basic) methods only.
              </li>
            </ul>
            If you apply <code>System.Runtime.CompilerServices.InternalsVisibleToAttribute</code> to the assembly that is being analyzed, this rule will not occur on any constructors that are marked as <code>internal</code> because you cannot tell whether a field is being used by another <code>friend</code> assembly.
            Even though you cannot work around this limitation in Visual Studio Code Analysis, the external stand-alone FxCop will occur on internal constructors if every <code>friend</code> assembly is present in the analysis.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the type or add the code that uses it. If the type contains only static methods, add one of the following to the type to prevent the compiler from emitting a default public instance constructor:
            <ul>
              <li>
                A private constructor for types that target .NET Framework versions 1.0 and 1.1.
              </li>
              <li>
                The <code>static</code> (<code>Shared</code> in Visual Basic) modifier for types that target .NET Framework¬†2.0.
              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule. We recommend that you suppress this warning in the following situations:
            <ul>
              <li>
                The class is created through late-bound reflection methods such as CreateInstance.
              </li>
              <li>
                The class is created automatically by the runtime or ASP.NET.¬†For example, classes that implement <code>System.Configuration.IConfigurationSectionHandler</code> or <code>System.Web.IHttpHandler</code>.
              </li>
              <li>
                The class is passed as a generic type parameter that has a new constraint. For example, the following example will raise this rule.









            <pre>
internal class MyClass
{
¬†¬†¬†¬†public DoSomething()
¬†¬†¬†¬†{
¬†¬†¬†¬†}
}
public class MyGeneric&lt;T&gt; where T : new()
{
¬†¬†¬†¬†public T Create()
¬†¬†¬†¬†{
¬†¬†¬†¬†¬†¬†¬†¬†return new T();
¬†¬†¬†¬†}
}
// [...]
MyGeneric&lt;MyClass&gt; mc = new MyGeneric&lt;MyClass&gt;();
mc.Create();
</pre>




</li>
            </ul>
            In these situations, we recommended you suppress this warning.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidUncalledPrivateCode'>AvoidUncalledPrivateCode</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ReviewUnusedParameters'>ReviewUnusedParameters</a><br/>




                <a href='/coding_rules#rule_key=fxcop:RemoveUnusedLocals'>RemoveUnusedLocals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182265.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182265.aspx</a></p>
†

fxcop:SpecifyMessageBoxOptions˝	
fxcopSpecifyMessageBoxOptions!CA1300: Specify MessageBoxOptions"MAJOR*cs2CA1300:£	<h2>Cause</h2>
<p>
            A method calls an overload of the <code>MessageBox.Show</code> method that does not take a <code>System.Windows.Forms.MessageBoxOptions</code> argument.
</p>
<h2>Rule Description</h2>
<p>
            To display a message box correctly for cultures that use a right-to-left reading order, the <code>RightAlign</code> and <code>RtlReading</code> members of the <code>MessageBoxOptions</code> enumeration must be passed to the <code>Show</code> method. Examine the <code>Control.RightToLeft</code> property of the containing control to determine whether to use a right-to-left reading order.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call an overload of the <code>Show</code> method that takes a <code>MessageBoxOptions</code> argument.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the code library will not be localized for a culture that uses a right-to-left reading order.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182191.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182191.aspx</a></p>
Ù
,fxcop:ImplementSerializationMethodsCorrectly√
fxcop&ImplementSerializationMethodsCorrectly1CA2238: Implement serialization methods correctly"MAJOR*cs2CA2238:À<h2>Cause</h2>
<p>
            A method that handles a serialization event does not have the correct signature, return type, or visibility.
</p>
<h2>Rule Description</h2>
<p>
            A method is designated a serialization event handler by applying one of the following serialization event attributes:
            <ul>
              <li>


                    <code>System.Runtime.Serialization.OnSerializingAttribute</code>


              </li>
              <li>


                    <code>System.Runtime.Serialization.OnSerializedAttribute</code>


              </li>
              <li>


                    <code>System.Runtime.Serialization.OnDeserializingAttribute</code>


              </li>
              <li>


                    <code>System.Runtime.Serialization.OnDeserializedAttribute</code>


              </li>
            </ul>
            Serialization event handlers take a single parameter of type <code>System.Runtime.Serialization.StreamingContext</code>, return <code>void</code>, and have <code>private</code> visibility.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, correct the signature, return type, or visibility of the serialization event handler.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallBaseClassMethodsOnISerializableTypes'>CallBaseClassMethodsOnISerializableTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementISerializableCorrectly'>ImplementISerializableCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAllNonSerializableFields'>MarkAllNonSerializableFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkISerializableTypesWithSerializable'>MarkISerializableTypesWithSerializable</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ProvideDeserializationMethodsForOptionalFields'>ProvideDeserializationMethodsForOptionalFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SecureSerializationConstructors'>SecureSerializationConstructors</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182344.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182344.aspx</a></p>
Ê	
6fxcop:CriticalTypesMustNotParticipateInTypeEquivalence´	
fxcop0CriticalTypesMustNotParticipateInTypeEquivalenceGCA2131: Security critical types may not participate in type equivalence"MAJOR*cs2CA2131:ì<h2>Cause</h2>
<p>
            A type participates in type equivalence and a either the type itself, or a member or field of the type, is marked with the <code>SecurityCriticalAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>
            This rule fires on any critical types or types that contain critical methods or fields that are participating in type equivalence. When the CLR detects such a type, it fails to load it with a <code>TypeLoadException</code> at run time. Typically, this rule fires only when users implement type equivalence manually rather than by relying on tlbimp and the compilers to do the type equivalence.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the SecurityCritical attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997564.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997564.aspx</a></p>
ä
fxcop:DoNotCastUnnecessarilyÈ
fxcopDoNotCastUnnecessarily!CA1800: Do not cast unnecessarily"MAJOR*cs2CA1800:ë<h2>Cause</h2>
<p>
            A method performs duplicate casts on one of its arguments or local variables. For complete analysis by this rule, the tested assembly must be built by using debugging information and the associated program database (.pdb) file must be available.
</p>
<h2>Rule Description</h2>
<p>
            Duplicate casts decrease performance, especially when the casts are performed in compact iteration statements. For explicit duplicate cast operations, store the result of the cast in a local variable and use the local variable instead of the duplicate cast operations.
            If the C# <code>is</code> operator is used to test whether the cast will succeed before the actual cast is performed, consider testing the result of the <code>as</code> operator instead. This provides the same functionality without the implicit cast operation that is performed by the <code>is</code> operator.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, modify the method implementation to minimize the number of cast operations.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule, or to ignore the rule completely, if performance is not a concern.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182271.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182271.aspx</a></p>
˛
#fxcop:PInvokeEntryPointsShouldExist÷
fxcopPInvokeEntryPointsShouldExist*CA1400: P/Invoke entry points should exist"MAJOR*cs2CA1400:Ó<h2>Cause</h2>
<p>
            A public or protected method is marked with the <code>System.Runtime.InteropServices.DllImportAttribute</code>. Either the unmanaged library could not be located or the method could not be matched to a function in the library. If the rule cannot find the method name exactly as it is specified, it looks for ANSI or wide-character versions of the method by suffixing the method name with 'A' or 'W'. If no match is found, the rule attempts to locate a function by using the __stdcall name format (_MyMethod@12, where 12 represents the length of the arguments). If no match is found, and the method name starts with '#', the rule searches for the function as an ordinal reference instead of a name reference.
</p>
<h2>Rule Description</h2>
<p>
            No compile-time check is available to make sure that methods that are marked with <code>DllImportAttribute</code> are located in the referenced unmanaged DLL. If no function that has the specified name is  in the library, or the arguments to the method do not match the function arguments, the common language runtime throws an exception.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, correct the method that has the <code>DllImportAttribute</code> attribute. Make sure that the unmanaged library exists and is in the same directory as the assembly that contains the method. If the library is present and correctly referenced, verify that the method name, return type, and argument signature match the library function.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule when the unmanaged library is in the same directory as the managed assembly that references it. It might be safe to suppress a warning from this rule in the case where the unmanaged library could not be located.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182208.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182208.aspx</a></p>
ä
.fxcop:TransparencyAnnotationsShouldNotConflict◊

fxcop(TransparencyAnnotationsShouldNotConflictDCA2136: Members should not have conflicting transparency annotations"MAJOR*cs2CA2136: 	<h2>Cause</h2>
<p>
            This rule fires when a type member is marked with a <code>System.Security</code> security attribute that has a different transparency than the security attribute of a container of the member.
</p>
<h2>Rule Description</h2>
<p>
            Transparency attributes are applied from code elements of larger scope to elements of smaller scope. The transparency attributes of code elements with larger scope take precedence over transparency attributes of code elements that are contained in the first element. For example, a class that is marked with the <code>SecurityCriticalAttribute</code> attribute cannot contain a method that is marked with the <code>SecuritySafeCriticalAttribute</code> attribute.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix this violation, remove the security attribute from the code element that has lower scope, or change its attribute to be the same as the containing code element.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress warnings from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264493.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264493.aspx</a></p>
∞
/fxcop:InitializeReferenceTypeStaticFieldsInline¸
fxcop)InitializeReferenceTypeStaticFieldsInline6CA1810: Initialize reference type static fields inline"MAJOR*cs2CA1810:¸<h2>Cause</h2>
<p>
            A reference type declares an explicit static constructor.
</p>
<h2>Rule Description</h2>
<p>
            When a type declares an explicit static constructor, the just-in-time (JIT) compiler adds a check to each static method and instance constructor of the type to make sure that the static constructor was previously called. Static initialization is triggered when any static member is accessed or when an instance of the type is created. However, static initialization is not triggered if you declare a variable of the type but do not use it, which can be important if the initialization changes global state.
            When all static data is initialized inline and an explicit static constructor is not declared, Microsoft intermediate language (MSIL) compilers add the <code>beforefieldinit</code> flag and an implicit static constructor, which initializes the static data, to the MSIL type definition. When the JIT compiler encounters the <code>beforefieldinit</code> flag, most of the time the static constructor checks are not added. Static initialization is guaranteed to occur at some time before any static fields are accessed but not before a static method or instance constructor is invoked. Note that static initialization can occur at any time after a variable of the type is declared.
            Static constructor checks can decrease performance. Often a static constructor is used only to initialize static fields, in which case you must only make sure that static initialization occurs before the first access of a static field. The <code>beforefieldinit</code> behavior is appropriate for these and most other types. It is only inappropriate when static initialization affects global state and one of the following is true:
            <ul>
              <li>
                The effect on global state is expensive and is not required if the type is not used.
              </li>
              <li>
                The global state effects can be accessed without accessing any static fields of the type.
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, initialize all static data when it is declared and remove the static constructor.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if performance is not a concern; or if global state changes that are caused by static initialization are expensive or must be guaranteed to occur before a static method of the type is called or an instance of the type is created.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:InitializeValueTypeStaticFieldsInline'>InitializeValueTypeStaticFieldsInline</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182275.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182275.aspx</a></p>
å
)fxcop:CompoundWordsShouldBeCasedCorrectlyﬁ
fxcop#CompoundWordsShouldBeCasedCorrectly0CA1702: Compound words should be cased correctly"MAJOR*cs2CA1702:Í<h2>Cause</h2>
<p>
            The name of an identifier contains multiple words and at least one of the words appears to be a compound word that is not cased correctly.
</p>
<h2>Rule Description</h2>
<p>
            The name of the identifier is split into words that are based on the casing. Each contiguous two-word combination is checked by the Microsoft spelling checker library. If it is recognized, the identifier produces a violation of the rule. Examples of compound words that cause a violation are "CheckSum" and "MultiPart", which should be cased as "Checksum" and "Multipart", respectively. Due to previous common usage, several exceptions are built into the rule, and several single words are flagged, such as "Toolbar" and "Filename", that should be cased as two distinct words (in this case, "ToolBar" and "FileName").
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Change the name so that it is cased correctly.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if both parts of the compound word are recognized by the spelling dictionary and the intent is to use two words.
</p>
<h2>Related Rules</h2>
<p>


                CA1701: Resource string compound words should be cased correctly




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldBeCasedCorrectly'>IdentifiersShouldBeCasedCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldDifferByMoreThanCase'>IdentifiersShouldDifferByMoreThanCase</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264474.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264474.aspx</a></p>
Ä
fxcop:DoNotPassTypesByReference‹
fxcopDoNotPassTypesByReference&CA1045: Do not pass types by reference"MAJOR*cs2CA1045:¸<h2>Cause</h2>
<p>
            A public or protected method in a public type has a <code>ref</code> parameter that takes a primitive type, a reference type, or a value type that is not one of the built-in types.
</p>
<h2>Rule Description</h2>
<p>
            Passing types by reference (using <code>out</code> or <code>ref</code>) requires experience with pointers, understanding how value types and reference types differ, and handling methods that have multiple return values. Also, the difference between <code>out</code> and <code>ref</code> parameters is not widely understood.
            When a reference type is passed "by reference," the method intends to use the parameter to return a different instance of the object. (Passing a reference type by reference is also known as using a double pointer, pointer to a pointer, or double indirection.) Using the default calling convention, which is pass "by value," a parameter that takes a reference type already receives a pointer to the object. The pointer, not the object to which it points, is passed by value. Passing by value means that the method cannot change the pointer to have it point to a new instance of the reference type, but can change the contents of the object to which it points. For most applications this is sufficient and yields the behavior that you want.
            If a method must return a different instance, use the return value of the method to accomplish this. See the <code>System.String</code> class for a variety of methods that operate on strings and return a new instance of a string. By using this model, it is left to the caller to decide whether the original object is preserved.
            Although return values are commonplace and heavily used, the correct application of <code>out</code> and <code>ref</code> parameters requires intermediate design and coding skills. Library architects who design for a general audience should not expect users to master working with <code>out</code> or <code>ref</code> parameters.





                    Note




                    When you work with parameters that are large structures, the additional resources that are required to copy these structures could cause a performance effect when you pass by value. In these cases, you might consider using <code>ref</code> or <code>out</code> parameters.




</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule that is caused by a value type, have the method return the object as its return value. If the method must return multiple values, redesign it to return a single instance of an object that holds the values.
            To fix a violation of this rule that is caused by a reference type, make sure that the behavior that you want is to return a new instance of the reference. If it is, the method should use its return value to do this.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule; however, this design could cause usability issues.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidOutParameters'>AvoidOutParameters</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182146.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182146.aspx</a></p>
ﬂ
fxcop:AvoidEmptyInterfaces¿
fxcopAvoidEmptyInterfacesCA1040: Avoid empty interfaces"MAJOR*cs2CA1040:Ì<h2>Cause</h2>
<p>
            The interface does not declare any members or implement two or more other interfaces.
</p>
<h2>Rule Description</h2>
<p>
            Interfaces define members that provide a behavior or usage contract. The functionality that is described by the interface can be adopted by any type, regardless of where the type appears in the inheritance hierarchy. A type implements an interface by providing implementations for the members of the interface. An empty interface does not define any members. Therefore, it does not define a contract that can be implemented.
            If your design includes empty interfaces that types are expected to implement, you are probably using an interface as a marker or a way to identify a group of types. If this identification will occur at run time, the correct way to accomplish this is to use a custom attribute. Use the presence or absence of the attribute, or the properties of the attribute, to identify the target types. If the identification must occur at compile time, then it is acceptable to use an empty interface.
</p>
<h2>How to Fix Violations</h2>
<p>
            Remove the interface or add members to it. If the empty interface is being used to label a set of types, replace the interface with a custom attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the interface is used to identify a set of types at compile time.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182128.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182128.aspx</a></p>
¸
fxcop:TestForNaNCorrectlyﬁ
fxcopTestForNaNCorrectlyCA2242: Test for NaN correctly"MAJOR*cs2CA2242:å<h2>Cause</h2>
<p>
            An expression tests a value against <code>Single.Nan</code> or <code>Double.Nan</code>.
</p>
<h2>Rule Description</h2>
<p>


                <code>Double.NaN</code>
              , which represents not-a-number, results when an arithmetic operation is undefined. Any expression that tests equality between a value and <code>Double.NaN</code> always returns <code>false</code>. Any expression that tests inequality between a value and <code>Double.NaN</code> always returns <code>true</code>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule and accurately determine whether a value represents <code>Double.NaN</code>, use <code>Single.IsNan</code> or <code>Double.IsNan</code> to test the value.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264491.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264491.aspx</a></p>
ƒ
fxcop:CustomRuleTemplateß
fxcopCustomRuleTemplateTemplate for custom FxCop rules"MAJOR*cs:€<p>
Follow these steps to make your custom FxCop rules available in SonarQube:
</p>

<ol>
  <li>Place your custom FxCop rules assemblies in the "Rules" subdirectory of your FxCop installation directory.</li>
  <li>For each custom rule:</li>
  <ol>
    <li>Create a new rule in SonarQube by "copying" this rule template and specify the <code>CheckId</code> of your custom rule, a title, a description, and a default severity.</li>
    <li>Enable the newly created rule in your quality profile</li>
  </ol>
  <li>Relaunch an analysis on your projects, et voil√†, your custom rules are executed!</li>
</ol>@
≠	
-fxcop:MembersShouldDifferByMoreThanReturnType˚
fxcop'MembersShouldDifferByMoreThanReturnType6CA2223: Members should differ by more than return type"MAJOR*cs2CA2223:˝<h2>Cause</h2>
<p>
            Two public or protected members have signatures that are identical except for return type.
</p>
<h2>Rule Description</h2>
<p>
            Although the common language runtime permits the use of return types to differentiate between otherwise identical members, this feature is not in the Common Language Specification, nor is it a common feature of .NET programming languages. When members differ only by return type, developers and development tools might not correctly distinguish between them.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the design of the members so that they are unique based only on their names and parameter types, or do not expose the members.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182352.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182352.aspx</a></p>
º
0fxcop:DoNotUseTimersThatPreventPowerStateChangesá
fxcop*DoNotUseTimersThatPreventPowerStateChanges:CA1601: Do not use timers that prevent power state changes"MAJOR*cs2CA1601:Ç<h2>Cause</h2>
<p>
            A timer has an interval set to occur more than one time per second.
</p>
<h2>Rule Description</h2>
<p>
            Do not poll more often than one time per second or use timers that occur more frequently than one time per second. Higher-frequency periodic activity will keep the CPU busy and interfere with power-saving idle timers that turn off the display and hard disks.
</p>
<h2>How to Fix Violations</h2>
<p>
            Set timer intervals to occur less than one time per second.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            This rule should be suppressed only if firing the timer more than one time per second is required and mobility considerations can safely be ignored.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182230.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182230.aspx</a></p>
Á
&fxcop:ValidateArgumentsOfPublicMethodsº
fxcop ValidateArgumentsOfPublicMethods,CA1062: Validate arguments of public methods"MAJOR*cs2CA1062:œ
<h2>Cause</h2>
<p>
            An externally visible method dereferences one of its reference arguments without verifying whether that argument is <code>null</code> (<code>Nothing</code> in Visual Basic).
</p>
<h2>Rule Description</h2>
<p>
            All reference arguments that are passed to externally visible methods should be checked against <code>null</code>. If appropriate, throw a <code>ArgumentNullException</code> when the argument is <code>null</code>.
            If a method can be called from an unknown assembly because it is declared public or protected, you should validate all parameters of the method. If the method is designed to be called only by known assemblies, you should make the method internal and apply the <code>InternalsVisibleToAttribute</code>  attribute to the assembly that contains the method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, validate each reference argument against <code>null</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
             You can suppress a warning from this rule if you are sure that the dereferenced parameter has been validated by another method call in the function.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182182.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182182.aspx</a></p>
ˇ
%fxcop:DoNotCatchGeneralExceptionTypes’
fxcopDoNotCatchGeneralExceptionTypes,CA1031: Do not catch general exception types"MAJOR*cs2CA1031:È<h2>Cause</h2>
<p>
            A general exception such as <code>System.Exception</code> or <code>System.SystemException</code> is caught in a <code>catch</code> statement, or a general catch clause such as catch() is used.
</p>
<h2>Rule Description</h2>
<p>
            General exceptions should not be caught.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, catch a more specific exception, or rethrow the general exception as the last statement in the <code>catch</code> block.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Catching general exception types can hide run-time problems from the library user and can make debugging more difficult.





                    Note




                    Starting with the .NET Framework¬†4, the common language runtime (CLR) no longer delivers corrupted state exceptions that occur in the operating system and managed code, such as access violations in Windows, to be handled by managed code.¬†If you want to compile an application in the .NET Framework¬†4¬†or later versions and maintain handling of corrupted state exceptions, you can apply the <code>HandleProcessCorruptedStateExceptionsAttribute</code> attribute to the method that handles the corrupted state exception.




</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:RethrowToPreserveStackDetails'>RethrowToPreserveStackDetails</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182137.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182137.aspx</a></p>
ˆ
.fxcop:CallBaseClassMethodsOnISerializableTypes√
fxcop(CallBaseClassMethodsOnISerializableTypes6CA2236: Call base class methods on ISerializable types"MAJOR*cs2CA2236:ƒ<h2>Cause</h2>
<p>
            A type derives from a type that implements the <code>System.Runtime.Serialization.ISerializable</code> interface, and one of the following conditions is true:
            <ul>
              <li>
                The type implements the serialization constructor, that is, a constructor with the <code>System.Runtime.Serialization.SerializationInfo</code>, <code>System.Runtime.Serialization.StreamingContext</code> parameter signature, but does not call the serialization constructor of the base type.
              </li>
              <li>
                The type implements the <code>ISerializable.GetObjectData</code> method but does not call the <code>GetObjectData</code> method of the base type.
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            In a custom serialization process, a type implements the <code>GetObjectData</code> method to serialize its fields and the serialization constructor to de-serialize the fields. If the type derives from a type that implements the <code>ISerializable</code> interface, the base type <code>GetObjectData</code> method and serialization constructor should be called to serialize/de-serialize the fields of the base type. Otherwise, the type will not be serialized and de-serialized correctly. Note that if the derived type does not add any new fields, the type does not need to implement the <code>GetObjectData</code> method nor the serialization constructor or call the base type equivalents.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call the base type <code>GetObjectData</code> method or serialization constructor from the corresponding derived type method or constructor.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:ImplementISerializableCorrectly'>ImplementISerializableCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationMethodsCorrectly'>ImplementSerializationMethodsCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAllNonSerializableFields'>MarkAllNonSerializableFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkISerializableTypesWithSerializable'>MarkISerializableTypesWithSerializable</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ProvideDeserializationMethodsForOptionalFields'>ProvideDeserializationMethodsForOptionalFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SecureSerializationConstructors'>SecureSerializationConstructors</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182326.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182326.aspx</a></p>
Ô$
%fxcop:PropertiesShouldNotReturnArrays≈$
fxcopPropertiesShouldNotReturnArrays+CA1819: Properties should not return arrays"MAJOR*cs2CA1819:⁄#<h2>Cause</h2>
<p>
            A public or protected property in a public type returns an array.
</p>
<h2>Rule Description</h2>
<p>
            Arrays returned by properties are not write-protected, even if the property is read-only. To keep the array tamper-proof, the property must return a copy of the array. Typically, users will not understand the adverse performance implications of calling such a property. Specifically, they might use the property as an indexed property.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, either make the property a method or change the property to return a collection.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Attributes can contain properties that return arrays, but cannot contain properties that return collections. You can suppress a warning that is raised for a property of an attribute that is derived from the [System.Attribute] class. Otherwise, do not suppress a warning from this rule.
</p>
<h2>Example Violation</h2>

<h3>Description</h3>
<p>
                The following example shows a property that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace PerformanceLibrary
{
    public¬†class Book
    {
        private¬†string[] _Pages;

        public Book(string[] pages)
        {
            _Pages = pages;
        }

        public¬†string[] Pages
        {
            get { return _Pages; }
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                To fix a violation of this rule, either make the property a method or change the property to return a collection instead of an array.
</p>
<h2>Change the Property to a Method Example</h2>

<h3>Description</h3>
<p>
                The following example fixes the violation by changing the property to a method.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace PerformanceLibrary
{
    public¬†class Book
    {
        private¬†string[] _Pages;

        public Book(string[] pages)
        {
            _Pages = pages;
        }

        public¬†string[] GetPages()
        {
            // Need to return a clone of the array so that consumers            ¬†
            // of this library cannot change its contents            ¬†
            return (string[])_Pages.Clone();
        }
    }
}
</pre>





</p>
<h2>Return a Collection Example</h2>

<h3>Description</h3>
<p>
                The following example fixes the violation by changing the property to return a

                  ReadOnlyCollection.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Collections.ObjectModel;

namespace PerformanceLibrary
{
    public¬†class Book
    {
        private ReadOnlyCollection&lt;string&gt; _Pages;
        public Book(string[] pages)
        {
            _Pages = new ReadOnlyCollection&lt;string&gt;(pages);
        }

        public ReadOnlyCollection&lt;string&gt; Pages
        {
            get { return _Pages; }
        }
    }
}
</pre>





</p>
<h2>Allowing Users to Modify a Property</h2>

<h3>Description</h3>
<p>
                You might want to allow the consumer of the class to modify a property. The following example shows a read/write property that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace PerformanceLibrary
{
    public¬†class Book
    {
        private¬†string[] _Pages;

        public Book(string[] pages)
        {
            _Pages = pages;
        }

        public¬†string[] Pages
        {
            get { return _Pages; }
            set { _Pages = value; }
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                The following example fixes the violation by changing the property to return a Collection.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Collections.ObjectModel;

namespace PerformanceLibrary
{
    public¬†class Book
    {
        private Collection&lt;string&gt; _Pages;

        public Book(string[] pages)
        {
            _Pages = new Collection&lt;string&gt;(pages);
        }

        public Collection&lt;string&gt; Pages
        {
            get { return _Pages; }
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:UsePropertiesWhereAppropriate'>UsePropertiesWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/0fss9skc.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/0fss9skc.aspx</a></p>
ä
.fxcop:TypeLinkDemandsRequireInheritanceDemands◊
fxcop(TypeLinkDemandsRequireInheritanceDemands5CA2126: Type link demands require inheritance demands"MAJOR*cs2CA2126:Ÿ<h2>Cause</h2>
<p>
            A public unsealed type is protected with a link demand, has an overridable method, and neither the type nor the method is protected with an inheritance demand.
</p>
<h2>Rule Description</h2>
<p>
            A link demand on a method or its declaring type requires the immediate caller of the method to have the specified permission. An inheritance demand on a method requires an overriding method to have the specified permission. An inheritance demand on a type requires a deriving class to have the specified permission.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, secure the type or the method with an inheritance demand for the same permission as the link demand.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:ReviewDeclarativeSecurityOnValueTypes'>ReviewDeclarativeSecurityOnValueTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SecuredTypesShouldNotExposeFields'>SecuredTypesShouldNotExposeFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotIndirectlyExposeMethodsWithLinkDemands'>DoNotIndirectlyExposeMethodsWithLinkDemands</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideLinkDemandsShouldBeIdenticalToBase'>OverrideLinkDemandsShouldBeIdenticalToBase</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182321.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182321.aspx</a></p>
ã
,fxcop:AbstractTypesShouldNotHaveConstructors⁄
fxcop&AbstractTypesShouldNotHaveConstructors3CA1012: Abstract types should not have constructors"MAJOR*cs2CA1012:‡<h2>Cause</h2>
<p>
            A public type is abstract and has a public constructor.
</p>
<h2>Rule Description</h2>
<p>
            Constructors on abstract types can be called only by derived types. Because public constructors create instances of a type, and you cannot create instances of an abstract type, an abstract type that has a public constructor is incorrectly designed.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, either make the constructor protected or do not declare the type as abstract.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. The abstract type has a public constructor.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182126.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182126.aspx</a></p>
Ä
,fxcop:InstantiateArgumentExceptionsCorrectlyœ
fxcop&InstantiateArgumentExceptionsCorrectly1CA2208: Instantiate argument exceptions correctly"MAJOR*cs2CA2208:◊<h2>Cause</h2>
<p>
            Possible causes include the following situations:
            <ul>
              <li>
                A call is made to the default (parameterless) constructor of an exception type that is, or derives from [System.ArgumentException].
              </li>
              <li>
                An incorrect string argument is passed to a parameterized constructor of an exception type that is, or derives from [System.ArgumentException.]
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            Instead of calling the default constructor, call one of the constructor overloads that allows a more meaningful exception message to be provided. The exception message should target the developer and clearly explain the error condition and how to correct or avoid the exception.
            The signatures of the one and two string constructors of <code>ArgumentException</code> and its derived types are not consistent with respect to the message and paramName parameters. Make sure these constructors are called with the correct string arguments. The signatures are as follows:


                <code>ArgumentException</code>
              (string message)


                <code>ArgumentException</code>
              (string message, string paramName)


                <code>ArgumentNullException</code>
              (string paramName)


                <code>ArgumentNullException</code>
              (string paramName, string message)


                <code>ArgumentOutOfRangeException</code>
              (string paramName)


                <code>ArgumentOutOfRangeException</code>
              (string paramName, string message)


                <code>DuplicateWaitObjectException</code>
              (string parameterName)


                <code>DuplicateWaitObjectException</code>
              (string parameterName, string message)
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call a constructor that takes a message, a parameter name, or both, and make sure the arguments are proper for the type of <code>ArgumentException</code> being called.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule only if a parameterized constructor is called with the correct string arguments.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182347.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182347.aspx</a></p>
–
.fxcop:MarkBooleanPInvokeArgumentsWithMarshalAsù
fxcop(MarkBooleanPInvokeArgumentsWithMarshalAs6CA1414: Mark boolean P/Invoke arguments with MarshalAs"MAJOR*cs2CA1414:û<h2>Cause</h2>
<p>
            A platform invoke method declaration includes a <code>System.Boolean</code> parameter or return value but the <code>System.Runtime.InteropServices.MarshalAsAttribute</code> attribute is not applied to the parameter or return value.
</p>
<h2>Rule Description</h2>
<p>
            A platform invoke method accesses unmanaged code and is defined by using the <code>Declare</code> keyword in Visual Basic or the <code>System.Runtime.InteropServices.DllImportAttribute</code>. <code>MarshalAsAttribute</code> specifies the marshaling behavior that is used to convert data types between managed and unmanaged code. Many simple data types, such as <code>System.Byte</code> and System.Int32, have a single representation in unmanaged code and do not require specification of their marshaling behavior; the common language runtime automatically supplies the correct behavior.
            The <code>Boolean</code> data type has multiple representations in unmanaged code. When the <code>MarshalAsAttribute</code> is not specified, the default marshaling behavior for the <code>Boolean</code> data type is <code>UnmanagedType.Bool</code>. This is a 32-bit integer, which is not appropriate in all circumstances. The Boolean representation that is required by the unmanaged method should be determined and matched to the appropriate <code>System.Runtime.InteropServices.UnmanagedType</code>. UnmanagedType.Bool is the Win32 BOOL type, which is always 4 bytes. UnmanagedType.U1 should be used for C++ bool or other 1-byte types. For more information, see Default Marshaling for Boolean Types.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, apply <code>MarshalAsAttribute</code> to the <code>Boolean</code> parameter or return value. Set the value of the attribute to the appropriate <code>UnmanagedType</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Even if the default marshaling behavior is appropriate, the code is more easily maintained when the behavior is explicitly specified.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:PInvokeDeclarationsShouldBePortable'>PInvokeDeclarationsShouldBePortable</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SpecifyMarshalingForPInvokeStringArguments'>SpecifyMarshalingForPInvokeStringArguments</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182206.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182206.aspx</a></p>
•

.fxcop:ParameterNamesShouldMatchBaseDeclarationÚ	
fxcop(ParameterNamesShouldMatchBaseDeclaration5CA1725: Parameter names should match base declaration"MAJOR*cs2CA1725:Ù<h2>Cause</h2>
<p>
            The name of a parameter in an externally visible method override does not match the name of the parameter in the base declaration of the method, or the name of the parameter in the interface declaration of the method.
</p>
<h2>Rule Description</h2>
<p>
            Consistent naming of parameters in an override hierarchy increases the usability of the method overrides. A parameter name in a derived method that differs from the name in the base declaration can cause confusion about whether the method is an override of the base method or a new overload of the method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, rename the parameter to match the base declaration. The fix is a breaking change for COM visible methods.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule except for COM visible methods in libraries that have previously shipped.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182251.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182251.aspx</a></p>
¨

/fxcop:DoNotDeclareProtectedMembersInSealedTypes¯	
fxcop)DoNotDeclareProtectedMembersInSealedTypes8CA1047: Do not declare protected members in sealed types"MAJOR*cs2CA1047:ˆ<h2>Cause</h2>
<p>
            A public type is <code>sealed</code> (<code>NotInheritable</code> in Visual basic) and declares a protected member or a protected nested type. This rule does not report violations for <code>Finalize</code> methods, which must follow this pattern.
</p>
<h2>Rule Description</h2>
<p>
            Types declare protected members so that inheriting types can access or override the member. By definition, you cannot inherit from a sealed type, which means that protected methods on sealed types cannot be called.
            The C# compiler issues a warning for this error.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the access level of the member to private, or make the type inheritable.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Leaving the type in its current state can cause maintenance issues and does not provide any benefits.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182138.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182138.aspx</a></p>
ï
-fxcop:ResourceStringsShouldBeSpelledCorrectly„
fxcop'ResourceStringsShouldBeSpelledCorrectly4CA1703: Resource strings should be spelled correctly"MAJOR*cs2CA1703:Á
<h2>Cause</h2>
<p>
            A resource string contains one or more words that are not recognized by the Microsoft spelling checker library.
</p>
<h2>Rule Description</h2>
<p>
            This rule parses the resource string into words (tokenizing compound words) and checks the spelling of each word/token. For information about the parsing algorithm, see CA1704: Identifiers should be spelled correctly.
            By default, the English (en) version of the spelling checker is used.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, use complete words that are correctly spelled or add the words to a custom dictionary. For information about how to use custom dictionaries, see CA1704: Identifiers should be spelled correctly.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Correctly spelled words reduce the time that is required to learn new software libraries.
</p>
<h2>Related Rules</h2>
<p>


                CA1701: Resource string compound words should be cased correctly




                CA1704: Identifiers should be spelled correctly




                CA2204: Literals should be spelled correctly


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264483.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264483.aspx</a></p>
ú
,fxcop:EventsShouldNotHaveBeforeOrAfterPrefixÎ

fxcop&EventsShouldNotHaveBeforeOrAfterPrefix5CA1713: Events should not have before or after prefix"MAJOR*cs2CA1713:Ô	<h2>Cause</h2>
<p>
            The name of an event starts with 'Before' or 'After'.
</p>
<h2>Rule Description</h2>
<p>
            Event names should describe the action that raises the event. To name related events that are raised in a specific sequence, use the present or past tense to indicate the relative position in the sequence of actions. For example, when naming a pair of events that is raised when closing a resource, you might name it 'Closing' and 'Closed', instead of 'BeforeClose' and 'AfterClose'.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Remove the prefix from the event name, and consider changing the name to use the present or past tense of a verb.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182238.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182238.aspx</a></p>
‘
/fxcop:ComVisibleTypeBaseTypesShouldBeComVisible†
fxcop)ComVisibleTypeBaseTypesShouldBeComVisible9CA1405: COM visible type base types should be COM visible"MAJOR*cs2CA1405:ù<h2>Cause</h2>
<p>
            A Component Object Model (COM) visible type derives from a type that is not COM visible.
</p>
<h2>Rule Description</h2>
<p>
            When a COM visible type adds members in a new version, it must abide by strict guidelines to avoid breaking COM clients that bind to the current version. A type that is invisible to COM presumes it does not have to follow these COM versioning rules when it adds new members. However, if a COM visible type derives from the COM invisible type and exposes a class interface of <code>ClassInterfaceType.AutoDual</code> or <code>AutoDispatch</code> (the default), all public members of the base type (unless they are specifically marked as COM invisible, which would be redundant) are exposed to COM. If the base type adds new members in a subsequent version, any COM clients that bind to the class interface of the derived type might break. COM visible types should derive only from COM visible types to reduce the chance of breaking COM clients.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the base types COM visible or the derived type COM invisible.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182202.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182202.aspx</a></p>
á
+fxcop:MethodSecurityShouldBeASupersetOfType◊
fxcop%MethodSecurityShouldBeASupersetOfType4CA2114: Method security should be a superset of type"MAJOR*cs2CA2114:›<h2>Cause</h2>
<p>
            A type has declarative security and one of its methods has declarative security for the same security action, and the security action is not Link Demands or Inheritance Demands, and the permissions checked by the type are not a subset of the permissions checked by the method.
</p>
<h2>Rule Description</h2>
<p>
            A method should not have both a method-level and type-level declarative security for the same action. The two checks are not combined; only the method-level demand is applied. For example, if a type demands permission X, and one of its methods demands permission Y, code does not have to have permission X to execute the method.
</p>
<h2>How to Fix Violations</h2>
<p>
            Review your code to make sure that both actions are required. If both actions are required, make sure that the method-level action includes the security specified at the type level. For example, if your type demands permission X, and its method must also demand permission Y, the method should explicitly demand X and Y.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the method does not require the security specified by the type. However, this is not an ordinary scenario and might indicate a need for a careful design review.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182304.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182304.aspx</a></p>
Ö
;fxcop:TransparentMethodsShouldNotBeProtectedWithLinkDemands≈

fxcop5TransparentMethodsShouldNotBeProtectedWithLinkDemandsACA2142: Transparent code should not be protected with LinkDemands"MAJOR*cs2CA2142:Æ	<h2>Cause</h2>
<p>
            A transparent method requires a <code>LinkDemand</code> or other security demand.
</p>
<h2>Rule Description</h2>
<p>
            This rule fires on transparent methods which require LinkDemands to access them. Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Because transparent methods are supposed to be security neutral, they should not be making any security decisions. Additionally, safe critical code, which does make security decisions, should not be relying on transparent code to have previously made such a decision.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the link demand on the transparent method or mark the method with <code>SecuritySafeCriticalAttribute</code> attribute if it is performing security checks, such as security demands.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997567.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997567.aspx</a></p>
Õ
5fxcop:CatchNonClsCompliantExceptionsInGeneralHandlersì
fxcop/CatchNonClsCompliantExceptionsInGeneralHandlers=CA2102: Catch non-CLSCompliant exceptions in general handlers"MAJOR*cs2CA2102:Ü<h2>Cause</h2>
<p>
            A member in an assembly that is not marked with the <code>RuntimeCompatibilityAttribute</code> or is marked RuntimeCompatibility(WrapNonExceptionThrows = false) contains a catch block that handles <code>System.Exception</code> and does not contain an immediately following general catch block. This rule ignores Visual Basic assemblies.
</p>
<h2>Rule Description</h2>
<p>
            A catch block that handles <code>Exception</code> catches all Common Language Specification (CLS) compliant exceptions. However, it does not catch non-CLS compliant exceptions. Non-CLS compliant exceptions can be thrown from native code or from managed code that was generated by the Microsoft intermediate language (MSIL) Assembler. Notice that the C# and Visual Basic compilers do not allow non-CLS compliant exceptions to be thrown and Visual Basic does not catch non-CLS compliant exceptions. If the intent of the catch block is to handle all exceptions, use the following general catch block syntax.
            <ul>
              <li>
                C#: catch {}
              </li>
              <li>
                C++: catch(...) {} or catch(Object^) {}
              </li>
            </ul>
            An unhandled non-CLS compliant exception becomes a security issue when previously allowed permissions are removed in the catch block. Because non-CLS compliant exceptions are not caught, a malicious method that throws a non-CLS compliant exception could run with elevated permissions.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule when the intent is to catch all exceptions, substitute or add a general catch block or mark the assembly RuntimeCompatibility(WrapNonExceptionThrows = true). If permissions are removed in the catch block, duplicate the functionality in the general catch block. If it is not the intent to handle all exceptions, replace the catch block that handles <code>Exception</code> with catch blocks that handle specific exception types.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the try block does not contain any statements that might generate a non-CLS compliant exception. Because any native or managed code might throw a non-CLS compliant exception, this requires knowledge of all code that can be executed in all code paths inside the try block. Notice that non-CLS compliant exceptions are not thrown by the common language runtime.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotCatchGeneralExceptionTypes'>DoNotCatchGeneralExceptionTypes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264489.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264489.aspx</a></p>
‚
)fxcop:OnlyFlagsEnumsShouldHavePluralNames¥
fxcop#OnlyFlagsEnumsShouldHavePluralNames:CA1717: Only FlagsAttribute enums should have plural names"MAJOR*cs2CA1717:∂<h2>Cause</h2>
<p>
            The name of an externally visible enumeration ends in a plural word and the enumeration is not marked with the <code>System.FlagsAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>
            Naming conventions dictate that a plural name for an enumeration indicates that more than one value of the enumeration can be specified simultaneously. The <code>FlagsAttribute</code> tells compilers that the enumeration should be treated as a bit field that enables bitwise operations on the enumeration.
            If only one value of an enumeration can be specified at a time, the name of the enumeration should be a singular word. For example, an enumeration that defines the days of the week might be intended for use in an application where you can specify multiple days. This enumeration should have the <code>FlagsAttribute</code> and could be called 'Days'. A similar enumeration that allows only a single day to be specified would not have the attribute, and could be called 'Day'.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the time that is required to learn a new software library, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Make the name of the enumeration a singular word or add the <code>FlagsAttribute</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from the rule if the name ends in a singular word.
</p>
<h2>Related Rules</h2>
<p>


                CA1714: Flags enums should have plural names




                <a href='/coding_rules#rule_key=fxcop:MarkEnumsWithFlags'>MarkEnumsWithFlags</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotMarkEnumsWithFlags'>DoNotMarkEnumsWithFlags</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264487.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264487.aspx</a></p>
ë
&fxcop:LiteralsShouldBeSpelledCorrectlyÊ
fxcop LiteralsShouldBeSpelledCorrectly,CA2204: Literals should be spelled correctly"MAJOR*cs2CA2204:˘<h2>Cause</h2>
<p>
            A method passes a literal string to that is used in a parameter or property that requires a localized string and the literal string contains one or more words that are not recognized by the Microsoft spelling checker library.
</p>
<h2>Rule Description</h2>
<p>
            This rule checks a literal string that is passed as a value to a parameter or property when one or more of the following cases is true:
            <ul>
              <li>
                The <code>LocalizableAttribute</code> attribute of the parameter or property is set to true.
              </li>
              <li>
                The parameter or property name contains "Text", "Message", or "Caption".
              </li>
              <li>
                The name of the string parameter that is passed to a Console.Write or Console.WriteLine method is either "value" or "format".
              </li>
            </ul>
            This rule parses the literal string into words, tokenizing compound words, and checks the spelling of each word/token. For information about the parsing algorithm, see CA1704: Identifiers should be spelled correctly.
            By default, the English (en) version of the spelling checker is used.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, correct the spelling of the word or add the word to a custom dictionary. For information about how to use custom dictionaries, see How to: Customize the Code Analysis Dictionary.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Correctly spelled words reduce the learning curve required for new software libraries.
</p>
<h2>Related Rules</h2>
<p>


                CA1704: Identifiers should be spelled correctly




                CA1703: Resource strings should be spelled correctly


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264488.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264488.aspx</a></p>
∫
/fxcop:DoNotDeclareReadOnlyMutableReferenceTypesÜ
fxcop)DoNotDeclareReadOnlyMutableReferenceTypes8CA2104: Do not declare read only mutable reference types"MAJOR*cs2CA2104:Ñ<h2>Cause</h2>
<p>
            An externally visible type contains an externally visible read-only field that is a mutable reference type.
</p>
<h2>Rule Description</h2>
<p>
            A mutable type is a type whose instance data can be modified. The <code>System.Text.StringBuilder</code> class is an example of a mutable reference type. It contains members that can change the value of an instance of the class. An example of an immutable reference type is the <code>System.String</code> class. After it has been instantiated, its value can never change.
            The read-only modifier (readonly (C# Reference) in C#, ReadOnly (Visual Basic) in Visual Basic, and <code>const (C++)</code> in C++) on a reference type field (pointer in C++) prevents the field from being replaced by a different instance of the reference type. However, the modifier does not prevent the instance data of the field from being modified through the reference type.
            Read-only array fields are exempt from this rule but instead cause a violation of the <a href='/coding_rules#rule_key=fxcop:ArrayFieldsShouldNotBeReadOnly'>ArrayFieldsShouldNotBeReadOnly</a> rule.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the read-only modifier or, if a breaking change is acceptable, replace the field with an immutable type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the field type is immutable.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182302.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182302.aspx</a></p>
≈
fxcop:AvoidUncalledPrivateCode¢
fxcopAvoidUncalledPrivateCode#CA1811: Avoid uncalled private code"MAJOR*cs2CA1811:∆<h2>Cause</h2>
<p>
            A private or internal (assembly-level) member does not have callers in the assembly, is not invoked by the common language runtime, and is not invoked by a delegate. The following members are not checked by this rule:
            <ul>
              <li>
                Explicit interface members.
              </li>
              <li>
                Static constructors.
              </li>
              <li>
                Serialization constructors.
              </li>
              <li>
                Methods marked with <code>System.Runtime.InteropServices.ComRegisterFunctionAttribute</code> or <code>System.Runtime.InteropServices.ComUnregisterFunctionAttribute</code>.
              </li>
              <li>
                Members that are overrides.
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            This rule can report false positives if entry points occur that are not currently identified by the rule logic. Also, a compiler may emit noncallable code into an assembly.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the noncallable code or add code that calls it.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidUninstantiatedInternalClasses'>AvoidUninstantiatedInternalClasses</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ReviewUnusedParameters'>ReviewUnusedParameters</a><br/>




                <a href='/coding_rules#rule_key=fxcop:RemoveUnusedLocals'>RemoveUnusedLocals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182264.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182264.aspx</a></p>
Î
 fxcop:ReviewMisleadingFieldNames∆
fxcopReviewMisleadingFieldNames%CA1504: Review misleading field names"MAJOR*cs2CA1504:Ê<h2>Cause</h2>
<p>
            The name of an instance field starts with "s_" or the name of a <code>static</code> (<code>Shared</code> in Visual Basic) field starts with "m_".
</p>
<h2>Rule Description</h2>
<p>
            Field names that start with "s_" are associated with static data by many users. Similarly, field names that start with "m_" are associated with instance (member) data. For more easily maintained code, names should follow generally used conventions.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, rename the field by using the appropriate prefix. Alternatively, make the field agree with the current suffix by adding or removing the <code>static</code> modifier.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb164506.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb164506.aspx</a></p>
Ÿ>
0fxcop:CollectionsShouldImplementGenericInterface§>
fxcop*CollectionsShouldImplementGenericInterface6CA1010: Collections should implement generic interface"MAJOR*cs2CA1010:£=<h2>Cause</h2>
<p>
            An externally visible type implements the <code>System.Collections.IEnumerable</code> interface but does not implement the <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> interface, and the containing assembly targets .NET Framework¬†2.0. This rule ignores types that implement <code>System.Collections.IDictionary</code>.
</p>
<h2>Rule Description</h2>
<p>
            To broaden the usability of a collection, implement one of the generic collection interfaces. Then the collection can be used to populate generic collection types such as the following:
            <ul>
              <li>


                    <code>System.Collections.Generic.List&lt;T&gt;</code>


              </li>
              <li>


                    <code>System.Collections.Generic.Queue&lt;T&gt;</code>


              </li>
              <li>


                    <code>System.Collections.Generic.Stack&lt;T&gt;</code>


              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement one of the following generic collection interfaces:
            <ul>
              <li>


                    <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code>


              </li>
              <li>


                    <code>System.Collections.Generic.ICollection&lt;T&gt;</code>


              </li>
              <li>


                    <code>System.Collections.Generic.IList&lt;T&gt;</code>


              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule; however, the collection will have a more limited use.
</p>
<h2>Example Violation</h2>

<h3>Description</h3>
<p>
                The following example shows a class (reference type) that derives from the non-generic CollectionBase class, which violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Collections;

namespace Samples
{
    public¬†class Book
    {
        public Book()
        {
        }
    }

    public¬†class BookCollection : CollectionBase
    {
        public BookCollection()
        {
        }

        public¬†void Add(Book value)
        {
            InnerList.Add(value);
        }

        public¬†void Remove(Book value)
        {
            InnerList.Remove(value);
        }

        public¬†void Insert(int index, Book value)
        {
            InnerList.Insert(index, value);
        }

        public Book this[int index]
        {
            get { return (Book)InnerList[index]; }
            set { InnerList[index] = value; }
        }

        public¬†bool Contains(Book value)
        {
            return InnerList.Contains(value);
        }

        public¬†int IndexOf(Book value)
        {
            return InnerList.IndexOf(value);
        }

        public¬†void CopyTo(Book[] array, int arrayIndex)
        {
            InnerList.CopyTo(array, arrayIndex);
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                To fix a violation of this violation, you should either implement the generic interfaces or change the base class to a type that already implements both the generic and non-generic interfaces, such as the Collection&lt;T&gt; class.
</p>
<h2>Fix by Base Class Change</h2>

<h3>Description</h3>
<p>
                The following example fixes the violation by changing the base class of the collection from the non-generic CollectionBase class to the generic Collection&lt;T&gt; (Collection(Of T) in Visual Basic) class.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Collections.ObjectModel;

namespace Samples
{
    public¬†class Book
    {
        public Book()
        {
        }
    }

    public¬†class BookCollection : Collection&lt;Book&gt;
    {
        public BookCollection()
        {
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                Changing the base class of an already released class is considered a breaking change to existing consumers.
</p>
<h2>Fix by Interface Implementation</h2>

<h3>Description</h3>
<p>
                The following example fixes the violation by implementing these generic interfaces: IEnumerable&lt;T&gt;, ICollection&lt;T&gt;, and IList&lt;T&gt; (IEnumerable(Of T), ICollection(Of T), and IList(Of T) in Visual Basic).
</p>
<h3>Code</h3>
<p>










            <pre>
using System;
using System.Collections;
using System.Collections.Generic;

namespace Samples
{
    public¬†class Book
    {
        public Book()
        {
        }
    }

    public¬†class BookCollection : CollectionBase, IList&lt;Book&gt;
    {
        public BookCollection()
        {
        }

        int IList&lt;Book&gt;.IndexOf(Book item)
        {
            return¬†this.List.IndexOf(item);
        }

        void IList&lt;Book&gt;.Insert(int location, Book item)
        {
        }

        Book IList&lt;Book&gt;.this[int index]
        {
            get { return (Book) this.List[index]; }
            set { }
        }

        void ICollection&lt;Book&gt;.Add(Book item)
        {
        }

        bool ICollection&lt;Book&gt;.Contains(Book item)
        {
            return¬†true;
        }

        void ICollection&lt;Book&gt;.CopyTo(Book[] array, int arrayIndex)
        {
        }

        bool ICollection&lt;Book&gt;.IsReadOnly
        {
            get { return¬†false; }
        }

        bool ICollection&lt;Book&gt;.Remove(Book item)
        {
            if (InnerList.Contains(item))
            {
                InnerList.Remove(item);
                return¬†true;
            }
            return¬†false;
        }

        IEnumerator&lt;Book&gt; IEnumerable&lt;Book&gt;.GetEnumerator()
        {
            return¬†new BookCollectionEnumerator(InnerList.GetEnumerator());
        }

        private¬†class BookCollectionEnumerator : IEnumerator&lt;Book&gt;
        {
            private IEnumerator _Enumerator;

            public BookCollectionEnumerator(IEnumerator enumerator)
            {
                _Enumerator = enumerator;
            }

            public Book Current
            {
                get { return (Book)_Enumerator.Current; }
            }

            object IEnumerator.Current
            {
                get { return _Enumerator.Current; }
            }

            public¬†bool MoveNext()
            {
                return _Enumerator.MoveNext();
            }

            public¬†void Reset()
            {
                _Enumerator.Reset();
            }

            public¬†void Dispose()
            {
            }
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveParametersOnGenericTypes'>AvoidExcessiveParametersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareStaticMembersOnGenericTypes'>DoNotDeclareStaticMembersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotExposeGenericLists'>DoNotExposeGenericLists</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNestGenericTypesInMemberSignatures'>DoNotNestGenericTypesInMemberSignatures</a><br/>




                <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericEventHandlerInstances'>UseGenericEventHandlerInstances</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericsWhereAppropriate'>UseGenericsWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182132.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182132.aspx</a></p>
”

0fxcop:StaticHolderTypesShouldNotHaveConstructorsû

fxcop*StaticHolderTypesShouldNotHaveConstructors8CA1053: Static holder types should not have constructors"MAJOR*cs2CA1053:õ	<h2>Cause</h2>
<p>
            A public or nested public type declares only static members and has a public or protected default constructor.
</p>
<h2>Rule Description</h2>
<p>
            The constructor is unnecessary because calling static members does not require an instance of the type. Also, because the type does not have non-static members, creating an instance does not provide access to any of the type's members.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the default constructor or make it private.





                    Note




                    Some compilers automatically create a public default constructor if the type does not define any constructors. If this is the case with your type, add a private default constructor to eliminate the violation.




</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. The presence of the constructor suggests that the type is not a static type.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182169.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182169.aspx</a></p>
¯
.fxcop:DoNotMarkServicedComponentsWithWebMethod≈
fxcop(DoNotMarkServicedComponentsWithWebMethod6CA2212: Do not mark serviced components with WebMethod"MAJOR*cs2CA2212:∆<h2>Cause</h2>
<p>
            A method in a type that inherits from <code>System.EnterpriseServices.ServicedComponent</code> is marked with <code>System.Web.Services.WebMethodAttribute</code>.
</p>
<h2>Rule Description</h2>
<p>


                <code>WebMethodAttribute</code>
               applies to methods within an XML Web service that were created by using ASP.NET; it makes the method callable from remote Web clients. The method and class must be public and executing in an ASP.NET Web application. <code>ServicedComponent</code> types are hosted by COM+ applications and can use COM+ services. <code>WebMethodAttribute</code> is not applied to <code>ServicedComponent</code> types because they are not intended for the same scenarios. Specifically, adding the attribute to the <code>ServicedComponent</code> method does not make the method callable from remote Web clients. Because <code>WebMethodAttribute</code> and a <code>ServicedComponent</code> method have conflicting behaviors and requirements for context and transaction flow, the behavior of the method will be incorrect in some scenarios.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the attribute from the <code>ServicedComponent</code> method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. There are no scenarios where combining these elements is correct.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182336.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182336.aspx</a></p>
±
-fxcop:SealMethodsThatSatisfyPrivateInterfacesˇ
fxcop'SealMethodsThatSatisfyPrivateInterfaces4CA2119: Seal methods that satisfy private interfaces"MAJOR*cs2CA2119:É<h2>Cause</h2>
<p>
            An inheritable public type provides an overridable method implementation of an <code>internal</code> (<code>Friend</code> in Visual Basic) interface.
</p>
<h2>Rule Description</h2>
<p>
            Interface methods have public accessibility, which cannot be changed by the implementing type. An internal interface creates a contract that is not intended to be implemented outside the assembly that defines the interface. A public type that implements a method of an internal interface using the <code>virtual</code> (<code>Overridable</code> in Visual Basic) modifier allows the method to be overridden by a derived type that is outside the assembly. If a second type in the defining assembly calls the method and expects an internal-only contract, behavior might be compromised when, instead, the overridden method in the outside assembly is executed. This creates a security vulnerability.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, prevent the method from being overridden outside the assembly by using one of the following:
            <ul>
              <li>
                Make the declaring type <code>sealed</code> (<code>NotInheritable</code> in Visual Basic).
              </li>
              <li>
                Change the accessibility of the declaring type to <code>internal</code> (<code>Friend</code> in Visual Basic).
              </li>
              <li>
                Remove all public constructors from the declaring type.
              </li>
              <li>
                Implement the method without using the <code>virtual</code> modifier.
              </li>
              <li>
                Implement the method explicitly.
              </li>
            </ul>
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if, after careful review, no security issues exist that might be exploitable if the method is overridden outside the assembly.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182313.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182313.aspx</a></p>
Ú

#fxcop:RethrowToPreserveStackDetails 

fxcopRethrowToPreserveStackDetails)CA2200: Rethrow to preserve stack details"MAJOR*cs2CA2200:„	<h2>Cause</h2>
<p>
            An exception is re-thrown and the exception is explicitly specified in the <code>throw</code> statement.
</p>
<h2>Rule Description</h2>
<p>
            Once an exception is thrown, part of the information it carries is the stack trace. The stack trace is a list of the method call hierarchy that starts with the method that throws the exception and ends with the method that catches the exception. If an exception is re-thrown by specifying the exception in the <code>throw</code> statement, the stack trace is restarted at the current method and the list of method calls between the original method that threw the exception and the current method is lost. To keep the original stack trace information with the exception, use the <code>throw</code> statement without specifying the exception.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, re-throw the exception without specifying the exception explicitly.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182363.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182363.aspx</a></p>
”
=fxcop:TransparentMethodsShouldNotLoadAssembliesFromByteArraysë
fxcop7TransparentMethodsShouldNotLoadAssembliesFromByteArraysDCA2144: Transparent code should not load assemblies from byte arrays"MAJOR*cs2CA2144:ı
<h2>Cause</h2>
<p>
            A transparent method loads an assembly from a byte array using one of the following methods:
            <ul>
              <li>


                    <code>Load</code>


              </li>
              <li>


                    <code>Load</code>


              </li>
              <li>


                    <code>Load</code>

              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            The security review for transparent code is not as thorough as the security review for critical code, because transparent code cannot perform security sensitive actions. Assemblies loaded from a byte array might not be noticed in transparent code, and that byte array might contain critical, or more importantly safe-critical code, that does need to be audited. Therefore, transparent code should not load assemblies from a byte array.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, mark the method that is loading the assembly with the <code>SecurityCriticalAttribute</code> or the <code>SecuritySafeCriticalAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997568.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997568.aspx</a></p>
“
!fxcop:AvoidExcessiveClassCoupling¨
fxcopAvoidExcessiveClassCoupling&CA1506: Avoid excessive class coupling"MAJOR*cs2CA1506: <h2>Cause</h2>
<p>
            A type or method is coupled with many other types.
</p>
<h2>Rule Description</h2>
<p>
            This rule measures class coupling by counting the number of unique type references that a type or method contains.
            Types and methods that have a high degree of class coupling can be difficult to maintain. It is a good practice to have types and methods that exhibit low coupling and high cohesion.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix this violation, try to redesign the type or method to reduce the number of types to which it is coupled.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Exclude this warning when the type or method is still considered maintainable despite its large number of dependencies on other types.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb397994.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb397994.aspx</a></p>
´
(fxcop:ImplementSerializationConstructors˛
fxcop"ImplementSerializationConstructors,CA2229: Implement serialization constructors"MAJOR*cs2CA2229:è<h2>Cause</h2>
<p>
            The type implements the <code>System.Runtime.Serialization.ISerializable</code> interface, is not a delegate or interface, and one of the following conditions is true:
            <ul>
              <li>
                The type does not have a constructor that takes a <code>System.Runtime.Serialization.SerializationInfo</code> object and a <code>System.Runtime.Serialization.StreamingContext</code> object (the signature of the serialization constructor).
              </li>
              <li>
                The type is unsealed and the access modifier for its serialization constructor is not protected (family).
              </li>
              <li>
                The type is sealed and the access modifier for its serialization constructor is not private.
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            This rule is relevant for types that support custom serialization. A type supports custom serialization if it implements the <code>ISerializable</code> interface. The serialization constructor is required to deserialize, or re-create objects that have been serialized using the <code>ISerializable.GetObjectData</code> method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement the serialization constructor. For a sealed class, make the constructor private; otherwise, make it protected.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a violation of the rule. The type will not be deserializable, and will not function in many scenarios.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:MarkISerializableTypesWithSerializable'>MarkISerializableTypesWithSerializable</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182343.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182343.aspx</a></p>
å
%fxcop:UseManagedEquivalentsOfWin32Api‚
fxcopUseManagedEquivalentsOfWin32Api,CA2205: Use managed equivalents of Win32 API"MAJOR*cs2CA2205:ˆ<h2>Cause</h2>
<p>
            A platform invoke method is defined and a method with the equivalent functionality exists in the .NET Framework class library.
</p>
<h2>Rule Description</h2>
<p>
            A platform invoke method is used to call an unmanaged DLL function and is defined using the <code>System.Runtime.InteropServices.DllImportAttribute</code> attribute, or the <code>Declare</code> keyword in Visual Basic. An incorrectly defined platform invoke method can lead to runtime exceptions because of issues such as a misnamed function, faulty mapping of parameter and return value data types, and incorrect field specifications, such as the calling convention and character set. If available, it is generally simpler and less error prone to call the equivalent managed method than to define and call the unmanaged method directly. Calling a platform invoke method can also lead to additional security issues that need to be addressed.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, replace the call to the unmanaged function with a call to its managed equivalent.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if the suggested replacement method does not provide the needed functionality.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallGetLastErrorImmediatelyAfterPInvoke'>CallGetLastErrorImmediatelyAfterPInvoke</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MovePInvokesToNativeMethodsClass'>MovePInvokesToNativeMethodsClass</a><br/>




                <a href='/coding_rules#rule_key=fxcop:PInvokeEntryPointsShouldExist'>PInvokeEntryPointsShouldExist</a><br/>




                <a href='/coding_rules#rule_key=fxcop:PInvokesShouldNotBeVisible'>PInvokesShouldNotBeVisible</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SpecifyMarshalingForPInvokeStringArguments'>SpecifyMarshalingForPInvokeStringArguments</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182365.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182365.aspx</a></p>
®
&fxcop:AvoidInt64ArgumentsForVB6Clients˝
fxcop AvoidInt64ArgumentsForVB6Clients8CA1406: Avoid Int64 arguments for Visual Basic 6 clients"MAJOR*cs2CA1406:Ñ<h2>Cause</h2>
<p>
            A type that is specifically marked as visible to Component Object Model (COM) declares a member that takes a System.Int64 argument.
</p>
<h2>Rule Description</h2>
<p>
            Visual Basic 6 COM clients cannot access 64-bit integers.
            By default, the following are visible to COM: assemblies, public types, public instance members in public types, and all members of public value types. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated; the containing assembly must be marked with the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> set to <code>false</code> and the type must be marked with the <code>ComVisibleAttribute</code> set to <code>true</code>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule for a parameter whose value can always be expressed as a 32-bit integral, change the parameter type to System.Int32. If the value of the parameter might be larger than can be expressed as a 32-bit integral, change the parameter type to <code>System.Decimal</code>. Note that both <code>System.Single</code> and <code>System.Double</code> lose precision at the upper ranges of the Int64 data type. If the member is not meant to be visible to COM, mark it with the <code>ComVisibleAttribute</code> set to <code>false</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if it is certain that Visual Basic 6 COM clients will not access the type.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidNonpublicFieldsInComVisibleValueTypes'>AvoidNonpublicFieldsInComVisibleValueTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:AvoidStaticMembersInComVisibleTypes'>AvoidStaticMembersInComVisibleTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAssembliesWithComVisible'>MarkAssembliesWithComVisible</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182195.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182195.aspx</a></p>
Ó
$fxcop:ArrayFieldsShouldNotBeReadOnly≈
fxcopArrayFieldsShouldNotBeReadOnly,CA2105: Array fields should not be read only"MAJOR*cs2CA2105:⁄<h2>Cause</h2>
<p>
            A public or protected field that holds an array is declared read-only.
</p>
<h2>Rule Description</h2>
<p>
            When you apply the <code>readonly</code> (<code>ReadOnly</code> in Visual Basic) modifier to a field that contains an array, the field cannot be changed to refer to a different array. However, the elements of the array that are stored in a read-only field can be changed. Code that makes decisions or performs operations that are based on the elements of a read-only array that can be publicly accessed might contain an exploitable security vulnerability.
            Note that having a public field also violates the design rule <a href='/coding_rules#rule_key=fxcop:DoNotDeclareVisibleInstanceFields'>DoNotDeclareVisibleInstanceFields</a>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix the security vulnerability that is identified by this rule, do not rely on the contents of a read-only array that can be publicly accessed. It is strongly recommended that you use one of the following procedures:
            <ul>
              <li>
                Replace the array with a strongly typed collection that cannot be changed. For more information, see <code>System.Collections.ReadOnlyCollectionBase</code>.
              </li>
              <li>
                Replace the public field with a method that returns a clone of a private array. Because your code does not rely on the clone, there is no danger if the elements are modified.
              </li>
            </ul>
            If you chose the second approach, do not replace the field with a property; properties that return arrays adversely affect performance. For more information, see <code>CA1819: Properties should not return arrays</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Exclusion of a warning from this rule is strongly discouraged. Almost no scenarios occur where the contents of a read-only field are unimportant. If this is the case with your scenario, remove the <code>readonly</code> modifier instead of excluding the message.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182299.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182299.aspx</a></p>
ƒ
%fxcop:ProvideObsoleteAttributeMessageö
fxcopProvideObsoleteAttributeMessage)CA1041: Provide ObsoleteAttribute message"MAJOR*cs2CA1041:±<h2>Cause</h2>
<p>
            A type or member is marked by using a <code>System.ObsoleteAttribute</code> attribute that does not have its <code>ObsoleteAttribute.Message</code> property specified.
</p>
<h2>Rule Description</h2>
<p>


                <code>ObsoleteAttribute</code>
               is used to mark deprecated library types and members. Library consumers should avoid the use of any type or member that is marked obsolete. This is because it might not be supported and will eventually be removed from later versions of the library. When a type or member marked by using <code>ObsoleteAttribute</code> is compiled, the <code>Message</code> property of the attribute is displayed. This gives the user information about the obsolete type or member. This information generally includes how long the obsolete type or member will be supported by the library designers and the preferred replacement to use.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add the message parameter to the <code>ObsoleteAttribute</code> constructor.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule because the <code>Message</code> property provides critical information about the obsolete type or member.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182166.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182166.aspx</a></p>
∆

'fxcop:TransparentMethodsShouldNotDemandö

fxcop!TransparentMethodsShouldNotDemand;CA2143: Transparent methods should not use security demands"MAJOR*cs2CA2143:ù	<h2>Cause</h2>
<p>
            A tranparent type or method is declaratively marked with a <code>System.Security.Permissions.SecurityAction</code><code>.Demand</code> demand or the method calls the <code>CodeAccessPermission.Demand</code> method.
</p>
<h2>Rule Description</h2>
<p>
            Security transparent code should not be responsible for verifying the security of an operation, and therefore should not demand permissions. Security transparent code should use full demands to make security decisions and safe-critical code should not rely on transparent code to have made the full demand. Any code that performs security checks, such as security demands, should be safe-critical instead.
</p>
<h2>How to Fix Violations</h2>
<p>
            In general, to fix a violation of this rule, mark the method with the <code>SecuritySafeCriticalAttribute</code> attribute. You can also remove the demand.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997566.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997566.aspx</a></p>
Ç
&fxcop:EnumeratorsShouldBeStronglyTyped◊
fxcop EnumeratorsShouldBeStronglyTyped,CA1038: Enumerators should be strongly typed"MAJOR*cs2CA1038:Í<h2>Cause</h2>
<p>
            A public or protected type implements <code>System.Collections.IEnumerator</code> but does not provide a strongly typed version of the <code>IEnumerator.Current</code> property. Types that are derived from the following types are exempt from this rule:
            <ul>
              <li>


                    <code>System.Collections.CollectionBase</code>


              </li>
              <li>


                    <code>System.Collections.DictionaryBase</code>


              </li>
              <li>


                    <code>System.Collections.ReadOnlyCollectionBase</code>


              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            This rule requires <code>IEnumerator</code> implementations to also provide a strongly typed version of the <code>Current</code> property so that users are not required to cast the return value to the strong type when they use the functionality that is provided by the interface. This rule assumes that the type that implements <code>IEnumerator</code> contains a collection of instances of a type that is stronger than <code>Object</code>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement the interface property explicitly (declare it as IEnumerator.Current). Add a public strongly typed version of the property, declared as Current, and have it return a strongly typed object.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule when you implement an object-based enumerator for use with an object-based collection, such as a binary tree. Types that extend the new collection will define the strongly typed enumerator and expose the strongly typed property.
</p>
<h2>Example</h2>
<p>


                <code>CA1035: ICollection implementations have strongly typed members</code>




                <a href='/coding_rules#rule_key=fxcop:ListsAreStronglyTyped'>ListsAreStronglyTyped</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182148.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182148.aspx</a></p>
π	
/fxcop:ReplaceRepetitiveArgumentsWithParamsArrayÖ	
fxcop)ReplaceRepetitiveArgumentsWithParamsArray6CA1025: Replace repetitive arguments with params array"MAJOR*cs2CA1025:Ö<h2>Cause</h2>
<p>
            A public or protected method in a public type has more than three parameters, and its last three parameters are the same type.
</p>
<h2>Rule Description</h2>
<p>
            Use a parameter array instead of repeated arguments when the exact number of arguments is unknown and the variable arguments are the same type, or can be passed as the same type. For example, the <code>WriteLine</code> method provides a general-purpose overload that uses a parameter array to accept any number of <code>Object</code> arguments.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, replace the repeated arguments with a parameter array.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is always safe to suppress a warning from this rule; however, this design might cause usability issues.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182167.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182167.aspx</a></p>
Ù
-fxcop:TransparentMethodsMustNotCallNativeCode¬
fxcop'TransparentMethodsMustNotCallNativeCode:CA2149: Transparent methods must not call into native code"MAJOR*cs2CA2149:¿<h2>Cause</h2>
<p>
            A method calls a native function through a method stub such as P/Invoke.
</p>
<h2>Rule Description</h2>
<p>
            This rule fires on any transparent method which calls directly into native code, for example, through a P/Invoke. Violations of this rule lead to a <code>MethodAccessException</code> in the level 2 transparency model, and a full demand for <code>UnmanagedCode</code> in the level 1 transparency model.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, mark the method that calls the native code with the <code>SecurityCriticalAttribute</code> or <code>SecuritySafeCriticalAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ee155709.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ee155709.aspx</a></p>
≠<
+fxcop:OverrideGetHashCodeOnOverridingEquals˝;
fxcop%OverrideGetHashCodeOnOverridingEquals1CA2218: Override GetHashCode on overriding Equals"MAJOR*cs2CA2218:Ü;<h2>Cause</h2>
<p>
            A public type overrides <code>Object.Equals</code> but does not override <code>Object.GetHashCode</code>.
</p>
<h2>Rule Description</h2>
<p>


                <code>GetHashCode</code>
               returns a value, based on the current instance, that is suited for hashing algorithms and data structures such as a hash table. Two objects that are the same type and are equal must return the same hash code to ensure that instances of the following types work correctly:
            <ul>
              <li>

                  <code>HashTable</code>

              </li>
              <li>


                    <code>System.Collections.SortedList</code>


              </li>
              <li>

                  Dictionary

              </li>
              <li>

                  SortDictionary

              </li>
              <li>

                  SortList

              </li>
              <li>

                  HybredDictionary

              </li>
              <li>


                    <code>System.Collections.Specialized.ListDictionary</code>


              </li>
              <li>


                    <code>System.Collections.Specialized.OrderedDictionary</code>


              </li>
              <li>
                Types that implement IEqualityComparer
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, provide an implementation of <code>GetHashCode</code>. For a pair of objects of the same type, you must ensure that the implementation returns the same value if your implementation of <code>Equals</code> returns <code>true</code> for the pair.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Class Example</h2>

<h3>Description</h3>
<p>
                The following example shows a class (reference type) that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    // Violates this rule    ¬†
    public¬†class Point
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†bool Equals(object obj)
        {
            if (obj == null)
                return¬†false;

            if (GetType() != obj.GetType())
                return¬†false;

            Point point = (Point)obj;

            if (_X != point.X)
                return¬†false;

            return _Y == point.Y;
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                The following example fixes the violation by overriding GetHashCode.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    public¬†struct Point : IEquatable&lt;Point&gt;
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†int GetHashCode()
        {
            return _X ^ _Y;
        }

        public¬†override¬†bool Equals(object obj)
        {
            if (!(obj is Point))
                return¬†false;

            return Equals((Point)obj);
        }

        public¬†bool Equals(Point other)
        {
            if (_X != other._X)
                return¬†false;

            return _Y == other._Y;
        }

        public¬†static¬†bool¬†operator ==(Point point1, Point point2)
        {
            return point1.Equals(point2);
        }

        public¬†static¬†bool¬†operator !=(Point point1, Point point2)
        {
            return !point1.Equals(point2);
        }
    }
}
</pre>





</p>
<h2>Structure Example</h2>

<h3>Description</h3>
<p>
                The following example shows a structure (value type) that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    // Violates this rule    ¬†
    public¬†struct Point : IEquatable&lt;Point&gt;
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†bool Equals(object obj)
        {
            if (!(obj is Point))
                return¬†false;

            return Equals((Point)obj);
        }

        public¬†bool Equals(Point other)
        {
            if (_X != other._X)
                return¬†false;

            return _Y == other._Y;
        }

        public¬†static¬†bool¬†operator ==(Point point1, Point point2)
        {
            return point1.Equals(point2);
        }

        public¬†static¬†bool¬†operator !=(Point point1, Point point2)
        {
            return !point1.Equals(point2);
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                The following example fixes the violation by overriding GetHashCode.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    public¬†struct Point : IEquatable&lt;Point&gt;
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†int GetHashCode()
        {
            return _X ^ _Y;
        }

        public¬†override¬†bool Equals(object obj)
        {
            if (!(obj is Point))
                return¬†false;

            return Equals((Point)obj);
        }

        public¬†bool Equals(Point other)
        {
            if (_X != other._X)
                return¬†false;

            return _Y == other._Y;
        }

        public¬†static¬†bool¬†operator ==(Point point1, Point point2)
        {
            return point1.Equals(point2);
        }

        public¬†static¬†bool¬†operator !=(Point point1, Point point2)
        {
            return !point1.Equals(point2);
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes'>DoNotOverloadOperatorEqualsOnReferenceTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorOverloadsHaveNamedAlternates'>OperatorOverloadsHaveNamedAlternates</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorsShouldHaveSymmetricalOverloads'>OperatorsShouldHaveSymmetricalOverloads</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideEqualsOnOverloadingOperatorEquals'>OverrideEqualsOnOverloadingOperatorEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals'>OverloadOperatorEqualsOnOverridingValueTypeEquals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182358.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182358.aspx</a></p>
Ç
.fxcop:AptcaTypesShouldOnlyExtendAptcaBaseTypesœ
fxcop(AptcaTypesShouldOnlyExtendAptcaBaseTypes7CA2117: APTCA types should only extend APTCA base types"MAJOR*cs2CA2117:œ<h2>Cause</h2>
<p>
            A public or protected type in an assembly with the <code>System.Security.AllowPartiallyTrustedCallersAttribute</code> attribute inherits from a type declared in an assembly that does not have the attribute.
</p>
<h2>Rule Description</h2>
<p>
            By default, public or protected types in assemblies with strong names are implicitly protected by an Inheritance Demands for full trust. Strong-named assemblies marked with the <code>AllowPartiallyTrustedCallersAttribute</code> (APTCA) attribute do not have this protection. The attribute disables the inheritance demand. This makes exposed types declared in the assembly inheritable by types that do not have full trust.
            When the APTCA attribute is present on a fully trusted assembly, and a type in the assembly inherits from a type that does not allow partially trusted callers, a security exploit is possible. If two types T1 and T2 meet the following conditions, malicious callers can use the type T1 to bypass the implicit full trust inheritance demand that protects T2:
            <ul>
              <li>

                  T1 is a public type declared in a fully trusted assembly that has the APTCA attribute.
              </li>
              <li>

                  T1 inherits from a type T2 outside its assembly.
              </li>
              <li>

                  T2's assembly does not have the APTCA attribute and, therefore, should not be inheritable by types in partially trusted assemblies.
              </li>
            </ul>
            A partially trusted type X can inherit from T1, which gives it access to inherited members declared in T2. Because T2 does not have the APTCA attribute, its immediate derived type (T1) must satisfy an inheritance demand for full trust; T1 has full trust and therefore satisfies this check. The security risk is because X does not participate in satisfying the inheritance demand that protects T2 from untrusted subclassing. For this reason, types with the APTCA attribute must not extend types that do not have the attribute.
            Another security issue, and perhaps a more common one, is that the derived type (T1) can, through programmer error, expose protected members from the type that requires full trust (T2). When this occurs, untrusted callers gain access to information that should be available only to fully trusted types.
</p>
<h2>How to Fix Violations</h2>
<p>
            If the type reported by the violation is in an assembly that does not require the APTCA attribute, remove it.
            If the APTCA attribute is required, add an inheritance demand for full trust to the type. This protects against inheritance by untrusted types.
            It is possible to fix a violation by adding the APTCA attribute to the assemblies of the base types reported by the violation. Do not do this without first conducting an intensive security review of all code in the assemblies and all code that depends on the assemblies.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            To safely suppress a warning from this rule, you must ensure that protected members exposed by your type do not directly or indirectly allow untrusted callers to access sensitive information, operations, or resources that can be used in a destructive manner.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AptcaMethodsShouldOnlyCallAptcaMethods'>AptcaMethodsShouldOnlyCallAptcaMethods</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182298.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182298.aspx</a></p>
¡
&fxcop:DefaultParametersShouldNotBeUsedñ
fxcop DefaultParametersShouldNotBeUsed-CA1026: Default parameters should not be used"MAJOR*cs2CA1026:®<h2>Cause</h2>
<p>
            An externally visible type contains an externally visible method that uses a default parameter.
</p>
<h2>Rule Description</h2>
<p>
            Methods that use default parameters are allowed under the Common Language Specification (CLS); however, the CLS allows compilers to ignore the values that are assigned to these parameters. Code that is written for compilers that ignore default parameter values must explicitly provide arguments for each default parameter. To maintain the behavior that you want across programming languages, methods that use default parameters should be replaced with method overloads that provide the default parameters.
            The compiler ignores the values of default parameters for Managed Extension for C++ when it accesses managed code. The Visual Basic compiler supports methods that have default parameters that use the <code>Optional (Visual Basic)</code> keyword.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, replace the method that uses default parameters with method overloads that supply the default parameters.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:ReplaceRepetitiveArgumentsWithParamsArray'>ReplaceRepetitiveArgumentsWithParamsArray</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182135.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182135.aspx</a></p>
–
1fxcop:AttributeStringLiteralsShouldParseCorrectlyö
fxcop+AttributeStringLiteralsShouldParseCorrectly8CA2243: Attribute string literals should parse correctly"MAJOR*cs2CA2243:ñ<h2>Cause</h2>
<p>
            An attribute's string literal parameter does not parse correctly for a URL, GUID, or Version.
</p>
<h2>Rule Description</h2>
<p>
            Since attributes are derived from <code>System.Attribute</code>, and attributes are used at compile time, only constant values can be passed to their constructors. Attribute parameters that must represent URLs, GUIDs and Versions cannot be typed as <code>System.Uri</code>, <code>System.Guid</code>, and <code>System.Version</code>, because these types cannot be represented as constants. Instead, they must be represented by strings.
            Because the parameter is typed as a string, it is possible that an incorrectly formatted parameter could be passed at compile time.
            This rule uses a naming heuristic to find parameters that represent a uniform resource identifier (URI), a Globally Unique Identifier (GUID) or a Version and verifies that the passed value is correct.
</p>
<h2>How to Fix Violations</h2>
<p>
            Change the parameter string to a correctly formed URL, GUID, or Version.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the parameter does not represent a URL, GUID, or Version.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264490.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264490.aspx</a></p>
√

,fxcop:FinalizersShouldCallBaseClassFinalizerí

fxcop&FinalizersShouldCallBaseClassFinalizer3CA2220: Finalizers should call base class finalizer"MAJOR*cs2CA2220:ò	<h2>Cause</h2>
<p>
            A type that overrides <code>Object.Finalize</code> does not call the <code>Finalize</code> method in its base class.
</p>
<h2>Rule Description</h2>
<p>
            Finalization must be propagated through the inheritance hierarchy. To ensure this, types must call their base class <code>Finalize</code> method from within their own <code>Finalize</code> method. The C# compiler adds the call to the base class finalizer automatically.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call the base type's <code>Finalize</code> method from your <code>Finalize</code> method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Some compilers that target the common language runtime insert a call to the base type's finalizer into the Microsoft intermediate language (MSIL). If a warning from this rule is reported, your compiler does not insert the call, and you must add it to your code.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182341.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182341.aspx</a></p>
·$
*fxcop:DefineAccessorsForAttributeArguments≤$
fxcop$DefineAccessorsForAttributeArguments0CA1019: Define accessors for attribute arguments"MAJOR*cs2CA1019:Ω#<h2>Cause</h2>
<p>
            In its constructor, an attribute defines arguments that do not have corresponding properties.
</p>
<h2>Rule Description</h2>
<p>
            Attributes can define mandatory arguments that must be specified when you apply the attribute to a target. These are also known as positional arguments because they are supplied to attribute constructors as positional parameters. For every mandatory argument, the attribute should also provide a corresponding read-only property so that the value of the argument can be retrieved at execution time. This rule checks that for each constructor parameter, you have defined the corresponding property.
            Attributes can also define optional arguments, which are also known as named arguments. These arguments are supplied to attribute constructors by name and should have a corresponding read/write property.
            For mandatory and optional arguments, the corresponding properties and constructor parameters should use the same name but different casing. Properties use Pascal casing, and parameters use camel casing.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add a read-only property for each constructor parameter that does not have one.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if you do not want the value of the mandatory argument to be retrievable.
</p>
<h2>Custom Attributes Example</h2>

<h3>Description</h3>
<p>
                The following example shows two attributes that define a mandatory (positional) parameter. The first implementation of the attribute is incorrectly defined. The second implementation is correct.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace DesignLibrary
{
// Violates rule: DefineAccessorsForAttributeArguments.

   [AttributeUsage(AttributeTargets.All)]
   public¬†sealed¬†class BadCustomAttribute :Attribute
   {
      string data;

      // Missing the property that corresponds to ¬†
      // the someStringData parameter.¬†

      public BadCustomAttribute(string someStringData)
      {
         data = someStringData;
      }
   }

// Satisfies rule: Attributes should have accessors for all arguments.

   [AttributeUsage(AttributeTargets.All)]
   public¬†sealed¬†class GoodCustomAttribute :Attribute
   {
      string data;

      public GoodCustomAttribute(string someStringData)
      {
         data = someStringData;
      }
      //The constructor parameter and property¬†
      //name are the same except for case.¬†

      public¬†string SomeStringData
      {
         get
         {
            return data;
         }
      }
   }
}
</pre>





</p>
<h2>Positional and Named Arguments</h2>

<h3>Description</h3>
<p>
                Positional and named arguments make to clear to consumers of your library which arguments are mandatory for the attribute and which arguments are optional.
                The following example shows an implementation of an attribute that has both positional and named arguments.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace DesignLibrary
{
    [AttributeUsage(AttributeTargets.All)]
    public¬†sealed¬†class GoodCustomAttribute : Attribute
    {
        string mandatory;
        string optional;

        public GoodCustomAttribute(string mandatoryData)
        {
            mandatory = mandatoryData;
        }

        public¬†string MandatoryData
        {
            get { return mandatory; }
        }

        public¬†string OptionalData
        {
            get { return optional; }
            set { optional = value; }
        }
    }
}
</pre>





</p>
<h3>Comments</h3>
<p>
                The following example shows how to apply the custom attribute to two properties.
</p>
<h3>Code</h3>
<p>










            <pre>
[GoodCustomAttribute("ThisIsSomeMandatoryData", OptionalData = "ThisIsSomeOptionalData")]
public¬†string MyProperty
{
    get { return myProperty; }
    set { myProperty = value; }
}

[GoodCustomAttribute("ThisIsSomeMoreMandatoryData")]
public¬†string MyOtherProperty
{
    get { return myOtherProperty; }
    set { myOtherProperty = value; }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidUnsealedAttributes'>AvoidUnsealedAttributes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182136.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182136.aspx</a></p>
›2
/fxcop:OverrideEqualsOnOverloadingOperatorEquals©2
fxcop)OverrideEqualsOnOverloadingOperatorEquals6CA2224: Override equals on overloading operator equals"MAJOR*cs2CA2224:©1<h2>Cause</h2>
<p>
            A public type implements the equality operator, but does not override <code>Object.Equals</code>.
</p>
<h2>Rule Description</h2>
<p>
            The equality operator is intended to be a syntactically convenient way to access the functionality of the <code>Equals</code> method. If you implement the equality operator, its logic must be identical to that of <code>Equals</code>.
            The C# compiler issues a warning if your code violates this rule.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, you should either remove the implementation of the equality operator, or override <code>Equals</code> and have the two methods return the same values. If the equality operator does not introduce inconsistent behavior, you can fix the violation by providing an implementation of <code>Equals</code> that calls the <code>Equals</code> method in the base class.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the equality operator returns the same value as the inherited implementation of <code>Equals</code>. The Example section includes a type that could safely suppress a warning from this rule.
</p>
<h2>Examples of Inconsistent Equality Definitions</h2>

<h3>Description</h3>
<p>
                The following example shows a type with inconsistent definitions of equality. BadPoint changes the meaning of equality by providing a custom implementation of the equality operator, but does not override <code>Equals</code> so that it behaves identically.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace UsageLibrary
{
    public¬†class BadPoint
    {
        private¬†int x,y, id;
        private¬†static¬†int NextId;

        static BadPoint()
        {
            NextId = -1;
        }
        public BadPoint(int x, int y)
        {
            this.x = x;
            this.y = y;
            id = ++(BadPoint.NextId);
        }

        public¬†override¬†string ToString()
        {
            return String.Format("([{0}] {1},{2})",id,x,y);
        }

        public¬†int X {get {return x;}}

        public¬†int Y {get {return x;}}
        public¬†int Id {get {return id;}}

        public¬†override¬†int GetHashCode()
        {
            return id;
        }
        // Violates rule: OverrideEqualsOnOverridingOperatorEquals.¬†

        // BadPoint redefines the equality operator to ignore the id value.¬†
        // This is different from how the inherited implementation of ¬†
        // System.Object.Equals behaves for value types. ¬†
        // It is not safe to exclude the violation for this type. ¬†
        public¬†static¬†bool¬†operator== (BadPoint p1, BadPoint p2)
        {
            return ((p1.x == p2.x) &amp;&amp; (p1.y == p2.y));
        }
        // The C# compiler and rule OperatorsShouldHaveSymmetricalOverloads require this.¬†
        public¬†static¬†bool¬†operator!= (BadPoint p1, BadPoint p2)
        {
            return !(p1 == p2);
        }
    }
}
</pre>





</p>
<h2>Example</h2>

<h3>Description</h3>
<p>
                The following example shows a class (reference type) that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    // Violates this rule    ¬†
    public¬†class Point
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†int GetHashCode()
        {
            return _X ^ _Y;
        }

        public¬†static¬†bool¬†operator ==(Point point1, Point point2)
        {
            if (point1 == null || point2 == null)
                return¬†false;

            if (point1.GetType() != point2.GetType())
                return¬†false;

            if (point1._X != point2._X)
                return¬†false;

            return point1._Y == point2._Y;
        }

        public¬†static¬†bool¬†operator !=(Point point1, Point point2)
        {
            return !(point1 == point2);
        }
    }
}
</pre>





</p>
<h2>Structure Example</h2>

<h3>Description</h3>
<p>
                The following example shows a structure (value type) that violates this rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace Samples
{
    // Violates this rule    ¬†
    public¬†struct Point
    {
        private¬†readonly¬†int _X;
        private¬†readonly¬†int _Y;

        public Point(int x, int y)
        {
            _X = x;
            _Y = y;
        }

        public¬†int X
        {
            get { return _X; }
        }

        public¬†int Y
        {
            get { return _Y; }
        }

        public¬†override¬†int GetHashCode()
        {
            return _X ^ _Y;
        }

        public¬†static¬†bool¬†operator ==(Point point1, Point point2)
        {
            if (point1._X != point2._X)
                return¬†false;

            return point1._Y == point2._Y;
        }

        public¬†static¬†bool¬†operator !=(Point point1, Point point2)
        {
            return !(point1 == point2);
        }
    }
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes'>DoNotOverloadOperatorEqualsOnReferenceTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorOverloadsHaveNamedAlternates'>OperatorOverloadsHaveNamedAlternates</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorsShouldHaveSymmetricalOverloads'>OperatorsShouldHaveSymmetricalOverloads</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideGetHashCodeOnOverridingEquals'>OverrideGetHashCodeOnOverridingEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals'>OverloadOperatorEqualsOnOverridingValueTypeEquals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182357.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182357.aspx</a></p>
Ì
,fxcop:DoNotRaiseExceptionsInExceptionClausesº
fxcop&DoNotRaiseExceptionsInExceptionClauses4CA2219: Do not raise exceptions in exception clauses"MAJOR*cs2CA2219:¡<h2>Cause</h2>
<p>
            An exception is thrown from a <code>finally</code>, filter, or fault clause.
</p>
<h2>Rule Description</h2>
<p>
            When an exception is raised in an exception clause, it greatly increases the difficulty of debugging.
            When an exception is raised in a <code>finally</code> or fault clause, the new exception hides the active exception, if present. This makes the original error hard to detect and debug.
            When an exception is raised in a filter clause, the runtime silently catches the exception, and causes the filter to evaluate to false. There is no way to tell the difference between the filter evaluating to false and an exception being throw from a filter. This makes it hard to detect and debug errors in the filter's logic.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix this violation of this rule, do not explicitly raise an exception from a <code>finally</code>, filter, or fault clause.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning for this rule. There are no scenarios under which an exception raised in an exception clause provides a benefit to the executing code.
</p>
<h2>Related Rules</h2>
<p>


                CA1065: Do not raise exceptions in unexpected locations


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb386041.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386041.aspx</a></p>
ø

1fxcop:DoNotOverloadOperatorEqualsOnReferenceTypesâ

fxcop+DoNotOverloadOperatorEqualsOnReferenceTypes:CA1046: Do not overload operator equals on reference types"MAJOR*cs2CA1046:É	<h2>Cause</h2>
<p>
            A public or nested public reference type overloads the equality operator.
</p>
<h2>Rule Description</h2>
<p>
            For reference types, the default implementation of the equality operator is almost always correct. By default, two references are equal only if they point to the same object.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove the implementation of the equality operator.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the reference type behaves like a built-in value type. If it is meaningful to do addition or subtraction on instances of the type, it is probably correct to implement the equality operator and suppress the violation.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:OverloadOperatorEqualsOnOverloadingAddAndSubtract'>OverloadOperatorEqualsOnOverloadingAddAndSubtract</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182145.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182145.aspx</a></p>
∫
!fxcop:FinalizersShouldBeProtectedî
fxcopFinalizersShouldBeProtected&CA2221: Finalizers should be protected"MAJOR*cs2CA2221:≤<h2>Cause</h2>
<p>
            A public type implements a finalizer that does not specify family (protected) access.
</p>
<h2>Rule Description</h2>
<p>
            Finalizers must use the family access modifier. This rule is enforced by the C#, Visual Basic, and Visual C++ compilers.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the finalizer to be family-accessible.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182340.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182340.aspx</a></p>
˝	
!fxcop:NormalizeStringsToUppercase◊	
fxcopNormalizeStringsToUppercase&CA1308: Normalize strings to uppercase"MAJOR*cs2CA1308:ı<h2>Cause</h2>
<p>
            An operation normalizes a string to lowercase.
</p>
<h2>Rule Description</h2>
<p>
            Strings should be normalized to uppercase. A small group of characters, when they are converted to lowercase, cannot make a round trip. To make a round trip means to convert the characters from one locale to another locale that represents character data differently, and then to accurately retrieve the original characters from the converted characters.
</p>
<h2>How to Fix Violations</h2>
<p>
            Change operations that convert strings to lowercase so that the strings are converted to uppercase instead. For example, change String.ToLower(CultureInfo.InvariantCulture) to String.ToUpper(CultureInfo.InvariantCulture).
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning message when you are not making security decision based on the result (for example, when you are displaying it in the UI).
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb386042.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386042.aspx</a></p>
¶
fxcop:UsePreferredTermsä
fxcopUsePreferredTermsCA1726: Use preferred terms"MAJOR*cs2CA1726:Ω<h2>Cause</h2>
<p>
            The name of an externally visible identifier includes a term for which an alternative, preferred term exists. Alternatively, the name includes the term Flag or Flags.
</p>
<h2>Rule Description</h2>
<p>
            This rule parses an identifier into tokens. Each single token and each contiguous dual token combination is compared to terms that are built into the rule and in the Deprecated section of any custom dictionaries. The following table shows the terms that are built into the rule and their preferred alternatives.







                    Obsolete term


                    Preferred term




                    Arent


                    AreNot




                    Cancelled


                    Canceled




                    Cant


                    Cannot




                    ComPlus


                    EnterpriseServices




                    Couldnt


                    CouldNot




                    Didnt


                    DidNot




                    Doesnt


                    DoesNot




                    Dont


                    DoNot




                    Flag or Flags


                    There is no replacement term. Do not use.




                    Hadnt


                    HadNot




                    Hasn‚Äôt


                    HasNot




                    Havent


                    HaveNot




                    Indices


                    Indexes




                    Isnt


                    IsNot




                    LogIn


                    LogOn




                    LogOut


                    LogOff




                    Shouldnt


                    ShouldNot




                    SignOn


                    SignIn




                    SignOff


                    SignOut




                    Wasnt


                    WasNot




                    Werent


                    WereNot




                    Wont


                    WillNot




                    Wouldnt


                    WouldNot




                    Writeable


                    Writable




</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, replace the term with the preferred alternative term.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only if the name of the identifier is intentional and relates specifically to the original term instead of the preferred term.
</p>
<h2>Related Rules</h2>
<p>


                Naming Warnings


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182258.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182258.aspx</a></p>
§
.fxcop:GenericMethodsShouldProvideTypeParameterÒ
fxcop(GenericMethodsShouldProvideTypeParameter5CA1004: Generic methods should provide type parameter"MAJOR*cs2CA1004:Û<h2>Cause</h2>
<p>
            The parameter signature of an externally visible generic method does not contain types that correspond to all the type parameters of the method.
</p>
<h2>Rule Description</h2>
<p>
            Inference is how the type argument of a generic method is determined by the type of argument that is passed to the method, instead of by the explicit specification of the type argument. To enable inference, the parameter signature of a generic method must include a parameter that is of the same type as the type parameter for the method. In this case, the type argument does not have to be specified. When you use inference for all type parameters, the syntax for calling generic and nongeneric instance methods is identical. This simplifies the usability of generic methods.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the design so that the parameter signature contains the same type for each type parameter of the method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveParametersOnGenericTypes'>AvoidExcessiveParametersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CollectionsShouldImplementGenericInterface'>CollectionsShouldImplementGenericInterface</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareStaticMembersOnGenericTypes'>DoNotDeclareStaticMembersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotExposeGenericLists'>DoNotExposeGenericLists</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNestGenericTypesInMemberSignatures'>DoNotNestGenericTypesInMemberSignatures</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericEventHandlerInstances'>UseGenericEventHandlerInstances</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericsWhereAppropriate'>UseGenericsWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182150.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182150.aspx</a></p>
ú+
(fxcop:IdentifiersShouldHaveCorrectSuffixÔ*
fxcop"IdentifiersShouldHaveCorrectSuffix.CA1710: Identifiers should have correct suffix"MAJOR*cs2CA1710:˛)<h2>Cause</h2>
<p>
            An identifier does not have the correct suffix.
</p>
<h2>Rule Description</h2>
<p>
            By convention, the names of types that extend certain base types or that implement certain interfaces, or types derived from these types, have a suffix that is associated with the base type or interface.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
            The following table lists the base types and interfaces that have associated suffixes.







                    Base type/Interface


                    Suffix






                        <code>System.Attribute</code>




                    Attribute






                        <code>System.EventArgs</code>




                    EventArgs






                        <code>System.Exception</code>




                    Exception






                        <code>System.Collections.ICollection</code>




                    Collection






                        <code>System.Collections.IDictionary</code>




                    Dictionary






                        <code>System.Collections.IEnumerable</code>




                    Collection






                        <code>System.Collections.Queue</code>




                    Collection or Queue






                        <code>System.Collections.Stack</code>




                    Collection or Stack






                        <code>System.Collections.Generic.ICollection&lt;T&gt;</code>




                    Collection






                        System.Collections.Generic.IDictionary&lt;TKey, TValue&gt;




                    Dictionary






                        <code>System.Data.DataSet</code>




                    DataSet






                        <code>System.Data.DataTable</code>




                    Collection or DataTable






                        <code>System.IO.Stream</code>




                    Stream






                        <code>System.Security.IPermission</code>




                    Permission






                        <code>System.Security.Policy.IMembershipCondition</code>




                    Condition




                    An event-handler delegate.


                    EventHandler




            Types that implement <code>ICollection</code> and are a generalized type of data structure, such as a dictionary, stack, or queue, are allowed names that provide meaningful information about the intended usage of the type.
            Types that implement <code>ICollection</code> and are a collection of specific items have names that end with the word 'Collection'. For example, a collection of <code>Queue</code> objects would have the name 'QueueCollection'. The 'Collection' suffix signifies that the members of the collection can be enumerated by using the <code>foreach</code> (<code>For Each</code> in Visual Basic) statement.
            Types that implement <code>IDictionary</code> have names that end with the word 'Dictionary' even if the type also implements <code>IEnumerable</code> or <code>ICollection</code>. The 'Collection' and 'Dictionary' suffix naming conventions enable users to distinguish between the following two enumeration patterns.
            Types with the 'Collection' suffix follow this enumeration pattern.









            <pre>
    foreach(SomeType x in SomeCollection) { }
</pre>




Types with the 'Dictionary' suffix follow this enumeration pattern.









            <pre>
    foreach(SomeType x in SomeDictionary.Values) { }
</pre>




A <code>DataSet</code> object consists of a collection of <code>DataTable</code> objects, which consist of collections of <code>System.Data.DataColumn</code> and <code>System.Data.DataRow</code> objects, among others. These collections implement <code>ICollection</code> through the base <code>System.Data.InternalDataCollectionBase</code> class.






                How to Fix Violations





</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning to use the 'Collection' suffix if the type is a generalized data structure that might be extended or that will hold an arbitrary set of diverse items. In this case, a name that provides meaningful information about the implementation, performance, or other characteristics of the data structure might make sense (for example, BinaryTree). In cases where the type represents a collection of a specific type (for example, StringCollection), do not suppress a warning from this rule because the suffix indicates that the type can be enumerated by using a <code>foreach</code> statement.
            For other suffixes, do not suppress a warning from this rule. The suffix allows the intended usage to be evident from the type name.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldNotHaveIncorrectSuffix'>IdentifiersShouldNotHaveIncorrectSuffix</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182244.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182244.aspx</a></p>
ª
fxcop:SetLocaleForDataTypesõ
fxcopSetLocaleForDataTypes!CA1306: Set locale for data types"MAJOR*cs2CA1306:ƒ<h2>Cause</h2>
<p>
            A method or constructor created one or more <code>System.Data.DataTable</code> or <code>System.Data.DataSet</code> instances and did not explicitly set the locale property (<code>DataTable.Locale</code> or <code>DataSet.Locale</code>).
</p>
<h2>Rule Description</h2>
<p>
            The locale determines culture-specific presentation elements for data, such as formatting used for numeric values, currency symbols, and sort order. When you create a <code>DataTable</code> or <code>DataSet</code>, you should set the locale explicitly. By default, the locale for these types is the current culture. For data that is stored in a database or file and is shared globally, the locale should ordinarily be set to the invariant culture (<code>CultureInfo.InvariantCulture</code>). When data is shared across cultures, using the default locale can cause the contents of the <code>DataTable</code> or <code>DataSet</code> to be presented or interpreted incorrectly.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, explicitly set the locale for the <code>DataTable</code> or <code>DataSet</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the library or application is for a limited local audience, the data is not shared, or the default setting yields the desired behavior in all supported scenarios.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182188.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182188.aspx</a></p>
æ
fxcop:UseEventsWhereAppropriateö
fxcopUseEventsWhereAppropriate$CA1030: Use events where appropriate"MAJOR*cs2CA1030:º<h2>Cause</h2>
<p>
            A public, protected, or private method name begins with one of the following:
            <ul>
              <li>
                AddOn
              </li>
              <li>
                RemoveOn
              </li>
              <li>
                Fire
              </li>
              <li>
                Raise
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            This rule detects methods that have names that ordinarily would be used for events. Events follow the Observer or Publish-Subscribe design pattern; they are used when a state change in one object must be communicated to other objects. If a method gets called in response to a clearly defined state change, the method should be invoked by an event handler. Objects that call the method should raise events instead of calling the method directly.
            Some common examples of events are found in user interface applications where a user action such as clicking a button causes a segment of code to execute. The .NET Framework event model is not limited to user interfaces; it should be used anywhere you must communicate state changes to one or more objects.
</p>
<h2>How to Fix Violations</h2>
<p>
            If the method is called when the state of an object changes, you should consider changing the design to use the .NET Framework event model.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if the method does not work with the .NET Framework event model.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182177.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182177.aspx</a></p>
Ä
 fxcop:UseOrdinalStringComparison€
fxcopUseOrdinalStringComparison$CA1309: Use ordinal StringComparison"MAJOR*cs2CA1309:¸<h2>Cause</h2>
<p>
            A string comparison operation that is nonlinguistic does not set the <code>StringComparison</code> parameter to either Ordinal or OrdinalIgnoreCase.
</p>
<h2>Rule Description</h2>
<p>
            Many string operations, most important the String.Compare and String.Equals methods, now provide an overload that accepts a StringComparision enumeration value as a parameter.
            When you specify either StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, the string comparison will be nonlinguistic. That is, the features that are specific to the natural language are ignored when comparison decisions are made. This means the decisions are based on simple byte comparisons and ignore casing or equivalence tables that are parameterized by culture. As a result, by explicitly setting the parameter to either the StringComparison.Ordinal or StringComparison.OrdinalIgnoreCase, your code often gains speed, increases correctness, and becomes more reliable.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the string comparison method to an overload that accepts the <code>System.StringComparison</code> enumeration as a parameter, and specify either Ordinal or OrdinalIgnoreCase. For example, change String.Compare(str1, str2) to String.Compare(str1, str2, StringComparison.Ordinal).
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the library or application is intended for a limited local audience or when the semantics of the current culture should be used.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb385972.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb385972.aspx</a></p>
¸
2fxcop:InterfaceMethodsShouldBeCallableByChildTypes≈
fxcop,InterfaceMethodsShouldBeCallableByChildTypes;CA1033: Interface methods should be callable by child types"MAJOR*cs2CA1033:Ω<h2>Cause</h2>
<p>
            An unsealed externally visible type provides an explicit method implementation of a public interface and does not provide an alternative externally visible method that has the same name.
</p>
<h2>Rule Description</h2>
<p>
            Consider a base type that explicitly implements a public interface method. A type that derives from the base type can access the inherited interface method only through a reference to the current instance (<code>this</code> in C#) that is cast to the interface. If the derived type re-implements (explicitly) the inherited interface method, the base implementation can no longer be accessed. The call through the current instance reference will invoke the derived implementation; this causes recursion and an eventual stack overflow.
            This rule does not report a violation for an explicit implementation of <code>IDisposable.Dispose</code> when an externally visible Close() or System.IDisposable.Dispose(Boolean) method is provided.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement a new method that exposes the same functionality and is visible to derived types or change to a nonexplicit implementation. If a breaking change is acceptable, an alternative is to make the type sealed.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if an externally visible method is provided that has the same functionality but a different name than the explicitly implemented method.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182153.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182153.aspx</a></p>
∫
%fxcop:SecureSerializationConstructorsê
fxcopSecureSerializationConstructors)CA2120: Secure serialization constructors"MAJOR*cs2CA2120:ß<h2>Cause</h2>
<p>
            The type implements the <code>System.Runtime.Serialization.ISerializable</code> interface, is not a delegate or interface, and is declared in an assembly that allows partially trusted callers. The type has a constructor that takes a <code>System.Runtime.Serialization.SerializationInfo</code> object and a <code>System.Runtime.Serialization.StreamingContext</code> object (the signature of the serialization constructor). This constructor is not secured by a security check, but one or more of the regular constructors in the type is secured.
</p>
<h2>Rule Description</h2>
<p>
            This rule is relevant for types that support custom serialization. A type supports custom serialization if it implements the <code>System.Runtime.Serialization.ISerializable</code> interface. The serialization constructor is required and is used to de-serialize, or re-create objects that have been serialized using the <code>ISerializable.GetObjectData</code> method. Because the serialization constructor allocates and initializes objects, security checks that are present on regular constructors must also be present on the serialization constructor. If you violate this rule, callers that could not otherwise create an instance could use the serialization constructor to do this.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, protect the serialization constructor with security demands that are identical to those protecting other constructors.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a violation of the rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkISerializableTypesWithSerializable'>MarkISerializableTypesWithSerializable</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182317.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182317.aspx</a></p>
¡
fxcop:SpecifyStringComparisonü
fxcopSpecifyStringComparison CA1307: Specify StringComparison"MAJOR*cs2CA1307:«
<h2>Cause</h2>
<p>
            A string comparison operation uses a method overload that does not set a <code>StringComparison</code> parameter.
</p>
<h2>Rule Description</h2>
<p>
            Many string operations, most important the <code>Compare</code> and <code>Equals</code> methods, provide an overload that accepts a <code>StringComparison</code> enumeration value as a parameter.
            Whenever an overload exists that takes a <code>StringComparison</code> parameter, it should be used instead of an overload that does not take this parameter. By explicitly setting this parameter, your code is often made clearer and easier to maintain.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change string comparison methods to overloads that accept the <code>StringComparison</code> enumeration as a parameter. For example: change String.Compare(str1, str2) to String.Compare(str1, str2, StringComparison.Ordinal).
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when the library or application is intended for a limited local audience and will therefore not be localized.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb386080.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb386080.aspx</a></p>
Ï
$fxcop:MarkAssembliesWithClsCompliant√
fxcopMarkAssembliesWithClsCompliant2CA1014: Mark assemblies with CLSCompliantAttribute"MAJOR*cs2CA1014:“<h2>Cause</h2>
<p>
            An assembly does not have the <code>System.CLSCompliantAttribute</code> attribute applied to it.
</p>
<h2>Rule Description</h2>
<p>
            The Common Language Specification (CLS) defines naming restrictions, data types, and rules to which assemblies must conform if they will be used across programming languages. Good design dictates that all assemblies explicitly indicate CLS compliance with <code>CLSCompliantAttribute</code>. If the attribute is not present on an assembly, the assembly is not compliant.
            It is possible for a CLS-compliant assembly to contain types or type members that are not compliant.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add the attribute to the assembly. Instead of marking the whole assembly as noncompliant, you should determine which type or type members are not compliant and mark these elements as such. If possible, you should provide a CLS-compliant alternative for noncompliant members so that the widest possible audience can access all the functionality of your assembly.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. If you do not want the assembly to be compliant, apply the attribute and set its value to <code>false</code>.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182156.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182156.aspx</a></p>
«
(fxcop:TransparentMethodsMustBeVerifiableö
fxcop"TransparentMethodsMustBeVerifiable;CA2137: Transparent methods must contain only verifiable IL"MAJOR*cs2CA2137:ú
<h2>Cause</h2>
<p>
            A method contains unverifiable code or returns a type by reference.
</p>
<h2>Rule Description</h2>
<p>
            This rule fires on attempts by security transparent code to execute unverifiable MSIL (Microsoft Intermediate Language). However, the rule does not contain a full IL verifier, and instead uses heuristics to catch most violations of MSIL verification.
            To be certain that your code contains only verifiable MSIL, run <code>Peverify.exe (PEVerify Tool)</code> on your assembly. Run PEVerify with the /transparent option which limits the output to only unverifiable transparent methods which would cause an error. If the /transparent option is not used, PEVerify also verifies critical methods that are allowed to contain unverifiable code.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, mark the method with the <code>SecurityCriticalAttribute</code> or <code>SecuritySafeCriticalAttribute</code> attribute, or remove the unverifiable code.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd983954.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd983954.aspx</a></p>
ª
fxcop:SpecifyIFormatProviderö
fxcopSpecifyIFormatProviderCA1305: Specify IFormatProvider"MAJOR*cs2CA1305:ƒ<h2>Cause</h2>
<p>
            A method or constructor calls one or more members that have overloads that accept a <code>System.IFormatProvider</code> parameter, and the method or constructor does not call the overload that takes the <code>IFormatProvider</code> parameter. This rule ignores calls to .NET Framework methods that are documented as ignoring the <code>IFormatProvider</code> parameter and additionally the following methods:
            <ul>
              <li>


                    <code>Activator.CreateInstance</code>


              </li>
              <li>


                    <code>ResourceManager.GetObject</code>


              </li>
              <li>


                    <code>ResourceManager.GetString</code>


              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            When a <code>System.Globalization.CultureInfo</code> or <code>IFormatProvider</code> object is not supplied, the default value that is supplied by the overloaded member might not have the effect that you want in all locales. Also, .NET Framework members choose default culture and formatting based on assumptions that might not be correct for your code. To make sure that the code works as expected for your scenarios, you should supply culture-specific information according to the following guidelines:
            <ul>
              <li>
                If the value will be displayed to the user, use the current culture. See <code>CultureInfo.CurrentCulture</code>.
              </li>
              <li>
                If the value will be stored and accessed by software (persisted to a file or database), use the invariant culture. See <code>CultureInfo.InvariantCulture</code>.
              </li>
              <li>
                If you do not know the destination of the value, have the data consumer or provider specify the culture.
              </li>
            </ul>
            Note that <code>CultureInfo.CurrentUICulture</code> is used only to retrieve localized resources by using an instance of the <code>System.Resources.ResourceManager</code> class.
            Even if the default behavior of the overloaded member is appropriate for your needs, it is better to explicitly call the culture-specific overload so that your code is self-documenting and more easily maintained.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, use the overload that takes a <code>CultureInfo</code> or <code>IFormatProvider</code> and specify the argument according to the guidelines that were listed earlier.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule when it is certain that the default culture/format provider is the correct choice and where code maintainability is not an important development priority.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:SpecifyCultureInfo'>SpecifyCultureInfo</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182190.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182190.aspx</a></p>
Ó
0fxcop:ProvideCorrectArgumentsToFormattingMethodsπ
fxcop*ProvideCorrectArgumentsToFormattingMethods7CA2241: Provide correct arguments to formatting methods"MAJOR*cs2CA2241:∑
<h2>Cause</h2>
<p>
            The format string argument passed to a method such as <code>WriteLine</code>,  <code>Write</code>, or  <code>String.Format</code> does not contain a format item that corresponds to each object argument, or vice versa.
</p>
<h2>Rule Description</h2>
<p>
            The arguments to methods such as <code>WriteLine</code>, <code>Write</code>, and <code>Format</code> consist of a format string followed by several <code>System.Object</code> instances. The format string consists of text and embedded format items of the form, {index[,alignment][:formatString]}. 'index' is a zero-based integer that indicates which of the objects to format. If an object does not have a corresponding index in the format string, the object is ignored. If the object specified by 'index' does not exist, a <code>System.FormatException</code> is thrown at runtime.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, provide a format item for each object argument and provide an object argument for each format item.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182361.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182361.aspx</a></p>
¡
#fxcop:UsePropertiesWhereAppropriateô
fxcopUsePropertiesWhereAppropriate(CA1024: Use properties where appropriate"MAJOR*cs2CA1024:≥<h2>Cause</h2>
<p>
            A public or protected method has a name that starts with Get, takes no parameters, and returns a value that is not an array.
</p>
<h2>Rule Description</h2>
<p>
            In most cases, properties represent data and methods perform actions. Properties are accessed like fields, which makes them easier to use. A method is a good candidate to become a property if one of these conditions is present:
            <ul>
              <li>
                Takes no arguments and returns the state information of an object.
              </li>
              <li>
                Accepts a single argument to set some part of the state of an object.
              </li>
            </ul>
            Properties should behave as if they are fields; if the method cannot, it should not be changed to a property. Methods are better than properties in the following situations:
            <ul>
              <li>
                The method performs a time-consuming operation. The method is perceivably slower than the time that is required to set or get the value of a field.
              </li>
              <li>
                The method performs a conversion. Accessing a field does not return a converted version of the data that it stores.
              </li>
              <li>
                The Get method has an observable side effect. Retrieving the value of a field does not produce any side effects.
              </li>
              <li>
                The order of execution is important. Setting the value of a field does not rely on the occurrence of other operations.
              </li>
              <li>
                Calling the method two times in succession creates different results.
              </li>
              <li>
                The method is static but returns an object that can be changed by the caller. Retrieving the value of a field does not allow the caller to change the data that is stored by the field.
              </li>
              <li>
                The method returns an array.
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the method to a property.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if the method meets at least one of the previously listed criteria.
</p>
<h2>Controlling Property Expansion in the Debugger</h2>
<p>
            One reason programmers avoid using a property is because they do not want the debugger to auto-expand it. For example, the property might involve allocating a large object or calling a P/Invoke, but it might not actually have any observable side effects.
            You can prevent the debugger from auto-expanding properties by applying <code>System.Diagnostics.DebuggerBrowsableAttribute</code>. The following example shows this attribute being applied to an instance property.









            <pre>
using System;
using System.Diagnostics;

namespace Microsoft.Samples
{
¬†¬†¬†¬†public¬†class TestClass
¬†¬†¬†¬†{
¬†¬†¬†¬†¬†¬†¬†¬†// [...]

¬†¬†¬†¬†¬†¬†¬†¬†[DebuggerBrowsable(DebuggerBrowsableState.Never)]
¬†¬†¬†¬†¬†¬†¬†¬†public LargeObject LargeObject
¬†¬†¬†¬†¬†¬†¬†¬†{
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†get
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†{
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†// Allocate large object
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†// [...]

¬†¬†¬†¬†¬†¬†¬†¬†}
¬†¬†¬†¬†}
}
</pre>











                Example





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182181.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182181.aspx</a></p>
‹
.fxcop:ReviewSuppressUnmanagedCodeSecurityUsage©
fxcop(ReviewSuppressUnmanagedCodeSecurityUsage;CA2118: Review SuppressUnmanagedCodeSecurityAttribute usage"MAJOR*cs2CA2118:•<h2>Cause</h2>
<p>
            A public or protected type or member has the <code>System.Security.SuppressUnmanagedCodeSecurityAttribute</code> attribute.
</p>
<h2>Rule Description</h2>
<p>


                <code>SuppressUnmanagedCodeSecurityAttribute</code>
               changes the default security system behavior for members that execute unmanaged code using COM interop or platform invocation. Generally, the system makes a <code>Data and Modeling in the .NET Framework</code> for unmanaged code permission. This demand occurs at run time for every invocation of the member, and checks every caller in the call stack for permission. When the attribute is present, the system makes a Link Demands for the permission: the permissions of the immediate caller are checked when the caller is JIT-compiled.
            This attribute is primarily used to increase performance; however, the performance gains come with significant security risks. If you place the attribute on public members that call native methods, the callers in the call stack (other than the immediate caller) do not need unmanaged code permission to execute unmanaged code. Depending on the public member's actions and input handling, it might allow untrustworthy callers to access functionality normally restricted to trustworthy code.
            The .NET Framework relies on security checks to prevent callers from gaining direct access to the current process's address space. Because this attribute bypasses normal security, your code poses a serious threat if it can be used to read or write to the process's memory. Note that the risk is not limited to methods that intentionally provide access to process memory; it is also present in any scenario where malicious code can achieve access by any means, for example, by providing surprising, malformed, or invalid input.
            The default security policy does not grant unmanaged code permission to an assembly unless it is executing from the local computer or is a member of one of the following groups:
            <ul>
              <li>
                My Computer Zone Code Group
              </li>
              <li>
                Microsoft Strong Name Code Group
              </li>
              <li>
                ECMA Strong Name Code Group
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            Carefully review your code to ensure that this attribute is absolutely necessary. If you are unfamiliar with managed code security, or do not understand the security implications of using this attribute, remove it from your code. If the attribute is required, you must ensure that callers cannot use your code maliciously. If your code does not have permission to execute unmanaged code, this attribute has no effect and should be removed.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            To safely suppress a warning from this rule, you must ensure that your code does not provide callers access to native operations or resources that can be used in a destructive manner.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182311.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182311.aspx</a></p>
ﬁ#
)fxcop:IdentifiersShouldBeSpelledCorrectly∞#
fxcop#IdentifiersShouldBeSpelledCorrectly/CA1704: Identifiers should be spelled correctly"MAJOR*cs2CA1704:Ω"<h2>Cause</h2>
<p>
            The name of an identifier contains one or more words that are not recognized by the Microsoft spelling checker library. This rule does not check constructors or special-named members such as get and set property accessors.
</p>
<h2>Rule Description</h2>
<p>
            This rule parses the identifier into tokens and checks the spelling of each token. The parsing algorithm performs the following transformations:
            <ul>
              <li>
                Uppercase letters start a new token. For example, MyNameIsJoe tokenizes to "My", "Name", "Is", "Joe".
              </li>
              <li>
                For multiple uppercase letters, the last uppercase letter starts a new token. For example, GUIEditor tokenizes to "GUI", "Editor".
              </li>
              <li>
                Leading and trailing apostrophes are removed. For example, 'sender' tokenizes to "sender".
              </li>
              <li>
                Underscores signify the end of a token and are removed. For example, Hello_world tokenizes to "Hello", "world".
              </li>
              <li>
                Embedded ampersands are removed. For example, for&amp;mat tokenizes to "format".
              </li>
            </ul>
            By default, the English (en) version of the spelling checker is used. No other language dictionaries are currently available.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, correct the spelling of the word or add the word to a custom dictionary that is named CustomDictionary.xml. Place the dictionary in the installation directory of the tool, the project directory, or in the directory that is associated with the tool under the profile of the user (%USERPROFILE%\Application Data\...). To learn how to add the custom dictionary to a project in Visual Studio, see How to: Customize the Code Analysis Dictionary
            <ul>
              <li>
                Add words that should not cause a violation under the Dictionary/Words/Recognized path.
              </li>
              <li>
                Add words that should cause a violation under the Dictionary/Words/Unrecognized path.
              </li>
              <li>
                Add words that should be flagged as obsolete under the Dictionary/Words/Deprecated path. See the related rule topic <a href='/coding_rules#rule_key=fxcop:UsePreferredTerms'>UsePreferredTerms</a>for more information.
              </li>
              <li>
                Add exceptions to the acronym casing rules to the Dictionary/Acronyms/CasingExceptions path.
              </li>
            </ul>
            The following is an example of the structure of a custom dictionary file.









            <pre>
   &lt;Dictionary&gt;
      &lt;Words&gt;
         &lt;Unrecognized&gt;
            &lt;Word&gt;cb&lt;/Word&gt;
         &lt;/Unrecognized&gt;
         &lt;Recognized&gt;
            &lt;Word&gt;stylesheet&lt;/Word&gt;
            &lt;Word&gt;GotDotNet&lt;/Word&gt;
         &lt;/Recognized&gt;
         &lt;Deprecated&gt;
            &lt;Term PreferredAlternate="EnterpriseServices"&gt;ComPlus&lt;/Term&gt;
         &lt;/Deprecated&gt;
      &lt;/Words&gt;
      &lt;Acronyms&gt;
         &lt;CasingExceptions&gt;
            &lt;Acronym&gt;CJK&lt;/Acronym&gt;
            &lt;Acronym&gt;Pi&lt;/Acronym&gt;
         &lt;/CasingExceptions&gt;
      &lt;/Acronyms&gt;
   &lt;/Dictionary&gt;
</pre>











                When to Suppress Warnings





</p>
<h2>Related Rules</h2>
<p>


                CA2204: Literals should be spelled correctly




                CA1703: Resource strings should be spelled correctly




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldBeCasedCorrectly'>IdentifiersShouldBeCasedCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldDifferByMoreThanCase'>IdentifiersShouldDifferByMoreThanCase</a><br/>




                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldNotContainUnderscores'>IdentifiersShouldNotContainUnderscores</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UsePreferredTerms'>UsePreferredTerms</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb264492.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb264492.aspx</a></p>
‚
fxcop:CA2151—
fxcopCA2151>CA2151: Fields with critical types should be security critical"MAJOR*cs2CA2151:Ï<h2>Cause</h2>
<p>
            A security transparent field or a safe critical field is declared. Its type is specified as security critical. For example:









            <pre>
[assembly: AllowPartiallyTrustedCallers]

   [SecurityCritical]
   class Type1 { } // Security Critical type

   class Type2 // Security transparent type
   {
      Type1 m_field; // CA2151, transparent field of critical type
   }
</pre>




In this example, m_field is a security transparent field of a type that is security critical.






                Rule Description





</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, mark the field with the <code>SecurityCriticalAttribute</code> attribute, or make the type that is referenced by the field eith security transparent or safe critical.









            <pre>
// Fix 1: Make the referencing field security critical
[assembly: AllowPartiallyTrustedCallers]

   [SecurityCritical]
   class Type1 { } // Security Critical type

   class Type2 // Security transparent type
   {
      [SecurityCritical]
      Type1 m_field; // Fixed: critical type, critical field
   }

// Fix 2: Make the referencing field security critical
[assembly: AllowPartiallyTrustedCallers]


   class Type1 { } // Type1 is now transparent

   class Type2 // Security transparent type
   {
      [SecurityCritical]
      Type1 m_field; // Fixed: critical type, critical field
   }
</pre>











                When to Suppress Warnings





</p>
<h2>Code</h2>
<p>










            <pre>
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace TransparencyWarningsDemo
{

    public¬†class SafeNativeMethods
    {
        // CA2145 violation - transparent method marked SuppressUnmanagedCodeSecurity.  This should be fixed by¬†
        // marking this method SecurityCritical.
        [DllImport("kernel32.dll", SetLastError = true)]
        [SuppressUnmanagedCodeSecurity]
        [return: MarshalAs(UnmanagedType.Bool)]
        internal¬†static¬†extern¬†bool Beep(uint dwFreq, uint dwDuration);
    }
}
</pre>





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dn621098.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dn621098.aspx</a></p>
Ë
(fxcop:MarkComSourceInterfacesAsIDispatchª
fxcop"MarkComSourceInterfacesAsIDispatch.CA1412: Mark ComSource Interfaces as IDispatch"MAJOR*cs2CA1412: <h2>Cause</h2>
<p>
            A type is marked with the <code>ComSourceInterfacesAttribute</code> attribute and at least one specified interface is not marked with the <code>InterfaceTypeAttribute</code> attribute set to the <code>InterfaceIsDispatch</code> value.
</p>
<h2>Rule Description</h2>
<p>


                <code>ComSourceInterfacesAttribute</code>
               is used to identify the event interfaces that a class exposes to Component Object Model (COM) clients. These interfaces must be exposed as <code>InterfaceIsIDispatch</code> to enable Visual Basic 6 COM clients to receive event notifications. By default, if an interface is not marked with the <code>InterfaceTypeAttribute</code> attribute, it is exposed as a dual interface.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add or modify the <code>InterfaceTypeAttribute</code> attribute so that its value is set to InterfaceIsIDispatch for all interfaces that are specified with the <code>ComSourceInterfacesAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotUseAutoDualClassInterfaceType'>DoNotUseAutoDualClassInterfaceType</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182207.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182207.aspx</a></p>
ç
1fxcop:DelegatesMustBindWithConsistentTransparency◊
fxcop+DelegatesMustBindWithConsistentTransparencyCCA2133: Delegates must bind to methods with consistent transparency"MAJOR*cs2CA2133:»<h2>Cause</h2>
<p>
            This warning fires on a method that binds a delegate that is marked with the <code>SecurityCriticalAttribute</code> to a method that is transparent or that is marked with the <code>SecuritySafeCriticalAttribute</code>. The warning also fires a method that binds a delegate that is transparent or safe-critical to a critical method.
</p>
<h2>Rule Description</h2>
<p>
            Delegate types and the methods that they bind to must have consistent transparency. Transparent and safe-critical delegates may only bind to other transparent or safe-critical methods. Similarly, critical delegates may only bind to critical methods. These binding rules ensure that the only code that can invoke a method via a delegate could have also invoked the same method directly. For example, binding rules prevent transparent code from calling critical code directly via a transparent delegate.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this warning, change the transparency of the delegate or of the method that it binds so that the transparency of the two are equivalent.
</p>
<h2>When to Suppress Warnings</h2>

<h3>Code</h3>
<p>










            <pre>
using System;
using System.Security;

namespace TransparencyWarningsDemo
{

    public¬†delegate¬†void TransparentDelegate();

    [SecurityCritical]
    public¬†delegate¬†void CriticalDelegate();

    public¬†class TransparentType
    {
        void DelegateBinder()
        {
            // CA2133 violation - binding a transparent delegate to a critical method
            TransparentDelegate td = new TransparentDelegate(CriticalTarget);

            // CA2133 violation - binding a critical delegate to a transparent method
            CriticalDelegate cd = new CriticalDelegate(TransparentTarget);
        }

        [SecurityCritical]
        void CriticalTarget() { }

        void TransparentTarget() { }
    }
}
</pre>





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997710.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997710.aspx</a></p>
Ô
"fxcop:ReviewDenyAndPermitOnlyUsage»
fxcopReviewDenyAndPermitOnlyUsage)CA2107: Review deny and permit only usage"MAJOR*cs2CA2107:‚<h2>Cause</h2>
<p>
            A method contains a security check that specifies the PermitOnly or Deny security action.
</p>
<h2>Rule Description</h2>
<p>
            The Using the PermitOnly Method and <code>CodeAccessPermission.Deny</code> security actions should be used only by those who have an advanced knowledge of .NET Framework security. Code that uses these security actions should undergo a security review.
            Deny alters the default behavior of the stack walk that occurs in response to a security demand. It lets you specify permissions that must not be granted for the duration of the denying method, regardless of the actual permissions of the callers in the call stack. If the stack walk detects a method that is secured by Deny, and if the demanded permission is included in the denied permissions, the stack walk fails. PermitOnly also alters the default behavior of the stack walk. It allows code to specify only those permissions that can be granted, regardless of the permissions of the callers. If the stack walk detects a method that is secured by PermitOnly, and if the demanded permission is not included in the permissions that are specified by the PermitOnly, the stack walk fails.
            Code that relies on these actions should be carefully evaluated for security vulnerabilities because of their limited usefulness and subtle behavior. Consider the following:
            <ul>
              <li>


                    Link Demands
                   are not affected by Deny or PermitOnly.
              </li>
              <li>
                If the Deny or PermitOnly occurs in the same stack frame as the demand that causes the stack walk, the security actions have no effect.
              </li>
              <li>
                Values that are used to construct path-based permissions can usually be specified in multiple ways. Denying access to one form of the path does not deny access to all forms. For example, if a file share \\Server\Share is mapped to a network drive X:, to deny access to a file on the share, you must deny \\Server\Share\File, X:\File and every other path that accesses the file.
              </li>
              <li>
                An <code>CodeAccessPermission.Assert</code> can terminate a stack walk before the Deny or PermitOnly is reached.
              </li>
              <li>
                If a Deny has any effect, namely, when a caller has a permission that is blocked by the Deny, the caller can access the protected resource directly, bypassing the Deny. Similarly, if the caller does not have the denied permission, the stack walk would fail without the Deny.
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            Any use of these security actions will cause a violation. To fix a violation, do not use these security actions.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only after you complete a security review.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182308.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182308.aspx</a></p>
ë
,fxcop:AvoidExcessiveParametersOnGenericTypes‡
fxcop&AvoidExcessiveParametersOnGenericTypes3CA1005: Avoid excessive parameters on generic types"MAJOR*cs2CA1005:Ê<h2>Cause</h2>
<p>
            An externally visible generic type has more than two type parameters.
</p>
<h2>Rule Description</h2>
<p>
            The more type parameters a generic type contains, the more difficult it is to know and remember what each type parameter represents. It is usually obvious with one type parameter, as in List&lt;T&gt;, and in certain cases with two type parameters, as in Dictionary&lt;TKey, TValue&gt;. If more than two type parameters exist, the difficulty becomes too great for most users (for example, TooManyTypeParameters&lt;T, K, V&gt; in C# or TooManyTypeParameters(Of T, K, V) in Visual Basic).
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the design to use no more than two type parameters.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule unless the design absolutely requires more than two type parameters. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CollectionsShouldImplementGenericInterface'>CollectionsShouldImplementGenericInterface</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareStaticMembersOnGenericTypes'>DoNotDeclareStaticMembersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotExposeGenericLists'>DoNotExposeGenericLists</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNestGenericTypesInMemberSignatures'>DoNotNestGenericTypesInMemberSignatures</a><br/>




                <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericEventHandlerInstances'>UseGenericEventHandlerInstances</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericsWhereAppropriate'>UseGenericsWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182129.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182129.aspx</a></p>
‘
!fxcop:UseGenericsWhereAppropriateÆ
fxcopUseGenericsWhereAppropriate&CA1007: Use generics where appropriate"MAJOR*cs2CA1007:Ã<h2>Cause</h2>
<p>
            An externally visible method contains a reference parameter of type <code>System.Object</code>, and the containing assembly targets .NET Framework¬†2.0.
</p>
<h2>Rule Description</h2>
<p>
            A reference parameter is a parameter that is modified by using the <code>ref</code> (<code>ByRef</code> in Visual Basic) keyword. The argument type that is supplied for a reference parameter must exactly match the reference parameter type. To use a type that is derived from the reference parameter type, the type must first be cast and assigned to a variable of the reference parameter type. Use of a generic method allows all types, subject to constraints, to be passed to the method without first casting the type to the reference parameter type.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the method generic and replace the <code>Object</code> parameter by using a type parameter.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveParametersOnGenericTypes'>AvoidExcessiveParametersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CollectionsShouldImplementGenericInterface'>CollectionsShouldImplementGenericInterface</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareStaticMembersOnGenericTypes'>DoNotDeclareStaticMembersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotExposeGenericLists'>DoNotExposeGenericLists</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNestGenericTypesInMemberSignatures'>DoNotNestGenericTypesInMemberSignatures</a><br/>




                <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericEventHandlerInstances'>UseGenericEventHandlerInstances</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182179.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182179.aspx</a></p>
≈
-fxcop:OperatorsShouldHaveSymmetricalOverloadsì
fxcop'OperatorsShouldHaveSymmetricalOverloads3CA2226: Operators should have symmetrical overloads"MAJOR*cs2CA2226:ò<h2>Cause</h2>
<p>
            A type implements the equality or inequality operator and does not implement the opposite operator.
</p>
<h2>Rule Description</h2>
<p>
            There are no circumstances where either equality or inequality is applicable to instances of a type, and the opposite operator is undefined. Types typically implement the inequality operator by returning the negated value of the equality operator.
            The C# compiler issues an error for violations of this rule.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, implement both the equality and inequality operators, or remove the one that is present.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Your type will not work in a manner that is consistent with the .NET Framework.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes'>DoNotOverloadOperatorEqualsOnReferenceTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorOverloadsHaveNamedAlternates'>OperatorOverloadsHaveNamedAlternates</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideEqualsOnOverloadingOperatorEquals'>OverrideEqualsOnOverloadingOperatorEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideGetHashCodeOnOverridingEquals'>OverrideGetHashCodeOnOverridingEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverloadOperatorEqualsOnOverridingValueTypeEquals'>OverloadOperatorEqualsOnOverridingValueTypeEquals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182356.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182356.aspx</a></p>
˝
(fxcop:DoNotLockOnObjectsWithWeakIdentity–
fxcop"DoNotLockOnObjectsWithWeakIdentity1CA2002: Do not lock on objects with weak identity"MAJOR*cs2CA2002:‹<h2>Cause</h2>
<p>
            A thread attempts to acquire a lock on an object that has a weak identity.
</p>
<h2>Rule Description</h2>
<p>
            An object is said to have a weak identity when it can be directly accessed across application domain boundaries. A thread that tries to acquire a lock on an object that has a weak identity can be blocked by a second thread in a different application domain that has a lock on the same object. The following types have a weak identity and are flagged by the rule:
            <ul>
              <li>


                    <code>MarshalByRefObject</code>


              </li>
              <li>


                    <code>ExecutionEngineException</code>


              </li>
              <li>


                    <code>OutOfMemoryException</code>


              </li>
              <li>


                    <code>StackOverflowException</code>


              </li>
              <li>


                    <code>String</code>


              </li>
              <li>


                    <code>MemberInfo</code>


              </li>
              <li>


                    <code>ParameterInfo</code>


              </li>
              <li>


                    <code>Thread</code>


              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, use an object from a type that is not in the list in the Description section.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DisposableFieldsShouldBeDisposed'>DisposableFieldsShouldBeDisposed</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182290.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182290.aspx</a></p>
§
'fxcop:MarkAssembliesWithAssemblyVersion¯
fxcop!MarkAssembliesWithAssemblyVersion5CA1016: Mark assemblies with AssemblyVersionAttribute"MAJOR*cs2CA1016:Å<h2>Cause</h2>
<p>
            The assembly does not have a version number.
</p>
<h2>Rule Description</h2>
<p>
            The identity of an assembly is composed of the following information:
            <ul>
              <li>
                Assembly name
              </li>
              <li>
                Version number
              </li>
              <li>
                Culture
              </li>
              <li>
                Public key (for strongly named assemblies).
              </li>
            </ul>
            The .NET Framework uses the version number to uniquely identify an assembly, and to bind to types in strongly named assemblies. The version number is used together with version and publisher policy. By default, applications run only with the assembly version with which they were built.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add a version number to the assembly by using the <code>System.Reflection.AssemblyVersionAttribute</code> attribute. See the following example.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule for assemblies that are used by third parties, or in a production environment.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182155.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182155.aspx</a></p>
æ

0fxcop:OverrideLinkDemandsShouldBeIdenticalToBaseâ

fxcop*OverrideLinkDemandsShouldBeIdenticalToBase9CA2123: Override link demands should be identical to base"MAJOR*cs2CA2123:Ö	<h2>Cause</h2>
<p>
            A public or protected method in a public type overrides a method or implements an interface, and does not have the same Link Demands as the interface or virtual method.
</p>
<h2>Rule Description</h2>
<p>
            This rule matches a method to its base method, which is either an interface or a virtual method in another type, and then compares the link demands on each. A violation is reported if either the method or the base method has a link demand and the other does not.
            If this rule is violated, a malicious caller can bypass the link demand merely by calling the unsecured method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, apply the same link demand to the overide method or implementation. If this is not possible, mark the method with a full demand or remove the attribute altogether.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182305.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182305.aspx</a></p>
”
0fxcop:MarkAssembliesWithNeutralResourcesLanguageû
fxcop*MarkAssembliesWithNeutralResourcesLanguage>CA1824: Mark assemblies with NeutralResourcesLanguageAttribute"MAJOR*cs2CA1824:ï<h2>Cause</h2>
<p>
            An assembly contains a ResX-based resource but does not have the <code>System.Resources.NeutralResourcesLanguageAttribute</code> applied to it.
</p>
<h2>Rule Description</h2>
<p>
            The NeutralResourcesLanguage attribute informs the ResourceManager of the language that was used to display the resources of the neutral culture for an assembly. When it looks up resources in the same culture as the neutral resources language, the ResourceManager automatically uses the resources that are located in the main assembly. It does this instead of searching for a satellite assembly that has the current user interface culture for the current thread. This improves lookup performance for the first resource that you load and can reduce your working set.
</p>
<h2>Fixing Violations</h2>
<p>
            To fix a violation of this rule, add the attribute to the assembly, and specify the language of the resources of the neutral culture.
</p>
<h2>Specifying the Language</h2>
<p>
            To specify the language of the resource of the neutral culture


                <li>
                  In Solution Explorer, right-click your project, and then Click Properties.
                </li>
                <li>
                  From the left navigation bar select Application, and then click Assembly Information.
                </li>
                <li>
                  In the Assembly Information dialog box, select the language from the Neutral Language drop-down list.
                </li>
                <li>
                  Click OK.
                </li>


</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is permissible to suppress a warning from this rule. However, startup performance might decrease.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb385967.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb385967.aspx</a></p>
Ê
*fxcop:ConsiderPassingBaseTypesAsParameters∑
fxcop$ConsiderPassingBaseTypesAsParameters1CA1011: Consider passing base types as parameters"MAJOR*cs2CA1011:¡<h2>Cause</h2>
<p>
            A method declaration includes a formal parameter that is a derived type, and the method calls only members of the base type of the parameter.
</p>
<h2>Rule Description</h2>
<p>
            When a base type is specified as a parameter in a method declaration, any type that is derived from the base type can be passed as the corresponding argument to the method. When the argument is used inside the method body, the specific method that is executed depends on the type of the argument. If the additional functionality that is provided by the derived type is not required, use of the base type allows wider use of the method.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the type of the parameter to its base type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule
            <ul>
              <li>
                if the method requires the specific functionality that is provided by the derived type
                - or -
              </li>
              <li>
                to enforce that only the derived type, or a more derived type, is passed to the method.
              </li>
            </ul>
            In these cases, the code will be more robust because of the strong type checking that is provided by the compiler and runtime.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:MembersShouldNotExposeCertainConcreteTypes'>MembersShouldNotExposeCertainConcreteTypes</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/3hk32yyz.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/3hk32yyz.aspx</a></p>
ﬂ
fxcop:DoNotMarkEnumsWithFlagsΩ
fxcopDoNotMarkEnumsWithFlags-CA2217: Do not mark enums with FlagsAttribute"MAJOR*cs2CA2217:ÿ<h2>Cause</h2>
<p>
            An externally visible enumeration is marked with <code>FlagsAttribute</code> and it has one or more values that are not powers of two or a combination of the other defined values on the enumeration.
</p>
<h2>Rule Description</h2>
<p>
            An enumeration should have <code>FlagsAttribute</code> present only if each value defined in the enumeration is a power of two, or a combination of defined values.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove <code>FlagsAttribute</code> from the enumeration.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:MarkEnumsWithFlags'>MarkEnumsWithFlags</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182335.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182335.aspx</a></p>
•
fxcop:DoNotExposeGenericListsÉ
fxcopDoNotExposeGenericLists#CA1002: Do not expose generic lists"MAJOR*cs2CA1002:®<h2>Cause</h2>
<p>
            A type contains an externally visible member that is a <code>System.Collections.Generic.List&lt;T&gt;</code> type, returns a <code>System.Collections.Generic.List&lt;T&gt;</code> type, or whose signature includes a <code>System.Collections.Generic.List&lt;T&gt;</code> parameter.
</p>
<h2>Rule Description</h2>
<p>


                <code>System.Collections.Generic.List&lt;T&gt;</code>
               is a generic collection that is designed for performance and not inheritance. <code>System.Collections.Generic.List&lt;T&gt;</code> does not contain virtual members that make it easier to change the behavior of an inherited class. The following generic collections are designed for inheritance and should be exposed instead of <code>System.Collections.Generic.List&lt;T&gt;</code>.
            <ul>
              <li>


                    System.Collections.ObjectModel.Collection&lt;T&gt;


              </li>
              <li>


                    System.Collections.ObjectModel.ReadOnlyCollection&lt;T&gt;


              </li>
              <li>


                    System.Collections.ObjectModel.KeyedCollection&lt;TKey, TItem&gt;


              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the <code>System.Collections.Generic.List&lt;T&gt;</code> type to one of the generic collections that is designed for inheritance.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule unless the assembly that raises this warning is not meant to be a reusable library. For example, it would be safe to suppress this warning in a performance tuned application where a performance benefit was gained from the use of generic lists.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveParametersOnGenericTypes'>AvoidExcessiveParametersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CollectionsShouldImplementGenericInterface'>CollectionsShouldImplementGenericInterface</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareStaticMembersOnGenericTypes'>DoNotDeclareStaticMembersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNestGenericTypesInMemberSignatures'>DoNotNestGenericTypesInMemberSignatures</a><br/>




                <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericEventHandlerInstances'>UseGenericEventHandlerInstances</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericsWhereAppropriate'>UseGenericsWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182142.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182142.aspx</a></p>
‰

+fxcop:VariableNamesShouldNotMatchFieldNames¥

fxcop%VariableNamesShouldNotMatchFieldNames3CA1500: Variable names should not match field names"MAJOR*cs2CA1500:ª	<h2>Cause</h2>
<p>
            An instance method declares a parameter or a local variable whose name matches an instance field of the declaring type. To catch local variables that violate the rule, the tested assembly must be built by using debugging information and the associated program database (.pdb) file must be available.
</p>
<h2>Rule Description</h2>
<p>
            When the name of an instance field matches a parameter or a local variable name, the instance field is accessed by using the <code>this</code> (<code>Me</code> in Visual Basic) keyword when inside the method body. When maintaining code, it is easy to forget this difference and assume that the parameter/local variable refers to the instance field, which leads to errors. This is true especially for lengthy method bodies.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, rename either the parameter/variable or the field.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182216.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182216.aspx</a></p>
˘
7fxcop:OverloadOperatorEqualsOnOverridingValueTypeEqualsΩ
fxcop1OverloadOperatorEqualsOnOverridingValueTypeEquals?CA2231: Overload operator equals on overriding ValueType.Equals"MAJOR*cs2CA2231:¨<h2>Cause</h2>
<p>
            A value type overrides <code>Object.Equals</code> but does not implement the equality operator.
</p>
<h2>Rule Description</h2>
<p>
            In most programming languages there is no default implementation of the equality operator (==) for value types. If your programming language supports operator overloads, you should consider implementing the equality operator. Its behavior should be identical to that of <code>Equals</code>.
            You cannot use the default equality operator in an overloaded implementation of the equality operator. Doing so will cause a stack overflow. To implement the equality operator, use the Object.Equals method in your implementation. For example:









            <pre>
If (Object.ReferenceEquals(left, Nothing)) Then
    Return Object.ReferenceEquals(right, Nothing)
Else
    Return left.Equals(right)
End If
</pre>














            <pre>
if (Object.ReferenceEquals(left, null))
    return Object.ReferenceEquals(right, null);
return left.Equals(right);
</pre>











                How to Fix Violations





</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule; however, we recommend that you provide the equality operator if possible.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotOverloadOperatorEqualsOnReferenceTypes'>DoNotOverloadOperatorEqualsOnReferenceTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorOverloadsHaveNamedAlternates'>OperatorOverloadsHaveNamedAlternates</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OperatorsShouldHaveSymmetricalOverloads'>OperatorsShouldHaveSymmetricalOverloads</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideEqualsOnOverloadingOperatorEquals'>OverrideEqualsOnOverloadingOperatorEquals</a><br/>




                <a href='/coding_rules#rule_key=fxcop:OverrideGetHashCodeOnOverridingEquals'>OverrideGetHashCodeOnOverridingEquals</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182359.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182359.aspx</a></p>
€	
%fxcop:ValueTypeFieldsShouldBePortable±	
fxcopValueTypeFieldsShouldBePortable,CA1900: Value type fields should be portable"MAJOR*cs2CA1900:≈<h2>Cause</h2>
<p>
            This rule checks that structures that are declared with explicit layout will align correctly when marshaled to unmanaged code on 64-bit operating systems. IA-64 does not allow unaligned memory accesses and the process will crash if this violation is not fixed.
</p>
<h2>Rule Description</h2>
<p>
            Structures that have explicit layout that contains misaligned fields cause crashes on 64-bit operating systems.
</p>
<h2>How to Fix Violations</h2>
<p>
            All fields that are smaller than 8 bytes must have offsets that are a multiple of their size, and fields that are 8 bytes or more must have offsets that are a multiple of 8. Another solution is to use <code>LayoutKind.Sequential</code> instead of <code>LayoutKind.Explicit</code>, if reasonable.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            This warning should be suppressed only if it occurs in error.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182285.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182285.aspx</a></p>
Ø
'fxcop:SecuredTypesShouldNotExposeFieldsÉ
fxcop!SecuredTypesShouldNotExposeFields.CA2112: Secured types should not expose fields"MAJOR*cs2CA2112:ì
<h2>Cause</h2>
<p>
            A public or protected type contains public fields and is secured by a Link Demands.
</p>
<h2>Rule Description</h2>
<p>
            If code has access to an instance of a type that is secured by a link demand, the code does not have to satisfy the link demand to access the type's fields.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the fields nonpublic and add public properties or methods that return the field data. LinkDemand security checks on types protect access to the type's properties and methods. However, code access security does not apply to fields.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Both for security issues and for good design, you should fix violations by making the public fields nonpublic. You can suppress a warning from this rule if the field does not hold information that should remain secured, and you do not rely on the contents of the field.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareVisibleInstanceFields'>DoNotDeclareVisibleInstanceFields</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182318.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182318.aspx</a></p>
ó
%fxcop:StaticHolderTypesShouldBeSealedÌ
fxcopStaticHolderTypesShouldBeSealed,CA1052: Static holder types should be sealed"MAJOR*cs2CA1052:Å<h2>Cause</h2>
<p>
            A public or protected type contains only static members and is not declared with the <code>sealed (C# Reference)</code> (NotInheritable (Visual Basic)) modifier.
</p>
<h2>Rule Description</h2>
<p>
            This rule assumes that a type that contains only static members is not designed to be inherited, because the type does not provide any functionality that can be overridden in a derived type. A type that is not meant to be inherited should be marked with the <code>sealed</code> modifier to prohibit its use as a base type.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, mark the type as <code>sealed</code>. If you are targeting .NET Framework¬†2.0 or earlier, a better approach is to mark the type as <code>static</code>. In this manner, you avoid having to declare a private constructor to prevent the class from being created.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule only if the type is designed to be inherited. The absence of the <code>sealed</code> modifier suggests that the type is useful as a base type.
</p>
<h2>Example of a Violation</h2>

<h3>Description</h3>
<p>
                The following example shows a type that violates the rule.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace DesignLibrary
{
    public¬†class StaticMembers
    {
        static¬†int someField;

        public¬†static¬†int SomeProperty
        {
            get
            {
                return someField;
            }
            set
            {
                someField = value;
            }
        }

        StaticMembers() {}

        public¬†static¬†void SomeMethod() {}
    }
}
</pre>





</p>
<h2>Fix with the Static Modifier</h2>

<h3>Description</h3>
<p>
                The following example shows how to fix a violation of this rule by marking the type with the <code>static</code> modifier.
</p>
<h3>Code</h3>
<p>










            <pre>
using System;

namespace DesignLibrary
{
    public¬†static¬†class StaticMembers
    {
        private¬†static¬†int someField;

        public¬†static¬†int SomeProperty
        {
            get { return someField; }
            set { someField = value; }
        }

        public¬†static¬†void SomeMethod()
        {
        }

        public¬†static¬†event SomeDelegate SomeEvent;
    }

    public¬†delegate¬†void SomeDelegate();
}
</pre>





</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:StaticHolderTypesShouldNotHaveConstructors'>StaticHolderTypesShouldNotHaveConstructors</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182168.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182168.aspx</a></p>
Æ

"fxcop:MarkAssembliesWithComVisibleá

fxcopMarkAssembliesWithComVisible0CA1017: Mark assemblies with ComVisibleAttribute"MAJOR*cs2CA1017:ö	<h2>Cause</h2>
<p>
            An assembly does not have the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> attribute applied to it.
</p>
<h2>Rule Description</h2>
<p>
            The <code>ComVisibleAttribute</code> attribute determines how COM clients access managed code. Good design dictates that assemblies explicitly indicate COM visibility. COM visibility can be set for a whole assembly and then overridden for individual types and type members. If the attribute is not present, the contents of the assembly are visible to COM clients.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add the attribute to the assembly. If you do not want the assembly to be visible to COM clients, apply the attribute and set its value to <code>false</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. If you want the assembly to be visible, apply the attribute and set its value to <code>true</code>.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182157.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182157.aspx</a></p>
ò
fxcop:ReviewImperativeSecurityı
fxcopReviewImperativeSecurity"CA2103: Review imperative security"MAJOR*cs2CA2103:ö<h2>Cause</h2>
<p>
            A method uses imperative security and might be constructing the permission by using state information or return values that can change as long as the demand is active.
</p>
<h2>Rule Description</h2>
<p>
            Imperative security uses managed objects to specify permissions and security actions during code execution, compared to declarative security, which uses attributes to store permissions and actions in metadata. Imperative security is very flexible because you can set the state of a permission object and select security actions by using information that is not available until run time. Together with that flexibility comes the risk that the runtime information that you use to determine the state of a permission does not remain unchanged as long as the action is in effect.
            Use declarative security whenever possible. Declarative demands are easier to understand.
</p>
<h2>How to Fix Violations</h2>
<p>
            Review the imperative security demands to make sure that the state of the permission does not rely on information that can change as long as the permission is being used.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the permission does not rely on changing data. However, it is better to change the imperative demand to its declarative equivalent.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182309.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182309.aspx</a></p>
é
,fxcop:MarkISerializableTypesWithSerializable›
fxcop&MarkISerializableTypesWithSerializable;CA2237: Mark ISerializable types with SerializableAttribute"MAJOR*cs2CA2237:€<h2>Cause</h2>
<p>
            An externally visible type implements the <code>System.Runtime.Serialization.ISerializable</code> interface and the type is not marked with the <code>System.SerializableAttribute</code> attribute. The rule ignores derived types whose base type is not serializable.
</p>
<h2>Rule Description</h2>
<p>
            To be recognized by the common language runtime as serializable, types must be marked with the <code>SerializableAttribute</code> attribute even if the type uses a custom serialization routine through implementation of the <code>ISerializable</code> interface.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, apply the <code>SerializableAttribute</code> attribute to the type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule for exception classes because they must be serializable to work correctly across application domains.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallBaseClassMethodsOnISerializableTypes'>CallBaseClassMethodsOnISerializableTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementISerializableCorrectly'>ImplementISerializableCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationMethodsCorrectly'>ImplementSerializationMethodsCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAllNonSerializableFields'>MarkAllNonSerializableFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ProvideDeserializationMethodsForOptionalFields'>ProvideDeserializationMethodsForOptionalFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SecureSerializationConstructors'>SecureSerializationConstructors</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182350.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182350.aspx</a></p>
¢
(fxcop:IdentifiersShouldHaveCorrectPrefixı
fxcop"IdentifiersShouldHaveCorrectPrefix.CA1715: Identifiers should have correct prefix"MAJOR*cs2CA1715:Ñ<h2>Cause</h2>
<p>
            The name of an externally visible interface does not start with an uppercase 'I'.
            -or-
            The name of a generic type parameter on an externally visible type or method does not start with an uppercase 'T'.
</p>
<h2>Rule Description</h2>
<p>
            By convention, the names of certain programming elements start with a specific prefix.
            Interface names should start with an uppercase 'I' followed by another uppercase letter. This rule reports violations for interface names such as 'MyInterface' and 'IsolatedInterface'.
            Generic type parameter names should start with an uppercase 'T' and optionally may be followed by another uppercase letter. This rule reports violations for generic type parameter names such as 'V' and 'Type'.
            Naming conventions provide a common look for libraries that target the common language runtime. This reduces the learning curve that is required for new software libraries, and increases customer confidence that the library was developed by someone who has expertise in developing managed code.
</p>
<h2>How to Fix Violations</h2>
<p>
            Rename the identifier so that it is correctly prefixed.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:IdentifiersShouldNotHaveIncorrectPrefix'>IdentifiersShouldNotHaveIncorrectPrefix</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182243.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182243.aspx</a></p>
º
%fxcop:ImplementISerializableCorrectlyí
fxcopImplementISerializableCorrectly)CA2240: Implement ISerializable correctly"MAJOR*cs2CA2240:©<h2>Cause</h2>
<p>
            An externally visible type is assignable to the <code>System.Runtime.Serialization.ISerializable</code> interface and one of the following conditions is true:
            <ul>
              <li>
                The type inherits but does not override the <code>ISerializable.GetObjectData</code> method and the type declares instance fields that are not marked with the <code>System.NonSerializedAttribute</code> attribute.
              </li>
              <li>
                The type is not sealed and the type implements a <code>GetObjectData</code> method that is not externally visible and overridable.
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            Instance fields that are declared in a type that inherits the <code>System.Runtime.Serialization.ISerializable</code> interface are not automatically included in the serialization process. To include the fields, the type must implement the <code>GetObjectData</code> method and the serialization constructor. If the fields should not be serialized, apply the <code>NonSerializedAttribute</code> attribute to the fields to explicitly indicate the decision.
            In types that are not sealed, implementations of the <code>GetObjectData</code> method should be externally visible. Therefore, the method can be called by derived types, and is overridable.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, make the <code>GetObjectData</code> method visible and overridable and make sure all instance fields are included in the serialization process or explicitly marked with the <code>NonSerializedAttribute</code> attribute.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:CallBaseClassMethodsOnISerializableTypes'>CallBaseClassMethodsOnISerializableTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationConstructors'>ImplementSerializationConstructors</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ImplementSerializationMethodsCorrectly'>ImplementSerializationMethodsCorrectly</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAllNonSerializableFields'>MarkAllNonSerializableFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkISerializableTypesWithSerializable'>MarkISerializableTypesWithSerializable</a><br/>




                <a href='/coding_rules#rule_key=fxcop:ProvideDeserializationMethodsForOptionalFields'>ProvideDeserializationMethodsForOptionalFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:SecureSerializationConstructors'>SecureSerializationConstructors</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182342.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182342.aspx</a></p>
ÿ
&fxcop:DoNotDisposeObjectsMultipleTimes≠
fxcop DoNotDisposeObjectsMultipleTimes-CA2202: Do not dispose objects multiple times"MAJOR*cs2CA2202:ø
<h2>Cause</h2>
<p>
            A method implementation contains code paths that could cause multiple calls to <code>IDisposable.Dispose</code> or a Dispose equivalent, such as a Close() method on some types, on the same object.
</p>
<h2>Rule Description</h2>
<p>
            A correctly implemented <code>Dispose</code> method can be called multiple times without throwing an exception. However, this is not guaranteed and to avoid generating a <code>System.ObjectDisposedException</code> you should not call <code>Dispose</code> more than one time on an object.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DisposeObjectsBeforeLosingScope'>DisposeObjectsBeforeLosingScope</a>


</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the implementation so that regardless of the code path, <code>Dispose</code> is called only one time for the object.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Even if <code>Dispose</code> for the object is known to be safely callable multiple times, the implementation might change in the future.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182334.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182334.aspx</a></p>
Ë
%fxcop:UseOnlyApiFromTargetedFrameworkæ
fxcopUseOnlyApiFromTargetedFramework,CA1903: Use only API from targeted framework"MAJOR*cs2CA1903:“<h2>Cause</h2>
<p>
            A member or type is using a member or type that was introduced in a service pack that was not included with the project's targeted framework.
</p>
<h2>Rule Description</h2>
<p>
            New members and types were included in .NET Framework 2.0 Service Pack 1 and 2, .NET Framework 3.0 Service Pack 1 and 2, and .NET Framework 3.5 Service Pack 1. Projects that target the major versions of the .NET Framework can unintentionally take dependencies on these new APIs. To prevent this dependency, this rule fires on usages of any new members and types that were not included by default with the project's target framework.

              Target Framework and Service Pack Dependencies








                    When target framework is


                    Fires on usages of members introduced in




                    .NET Framework 2.0


                    .NET Framework 2.0 SP1, .NET Framework 2.0 SP2




                    .NET Framework 3.0


                    .NET Framework 2.0 SP1, .NET Framework 2.0 SP2, .NET Framework 3.0 SP1, .NET Framework 3.0 SP2




                    .NET Framework 3.5


                    .NET Framework 3.5 SP1




                    .NET Framework 4


                    N/A




            To change a project's target framework, see Targeting a Specific .NET Framework Version or Profile.
</p>
<h2>How to Fix Violations</h2>
<p>
            To remove the dependency on the service pack, remove all usages of the new member or type. If this is a deliberate dependency, either suppress the warning or turn this rule off.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule if this was not a deliberate dependency on the specified service pack. In this situation, your application might fail to run on systems without this service pack installed. Suppress the warning or turn this rule off if this was a deliberate dependency.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/cc667408.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/cc667408.aspx</a></p>
ì
1fxcop:TransparentMethodsMustNotSatisfyLinkDemands›
fxcop+TransparentMethodsMustNotSatisfyLinkDemands8CA2141: Transparent methods must not satisfy LinkDemands"MAJOR*cs2CA2141:Ÿ<h2>Cause</h2>
<p>
            A security transparent method calls a method in an assembly that is not marked with the <code>AllowPartiallyTrustedCallersAttribute</code> (APTCA) attribute, or a security transparent method satisfies a SecurityAction<code>.LinkDemand</code> for a type or a method.
</p>
<h2>Rule Description</h2>
<p>
            Satisfying a LinkDemand is a security sensitive operation which can cause unintentional elevation of privilege. Security transparent code must not satisfy LinkDemands, because it is not subject to the same security audit requirements as security critical code. Transparent methods in security rule set level 1 assemblies will cause all LinkDemands they satisfy to be converted to full demands at run time, which can cause performance problems. In security rule set level 2 assemblies, transparent methods will fail to compile in the just-in-time (JIT) compiler if they attempt to satisfy a LinkDemand.
            In assemblies that usee Level 2 security, attempts by a security transparent method to satisfy a LinkDemand or call a method in a non-APTCA assembly raises a <code>MethodAccessException</code>; in Level 1 assemblies the LinkDemand becomes a full Demand.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, mark the accessing method with the <code>SecurityCriticalAttribute</code> or <code>SecuritySafeCriticalAttribute</code> attribute, or remove the LinkDemand from the accessed method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dd997445.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dd997445.aspx</a></p>
º
0fxcop:AvoidNonpublicFieldsInComVisibleValueTypesá
fxcop*AvoidNonpublicFieldsInComVisibleValueTypes:CA1413: Avoid non-public fields in COM visible value types"MAJOR*cs2CA1413:Ç<h2>Cause</h2>
<p>
            A value type that is specifically marked as visible to Component Object Model (COM) declares a nonpublic instance field.
</p>
<h2>Rule Description</h2>
<p>
            Nonpublic instance fields of COM-visible value types are visible to COM clients. Review the content of the field for information that should not be exposed, or that will have an unintended design or security effect.
            By default, all public value types are visible to COM. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated. The containing assembly must be marked with the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> set to <code>false</code> and the type must be marked with the <code>ComVisibleAttribute</code> set to <code>true</code>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule and keep the field hidden, change the value type to a reference type or remove the <code>ComVisibleAttribute</code> attribute from the type.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if public exposure of the field is acceptable.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidStaticMembersInComVisibleTypes'>AvoidStaticMembersInComVisibleTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:MarkAssembliesWithComVisible'>MarkAssembliesWithComVisible</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182196.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182196.aspx</a></p>
ƒ
)fxcop:PInvokeDeclarationsShouldBePortableñ
fxcop#PInvokeDeclarationsShouldBePortable0CA1901: P/Invoke declarations should be portable"MAJOR*cs2CA1901:¢
<h2>Cause</h2>
<p>
            This rule evaluates the size of each parameter and the return value of a P/Invoke and verifies that their size, when marshaled to unmanaged code on 32-bit and 64-bit platforms, is correct. The most common violation of this rule is to pass a fixed-sized integer where a platform-dependent, pointer-sized variable is required.
</p>
<h2>Rule Description</h2>
<p>
            Either of the following scenarios violates this rule occurs:
            <ul>
              <li>
                The return value or parameter is typed as a fixed-size integer when it should be typed as an <code>IntPtr</code>.
              </li>
              <li>
                The return value or parameter is typed as an <code>IntPtr</code> when it should be typed as a fixed-size integer.
              </li>
            </ul>
</p>
<h2>How to Fix Violations</h2>
<p>
            You can fix this violation by using <code>IntPtr</code> or <code>UIntPtr</code> to represent handles instead of <code>Int32</code> or <code>UInt32</code>.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You should not suppress this warning.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182284.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182284.aspx</a></p>
ï
-fxcop:DoNotDeclareStaticMembersOnGenericTypes„
fxcop'DoNotDeclareStaticMembersOnGenericTypes6CA1000: Do not declare static members on generic types"MAJOR*cs2CA1000:Â<h2>Cause</h2>
<p>
            An externally visible generic type contains a <code>static</code> (<code>Shared</code> in Visual Basic) member.
</p>
<h2>Rule Description</h2>
<p>
            When a <code>static</code> member of a generic type is called, the type argument must be specified for the type. When a generic instance member that does not support inference is called, the type argument must be specified for the member. The syntax for specifying the type argument in these two cases is different and easily confused, as the following calls demonstrate:









            <pre>
// Static method in a generic type.
GenericType&lt;int&gt;.StaticMethod();

// Generic instance method that does not support inference.
someObject.GenericMethod&lt;int&gt;();
</pre>




Generally, both of the prior declarations should be avoided so that the type argument does not have to be specified when the member is called. This results in a syntax for calling members in generics that is no different from the syntax for non-generics. For more information, see <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a>.






                How to Fix Violations





</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule. Providing generics in a syntax that is easy to understand and use reduces the time that is required to learn and increases the adoption rate of new libraries.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:AvoidExcessiveParametersOnGenericTypes'>AvoidExcessiveParametersOnGenericTypes</a><br/>




                <a href='/coding_rules#rule_key=fxcop:CollectionsShouldImplementGenericInterface'>CollectionsShouldImplementGenericInterface</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotExposeGenericLists'>DoNotExposeGenericLists</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotNestGenericTypesInMemberSignatures'>DoNotNestGenericTypesInMemberSignatures</a><br/>




                <a href='/coding_rules#rule_key=fxcop:GenericMethodsShouldProvideTypeParameter'>GenericMethodsShouldProvideTypeParameter</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericEventHandlerInstances'>UseGenericEventHandlerInstances</a><br/>




                <a href='/coding_rules#rule_key=fxcop:UseGenericsWhereAppropriate'>UseGenericsWhereAppropriate</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182139.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182139.aspx</a></p>
†

.fxcop:DisposeMethodsShouldCallBaseClassDisposeÌ	
fxcop(DisposeMethodsShouldCallBaseClassDispose6CA2215: Dispose methods should call base class dispose"MAJOR*cs2CA2215:Ó<h2>Cause</h2>
<p>
            A type that implements <code>System.IDisposable</code> inherits from a type that also implements <code>IDisposable</code>. The <code>Dispose</code> method of the inheriting type does not call the <code>Dispose</code> method of the parent type.
</p>
<h2>Rule Description</h2>
<p>
            If a type inherits from a disposable type, it must call the <code>Dispose</code> method of the base type from within its own <code>Dispose</code> method. Calling the base type method Dispose ensures that any resources created by the base type are released.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, call <code>base</code>.<code>Dispose</code> in your <code>Dispose</code> method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the call to <code>base</code>.<code>Dispose</code> occurs at a deeper calling level than the rule checks.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182330.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182330.aspx</a></p>
≥
-fxcop:CallGCKeepAliveWhenUsingNativeResourcesÅ
fxcop'CallGCKeepAliveWhenUsingNativeResources5CA2115: Call GC.KeepAlive when using native resources"MAJOR*cs2CA2115:Ñ<h2>Cause</h2>
<p>
            A method declared in a type with a finalizer references a <code>System.IntPtr</code> or <code>System.UIntPtr</code> field, but does not call <code>GC.KeepAlive</code>.
</p>
<h2>Rule Description</h2>
<p>
            Garbage collection finalizes an object if there are no more references to it in managed code. Unmanaged references to objects do not prevent garbage collection. This rule detects errors that might occur because an unmanaged resource is being finalized while it is still being used in unmanaged code.
            This rule assumes that <code>IntPtr</code> and <code>UIntPtr</code> fields store pointers to unmanaged resources. Because the purpose of a finalizer is to free unmanaged resources, the rule assumes that the finalizer will free the unmanaged resource pointed to by the pointer fields. This rule also assumes that the method is referencing the pointer field to pass the unmanaged resource to unmanaged code.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, add a call to <code>KeepAlive</code> to the method, passing the current instance (<code>this</code> in C# and C++) as the argument. Position the call after the last line of code where the object must be protected from garbage collection. Immediately after the call to <code>KeepAlive</code>, the object is again considered ready for garbage collection assuming that there are no managed references to it.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            This rule makes some assumptions that can lead to false positives. You can safely suppress a warning from this rule if:
            <ul>
              <li>
                The finalizer does not free the contents of the <code>IntPtr</code> or <code>UIntPtr</code> field referenced by the method.
              </li>
              <li>
                The method does not pass the <code>IntPtr</code> or <code>UIntPtr</code> field to unmanaged code.
              </li>
            </ul>
            Carefully review other messages before excluding them. This rule detects errors that are difficult to reproduce and debug.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182300.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182300.aspx</a></p>
â
$fxcop:AvoidCallingProblematicMethods‡
fxcopAvoidCallingProblematicMethods)CA2001: Avoid calling problematic methods"MAJOR*cs2CA2001:¯<h2>Cause</h2>
<p>
            A member calls a potentially dangerous or problematic method.
</p>
<h2>Rule Description</h2>
<p>
            Avoid making unnecessary and potentially dangerous method calls.
            A violation of this rule occurs when a member calls one of the following methods.







                    Method


                    Description






                        <code>GC.Collect</code>




                    Calling GC.Collect can significantly affect application performance and is rarely necessary. For more information, see the Rico Mariani's Performance Tidbits blog entry on MSDN.






                        <code>Thread.Resume</code>




                        <code>Thread.Suspend</code>




                    Thread.Suspend and Thread.Resume have been deprecated because of their unpredictable behavior.  Use other classes in the <code>System.Threading</code> namespace, such as <code>Monitor</code>, [T:System.Threading.Mutex,] <code>Mutex</code>, and <code>Semaphore</code> to synchronize threads or protect resources.






                        <code>SafeHandle.DangerousGetHandle</code>




                    The DangerousGetHandle method poses a security risk because it can return a handle that is not valid. See the <code>DangerousAddRef</code>  and the <code>DangerousRelease</code> methods for more information about how to use the DangerousGetHandle method safely.






                        <code>Assembly.LoadFrom</code>




                        <code>Assembly.LoadFile</code>




                        <code>Assembly.LoadWithPartialName</code>




                    These methods can load assemblies from unexpected locations. For example, see Suzanne Cook's .NET CLR Notes blog posts LoadFile vs. LoadFrom and Choosing a Binding Context on the MSDN Web site for information about methods that load assemblies.





                      CoSetProxyBlanket (Ole32)

                      CoInitializeSecurity (Ole32)


                    By the time the user code starts executing in a managed process, it is too late to reliably call CoSetProxyBlanket. The common language runtime (CLR) takes initialization actions that may prevent the users P/Invoke from succeeding.
                    If you do have to call CoSetProxyBlanket for a managed application, we recommend that you start the process by using a native code (C++) executable, call CoSetProxyBlanket in the native code, and then start your managed code application in process. (Be sure to specify a runtime version number.)




</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, remove or replace the call to the dangerous or problematic method.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            You should suppress messages from this rule only when no alternatives to the problematic method are available.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/bb385973.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/bb385973.aspx</a></p>
É
,fxcop:DoNotPassLiteralsAsLocalizedParameters“
fxcop&DoNotPassLiteralsAsLocalizedParameters4CA1303: Do not pass literals as localized parameters"MAJOR*cs2CA1303:◊<h2>Cause</h2>
<p>
            A method passes a string literal as a parameter to a constructor or method in the .NET Framework class library and that string should be localizable.
            This warning is raised when a literal string is passed as a value to a parameter or property and one or more of the following cases is true:
            <ul>
              <li>
                The <code>LocalizableAttribute</code> attribute of the parameter or property is set to true.
              </li>
              <li>
                The parameter or property name contains "Text", "Message", or "Caption".
              </li>
              <li>
                The name of the string parameter that is passed to a Console.Write or Console.WriteLine method is either "value" or "format".
              </li>
            </ul>
</p>
<h2>Rule Description</h2>
<p>
            String literals that are embedded in source code are difficult to localize.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, replace the string literal with a string retrieved through an instance of the <code>ResourceManager</code> class.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            It is safe to suppress a warning from this rule if the code library will not be localized, or if the string is not exposed to the end user or a developer using the code library.
            Users can eliminate noise against methods which should not be passed localized strings by either renaming the parameter or property named, or by marking these items as conditional.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182187.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182187.aspx</a></p>
Ÿ
.fxcop:PInvokesShouldNotBeSafeCriticalFxCopRule¶
fxcop(PInvokesShouldNotBeSafeCriticalFxCopRule9CA5122: P/Invoke declarations should not be safe critical"MAJOR*cs2CA5122:§
<h2>Cause</h2>
<p>
            A P/Invoke declaration has been marked with a <code>SecuritySafeCriticalAttribute</code>:









            <pre>
[assembly: AllowPartiallyTrustedCallers]

// ...
public class C
{
    [SecuritySafeCritical]
    [DllImport("kernel32.dll")]
    public static extern bool Beep(int frequency, int duration); // CA5122 ‚Äì safe critical p/invoke
   }
</pre>




In this example, C.Beep(...) has been marked as a security safe critical method.






                Rule Description





</p>
<h2>How to Fix Violations</h2>
<p>
            To make a P/Invoke available to transparent code, expose a security safe critical wrapper method for it:









            <pre>
[assembly: AllowPartiallyTrustedCallers

class C
{
   [SecurityCritical]
   [DllImport(‚Äúkernel32.dll‚Äù, EntryPoint=‚ÄùBeep‚Äù)]
   private static extern bool BeepPinvoke(int frequency, int duration); // Security Critical P/Invoke

   [SecuritySafeCritical]
   public static bool Beep(int frequency, int duration)
   {
      return BeepPInvoke(frequency, duration);
   }
}
</pre>











                When to Suppress Warnings





</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/dn621099.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/dn621099.aspx</a></p>
ú
,fxcop:PreferJaggedArraysOverMultidimensionalÎ
fxcop&PreferJaggedArraysOverMultidimensional2CA1814: Prefer jagged arrays over multidimensional"MAJOR*cs2CA1814:Ú<h2>Cause</h2>
<p>
            A member is declared as a multidimensional array.
</p>
<h2>Rule Description</h2>
<p>
            A jagged array is an array whose elements are arrays. The arrays that make up the elements can be of different sizes, leading to less wasted space for some sets of data.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the multidimensional array to a jagged array.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if the multidimensional array does not waste space.
</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182277.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182277.aspx</a></p>
Ä
+fxcop:InitializeValueTypeStaticFieldsInline–
fxcop%InitializeValueTypeStaticFieldsInline2CA2207: Initialize value type static fields inline"MAJOR*cs2CA2207:ÿ<h2>Cause</h2>
<p>
            A value-type declares an explicit static constructor.
</p>
<h2>Rule Description</h2>
<p>
            When a value-type is declared, it undergoes a default initialization where all value-type fields are set to zero and all reference-type fields are set to <code>null</code> (<code>Nothing</code> in Visual Basic). An explicit static constructor is only guaranteed to run before an instance constructor or static member of the type is called. Therefore, if the type is created without calling an instance constructor, the static constructor is not guaranteed to run.
            If all static data is initialized inline and no explicit static constructor is declared, the C# and Visual Basic compilers add the <code>beforefieldinit</code> flag to the MSIL class definition. The compilers also add a private static constructor that contains the static initialization code. This private static constructor is guaranteed to run before any static fields of the type are accessed.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule initialize all static data when it is declared and remove the static constructor.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Related Rules</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:InitializeReferenceTypeStaticFieldsInline'>InitializeReferenceTypeStaticFieldsInline</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182346.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182346.aspx</a></p>
œ
*fxcop:AutoLayoutTypesShouldNotBeComVisible†
fxcop$AutoLayoutTypesShouldNotBeComVisible3CA1403: Auto layout types should not be COM visible"MAJOR*cs2CA1403:®<h2>Cause</h2>
<p>
            A Component Object Model (COM) visible value type is marked with the <code>System.Runtime.InteropServices.StructLayoutAttribute</code> attribute set to <code>LayoutKind.Auto</code>.
</p>
<h2>Rule Description</h2>
<p>


                <code>Auto</code>
               layout types are managed by the common language runtime. The layout of these types can change between versions of the .NET Framework, which will break COM clients that expect a specific layout. Note that if the <code>StructLayoutAttribute</code> attribute is not specified, the C#, Visual Basic, and C++ compilers specify the <code>Sequential</code> layout for value types.
            Unless marked otherwise, all public nongeneric types are visible to COM; all nonpublic and generic types are invisible to COM. However, to reduce false positives, this rule requires the COM visibility of the type to be explicitly stated; the containing assembly must be marked with the <code>System.Runtime.InteropServices.ComVisibleAttribute</code> set to <code>false</code> and the type must be marked with the <code>ComVisibleAttribute</code> set to <code>true</code>.
</p>
<h2>How to Fix Violations</h2>
<p>
            To fix a violation of this rule, change the value of the <code>StructLayoutAttribute</code> attribute to <code>Explicit</code> or <code>Sequential</code>, or make the type invisible to COM.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Do not suppress a warning from this rule.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:DoNotUseAutoDualClassInterfaceType'>DoNotUseAutoDualClassInterfaceType</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182194.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182194.aspx</a></p>
´
 fxcop:PointersShouldNotBeVisibleÜ
fxcopPointersShouldNotBeVisible&CA2111: Pointers should not be visible"MAJOR*cs2CA2111:•<h2>Cause</h2>
<p>
            A public or protected <code>System.IntPtr</code> or <code>System.UIntPtr</code> field is not read-only.
</p>
<h2>Rule Description</h2>
<p>


                <code>IntPtr</code>
               and <code>UIntPtr</code> are pointer types that are used to access unmanaged memory. If a pointer is not private, internal, or read-only, malicious code can change the value of the pointer, potentially allowing access to arbitrary locations in memory or causing application or system failures.
            If you intend to secure access to the type that contains the pointer field, see <a href='/coding_rules#rule_key=fxcop:SecuredTypesShouldNotExposeFields'>SecuredTypesShouldNotExposeFields</a>.
</p>
<h2>How to Fix Violations</h2>
<p>
            Secure the pointer by making it read-only, internal, or private.
</p>
<h2>When to Suppress Warnings</h2>
<p>
            Suppress a warning from this rule if you do not rely on the value of the pointer.
</p>
<h2>Example</h2>
<p>


                <a href='/coding_rules#rule_key=fxcop:SecuredTypesShouldNotExposeFields'>SecuredTypesShouldNotExposeFields</a><br/>




                <a href='/coding_rules#rule_key=fxcop:DoNotDeclareVisibleInstanceFields'>DoNotDeclareVisibleInstanceFields</a>


</p><h2>MSDN Documentation</h2>
<p><a href="http://msdn.microsoft.com/en-us/library/ms182306.aspx" target="_blank">http://msdn.microsoft.com/en-us/library/ms182306.aspx</a></p>
≠
common-java:FailedUnitTestsç
common-javaFailedUnitTests!Failed unit tests should be fixed"MAJOR*java:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.
É
common-java:SkippedUnitTests‚
common-javaSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*java:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.
Á
common-java:DuplicatedBlocks∆
common-javaDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*java:dAn issue is created on a file as soon as there is at least one block of duplicated code on this file
ë
&common-java:InsufficientCommentDensityÊ
common-javaInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*java:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.
÷
$common-java:InsufficientLineCoverage≠
common-javaInsufficientLineCoverage3Lines should have sufficient coverage by unit tests"MAJOR*java:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.
·
&common-java:InsufficientBranchCoverage∂
common-javaInsufficientBranchCoverage6Branches should have sufficient coverage by unit tests"MAJOR*java:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.
ß
common-js:FailedUnitTestsâ
	common-jsFailedUnitTests!Failed unit tests should be fixed"MAJOR*js:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.
˝
common-js:SkippedUnitTestsﬁ
	common-jsSkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*js:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.
·
common-js:DuplicatedBlocks¬
	common-jsDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*js:dAn issue is created on a file as soon as there is at least one block of duplicated code on this file
ã
$common-js:InsufficientCommentDensity‚
	common-jsInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*js:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.
–
"common-js:InsufficientLineCoverage©
	common-jsInsufficientLineCoverage3Lines should have sufficient coverage by unit tests"MAJOR*js:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.
€
$common-js:InsufficientBranchCoverage≤
	common-jsInsufficientBranchCoverage6Branches should have sufficient coverage by unit tests"MAJOR*js:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.
ß
common-py:FailedUnitTestsâ
	common-pyFailedUnitTests!Failed unit tests should be fixed"MAJOR*py:ºTest failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.
˝
common-py:SkippedUnitTestsﬁ
	common-pySkippedUnitTests4Skipped unit tests should be either removed or fixed"MAJOR*py:~Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.
·
common-py:DuplicatedBlocks¬
	common-pyDuplicatedBlocks2Source files should not have any duplicated blocks"MAJOR*py:dAn issue is created on a file as soon as there is at least one block of duplicated code on this file
ã
$common-py:InsufficientCommentDensity‚
	common-pyInsufficientCommentDensity>Source files should have a sufficient density of comment lines"MAJOR*py:ÌAn issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.
–
"common-py:InsufficientLineCoverage©
	common-pyInsufficientLineCoverage3Lines should have sufficient coverage by unit tests"MAJOR*py:¡An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.
€
$common-py:InsufficientBranchCoverage≤
	common-pyInsufficientBranchCoverage6Branches should have sufficient coverage by unit tests"MAJOR*py:≈An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.
∫
python:S1134©
pythonS1134"FIXME" tags should be handled"MAJOR*py:Ï<p>
  <code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.
  Sometimes the developer will not have the time or will simply forget to get back to that tag.
  This rule is meant to track those tags, and ensure that they do not go unnoticed.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
def divide(numerator, denominator):
  return numerator / denominator              # FIXME denominator value might be 0
</pre>
•
python:S1131î
pythonS1131.Lines should not end with trailing whitespaces"MINOR*py:«<p>Trailing whitespaces are simply useless and should not stay in code. They may generate noise when comparing different versions of the same file.</p>

<p>If you encounter issues from this rule, this probably means that you are not using an automated code formatter - which you should if you have the opportunity to do so.</p>
€
python:BackticksUsage¡
pythonBackticksUsageBackticks should not be used"MAJOR*py:˝<p>
Backticks are a deprecated alias for repr(). Don't use them any more, the syntax was removed in Python 3.0.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
return `num`     # Non-Compliant
return repr(num) # Compliant
</pre>
∑
python:ParsingErrorü
pythonParsingErrorParser failure"MAJOR*py:Î<p>
When the Python parser fails, it is possible to record the failure as a violation on the file.
This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.
</p>
â
python:LineLengtht
python
LineLengthLines should not be too long"MINOR*py:5<p>
For better readability avoid too long lines.
</p>
Ô
python:S1578ﬁ
pythonS15783Module names should comply with a naming convention"MINOR*py:å<p>Shared coding conventions allow teams to collaborate effectively. For that reason, module names should conform to a defined standard.</p>
Œ
python:S104æ
pythonS104$Files should not have too many lines"MAJOR*py:¸<p>
A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand 
and therefore to maintain.
Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.
Those smaller files will not only be easier to understand but also probably easier to test.
</p>
ƒ
python:S107¥
pythonS107BFunctions, methods and lambdas should not have too many parameters"MAJOR*py:‘<p>
A long parameter list can indicate that a new structure should be created 
to wrap the numerous parameters or that the function is doing too many things.
</p>

<h2>Noncompliant Code Example</h2>
<p>The following code snippet illustrates this rule with a maximum number of 4 parameters:</p>

<pre>
def do_something(param1, param2, param3, param4, param5):
	...
</pre>

<h2>Compliant Solution</h2>

<pre>
def do_something(param1, param2, param3, param4):
	...
</pre>
£
python:S108ì
pythonS108.Nested blocks of code should not be left empty"MAJOR*py:«<p>
Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
for i in range(3):
    pass
</pre>

<h2>Exceptions</h2>
<p>
When a block contains a comment, this block is not considered to be empty.
</p>
ì
python:XPathÇ
pythonXPath
XPath rule"MAJOR*py:◊<p>
This rule allows to define some homemade Python rules with help of an XPath expression.
</p>

<p>
Violations are created depending on the return value of the XPath expression. If the XPath expression returns:
</p>
<ul>
  <li>a single or list of AST nodes, then a line violation with the given message is created for each node</li>
  <li>a boolean, then a file violation with the given message is created only if the boolean is true</li>
  <li>anything else, no violation is created</li>
</ul>

<p>
Here is an example of an XPath expression to log a violation on each statement : //statement
</p>@
Ä

python:S1862Ô	
pythonS1862UConditions in related "if/elif/else if" statements should not have the same condition"CRITICAL*py:¯<p>
	A chain of <code>if</code>/<code>elif</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to true.
	Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error.
	At best, it's simply dead code and at worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
if param == 1:
  openWindow()
elif param == 2:
  closeWindow()
elif param == 1:            # Noncompliant
  moveWindowToTheBackground()
</pre>

<h2>Compliant Solution</h2>

<pre>
if param == 1:
  openWindow()
elif param == 2:
  closeWindow()
elif param == 3:
  moveWindowToTheBackground()
</pre>

<h2>See</h2>

<ul>
  <li><a href="https://www.securecoding.cert.org/confluence/x/NYA5">CERT, MSC12-C</a> - Detect and remove code that has no effect</li>
  <li><a href="https://www.securecoding.cert.org/confluence/x/SIIyAQ">CERT, MSC12-CPP</a> - Detect and remove code that has no effect</li>
</ul>
ã
python:S1542˙
pythonS15425Function names should comply with a naming convention"MAJOR*py:¶<p>
Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. 
This rule allows to check that all function names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>

<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>

<pre>
def MyFunction(a,b):
	...
</pre>

<h2>Compliant Solution</h2>

<pre>
def my_function(a,b):
	...
</pre>
Í
python:S1066Ÿ
pythonS1066,Collapsible "if" statements should be merged"MAJOR*py:é<p>
Merging collapsible <code>if</code> statements increases the code's readability.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
if condition1:
    if condition2:
        # ...
</pre>

<h2>Compliant Solution</h2>

<pre>
if condition1 and condition2:
    # ...
</pre>
∞
python:S1142ü
pythonS11427Functions should not contain too many return statements"MAJOR*py:…<p>
  Having too many return statements in a function increases the function's essential complexity because the flow of execution is broken each time a return statement is encountered.
  This makes it harder to read and understand the logic of the function.
</p>

<h2>Noncompliant Code Example</h2>

<p>
  The following code snippet illustrates this rule with the default threshold of 3:
</p>

<pre>
def fun():          # Non-Compliant as there are 4 return statements
  if condition1:
    return True
  elif condition2:
    return False
  else:
    return True
  return False
}
</pre>
Ω
python:PreIncrementDecrementú
pythonPreIncrementDecrement2Pre-increment and pre-decrement should not be used"MAJOR*py:ª<p>
Python has no pre/post increment/decrement operator.
For instance, x++ or x-- will fail to parse.
More importantly, ++x or --x will do nothing.
To increment a number, simply write x += 1.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
++x     # Non-Compliant
x += 1  # Compliant
</pre>
∫
python:OneStatementPerLineõ
pythonOneStatementPerLine&Statements should be on separate lines"MINOR*py:»<p>
For better readability, do not put more than one statement on a single line.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
if foo == 'blah': do_blah_thing() # Non-Compliant
do_one(); do_two(); do_three()    # Non-Compliant

if foo == 'blah':
    do_blah_thing()
do_one()
do_two()
do_three()
</pre>
¨
python:S1700õ
pythonS1700=A field should not duplicate the name of its containing class"MAJOR*py:ø<p>
  It's confusing to have a class member with the same name (case differences aside) as its enclosing class.
  This is particularly so when you consider the common practice of naming a class instance for the class itself.
</p>

<p>
  Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of
  the particular aspect of the class it represents or holds.
</p>

<h2>Noncompliant Code Sample</h2>

<pre>
class Foo:
  foo = ''

  def getFoo(self):
    ...

foo = Foo()
foo.getFoo() # what does this return?
</pre>

<h2>Compliant Solution</h2>

<pre>
class Foo:
  name = ''

  def getName(self):
    ...

foo = Foo()
foo.getName()
</pre>
¥
python:S2711£
pythonS27119"yield" and "return" should not be used outside functions"MAJOR*py:À<p>
  <code>yield</code> and <code>return</code> only make sense in the context of functions. Using them outside a function raises a <code>SyntaxError</code>.
  To break out of a loop, use <code>break</code> instead.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
class MyClass:
  while True:
    return False #Noncompliant
</pre>
˝
python:S2712Ï
pythonS27128"return" and "yield" cannot be used in the same function"CRITICAL*py:í<p>
  Functions that use <code>yield</code> are known as "generators", and generators cannot <code>return</code> values.
  Similarly, functions that use <code>return</code> cannot use <code>yield</code>. Doing so will cause a <code>SyntaxError</code>.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
def adder(n):
  num = 0
  while num < n:
    yield num
    num += 1
  return num  #Noncompliant
</pre>
§
python:ClassComplexityâ
pythonClassComplexity!Classes should not be too complex"MAJOR*py:ø<p>
The cyclomatic complexity of a class should not exceed a defined threshold.
Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
</p>
ò
python:S113à
pythonS1131Files should contain an empty new line at the end"MINOR*py:π<p>
  Some tools such as Git work better when files end with an empty line.
  This rule simply generates an issue if it is missing.
</p>

<p>
  For example, a Git diff look like:
</p>

<pre>
+class Test:
+    pass
\ No newline at end of file
</pre>

<p>
  if the empty line is missing at the end of the file.
</p>
¿
python:S116∞
pythonS1162Field names should comply with a naming convention"MINOR*py:‡<p>
  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate.
  This rule allows to check that field names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
class MyClass:
   myField = 1
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass:
   my_field = 1
</pre>
¢
python:ExecStatementUsageÑ
pythonExecStatementUsage'The "exec" statement should not be used"MAJOR*py:±<p>
Usage of exec statement might be dangerous, so avoid it.
Moreover exec statement was removed in Python 3.0, however build-in exec-function can be used instead.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
exec 'print 1'   # Non-Compliant
exec('print 1')  # Compliant
</pre>
Ó
python:S117ﬁ
pythonS117RLocal variable and function parameter names should comply with a naming convention"MINOR*py:Ó<p>
  Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function
  parameter names match a provided regular expression.
</p>

<h2>Exceptions</h2>

<p>Loop counters are ignored by this rule.</p>

<pre>
for i in range(limit):  # Compliant
    print(i)
</pre>
Ì
python:S1313‹
pythonS1313$IP addresses should not be hardcoded"MAJOR*py:ô<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>

<ul>
  <li>a recompile is required if the address changes</li>
  <li>it forces the same address to be used in every environment (dev, sys, qa, prod)</li>
  <li>it places the responsibility of setting the value to use in production on the shoulders of the developer</li>
  <li>it allows attackers to decompile the code and thereby discover a potentially sensitive address</li>
</ul>

<h2>Noncompliant Code Example</h2>

<pre>
ip = '127.0.0.1'
sock = socket.socket()
sock.bind((ip, 9090))
</pre>

<h2>Compliant Solution</h2>

<pre>
ip = Config.get(section, ipAddress)
sock = socket.socket()
sock.bind((ip, 9090))
</pre>

<h2>See</h2>

<ul>
  <li>CERT, MSC03-J - Never hard code sensitive information</li>
</ul>
©
python:S2325ò
pythonS2325:Methods that don't access instance data should be "static""MAJOR*py:ø<p>
    Class methods that don't access instance data can and should be static because it results in more performant code.
</p>

<p>
    To implement static method in Python you should use decorators <code>@classmethod</code> or <code>@staticmethod</code>.
    A class method receives the class as implicit first argument, just like an instance method receives the instance. A static method does not receive an implicit first
    argument.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
class Utilities:
    def do_the_thing(self, arg1, arg2, ...):  # Noncompliant
        #...
</pre>

<h2>Compliant Solution</h2>

<pre>
class Utilities:
    @classmethod
    def do_the_thing(cls, arg1, arg2, ...):
        #...
</pre>

<p>or</p>

<pre>
class Utilities:
    @staticmethod
    def do_the_thing(arg1, arg2, ...):
        #...
</pre>
¢
python:S1871ë
pythonS1871^Two branches in the same conditional structure should not have exactly the same implementation"MAJOR*py:î<p>
  Having two branches in the same <code>if</code> structure with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both
  instances, then they should be combined.
</p>

<h2>Noncompliant Code Example</h2>
<pre>
if 0 <= a < 10:
  do_the_thing()
elif 10 <= a < 20:
  do_the_other_thing()
elif 20 <= a < 50:
  do_the_thing()  # Noncompliant; duplicates first condition
else:
  do_the_rest()
</pre>

<h2>Compliant Solution</h2>
<pre>
if (0 <= a < 10) or (20 <= a < 50):
  do_the_thing()
elif 10 <= a < 20:
  do_the_other_thing()
else:
  do_the_rest()
</pre>

<p>or</p>

<pre>
if 0 <= a < 10:
  do_the_thing()
elif 10 <= a < 20:
  do_the_other_thing()
elif 20 <= a < 50:
  do_the_third_thing()
else:
  do_the_rest()
</pre>
—
python:S1110¿
pythonS1110XUseless parentheses around expressions should be removed to prevent any misunderstanding"MAJOR*py:…<p>Useless parentheses can sometimes be misleading and so should be removed.</p>

<p>The following code snippet illustrates this rule:</p>

<pre>
return 3             # Compliant
return (x)           # Non-Compliant
return (x + 1)       # Non-Compliant
x = (y / 2 + 1)      # Non-Compliant
y = (4+X) * y;       # Compliant
</pre>
ì
python:S134É
pythonS134^Control flow statements "if", "for", "while", "try" and "with" should not be nested too deeply"MAJOR*py:á<p>
Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>try</code> and <code>with</code> statements 
is a key ingredient for making what's known as "Spaghetti code".
Such code is hard to read, refactor and therefore maintain.
</p>

<h2>Noncompliant Code Example</h2>
<p>The following code snippet illustrates this rule with the default threshold of 3.</p>

<pre>
  if condition1:           # Compliant - depth = 1
    # ...
    if condition2:         # Compliant - depth = 2
      # ...
      for i in range(10):  # Compliant - depth = 3, not exceeding the limit
        # ...
        if condition4:     # Non-Compliant - depth = 4
          if condition5:   # Depth = 5, exceeding the limit, but issues are only reported on depth = 4
            # ...
</pre>
˚
python:S1717Í
pythonS1717E"\" should only be used as an escape character outside of raw strings"MAJOR*py:Ü<p>
Typically, backslashes are seen only as part of escape sequences. 
Therefore, the use of a backslash outside of a raw string or escape sequence looks suspiciously like a broken escape sequence.
</p>

<p>
Characters recognized as escape-able are: abfnrtvxnNrtuU\\'\"0123456789
</p>

<h2>Noncompliant Code Example</h2>

<pre>
s = "Hello \world."
t = "Nice to \ meet you"
u = "Let's have \ lunch"
</pre>

<h2>Compliant Solution</h2>

<pre>
s = "Hello world."
t = "Nice to \\ meet you"
u = r"Let's have \ lunch"
</pre>
È
python:S1716ÿ
pythonS17168"break" and "continue" should not be used outside a loop"MAJOR*py:Å<p>
  <code>break</code> and <code>continue</code> are unstructured control flow statements which make code harder to read.
  Additionally, more recent versions of Python raise a SyntaxError when modules containing
  <code>break</code> or <code>continue</code> outside of a loop are imported.
</p>

<p>Therefore, these statements should not be used outside of loops.</p>

<h2>Noncompliant Code Example</h2>

<pre>
narg=len(sys.argv)
if narg == 1:
  print('@Usage: input_filename nelements nintervals')
  break
</pre>

<h2>Compliant Solution</h2>

<pre>
if narg == 1:
  print('@Usage: input_filename nelements nintervals')
  sys.exit()
</pre>
“
python:PrintStatementUsage≥
pythonPrintStatementUsage(The "print" statement should not be used"MAJOR*py:ﬁ<p>
This statement was removed in Python 3.0 and built-in function should be used instead.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
print '1'   # Non-Compliant
print('1')  # Compliant
</pre>
Ø
python:FunctionComplexityë
pythonFunctionComplexity#Functions should not be too complex"MAJOR*py:¬<p>
The cyclomatic complexity of a function should not exceed a defined threshold.
Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
</p>
‘
*python:LongIntegerWithLowercaseSuffixUsage•
python#LongIntegerWithLowercaseSuffixUsage$Long suffix "L" should be upper case"MINOR*py:ƒ<p>
Although both lower case 'l' and upper case 'L' are allowed as suffix for long integers, it is strongly recommended to always use 'L', since the letter 'l' looks too much like the digit '1'.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
return 1l  # Non-Compliant
return 1L  # Compliant
</pre>
˚
python:CommentRegularExpression◊
pythonCommentRegularExpressionRegular expression on comment"MAJOR*py:Ü<p>
This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.
For example, one can create a rule with the regular expression ".*TODO.*" to match all comment containing "TODO".
</p>

<p>
Note that, in order to match TODO regardless of the case, the "(?i)" modifier can be prepended to the expression, as in "(?i).*TODO.*".
</p>@
ˇ
python:S1707Ó
pythonS1707>TODO and FIXME comments should contain a reference to a person"MINOR*py:ë<p>
  TODO and FIXME comments are typically intended to be short-lived; they are placeholders and reminders that programmers leave for themselves. Unfortunately, even with the best
  of intentions, those comments are not always acted on an removed in a timely manner. Thus, they can become mysterious, lingering cruft in a code base, reducing both readability
  and understand-ability.
</p>

<p>
  This rule flags all FIXME and TODO comments that do not have an attribution matching the specified regular expression immediately after the FIXME or TODO. Ideally, such
  comments will also contain information about what needs to be fixed or done, but this rule does not enforce that.
</p>

<p>These code samples use the default regular expression.</p>

<h2>Noncompliant Code Example</h2>

<pre>
# TODO
</pre>

<h2>Compliant Solution</h2>

<pre>
# TODO(ganncamp) per the business partners, more checks needed
</pre>
¢
python:S125í
pythonS125.Sections of code should not be "commented out""MAJOR*py:∆<p>
  Programmers should not comment out code as it bloats programs and reduces readability.
  Unused code should be deleted and can be retrieved from source control history if required.
</p>
<h2>See</h2>
<ul>
  <li>MISRA C:2004, 2.4 - Sections of code should not be "commented out".</li>
  <li>MISRA C++:2008, 2-7-2 - Sections of code shall not be "commented out" using C-style comments.</li>
  <li>MISRA C+:2008, 2-7-3 - Sections of code should not be "commented out" using C+ comments.</li>
  <li>MISRA C:2012, Dir. 4.4 - Sections of code should not be "commented out"</li>
</ul>
Õ
python:S1720º
pythonS1720Docstrings should be defined"MAJOR*py:Å<p>
A string literal that is the first statement in a module, function, class, or method is a docstring. A docstring should document what a caller needs to know about the code. Information about what it does, what it returns, and what it requires are all valid candidates for documentation. Well written docstrings allow callers to use your code without having to first read it and understand its logic.
</p>

<p>
By convention, docstrings are enclosed in three sets of double-quotes.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
def my_function(a,b):
</pre>

<h2>Compliant Solution</h2>

<pre>
def my_function(a,b):
    """Do X"""
</pre>
Ù
python:S1763„
pythonS1763:Jump statements should not be followed by other statements"MAJOR*py:ä<p>
	Jump statements (<code>return</code>, <code>break</code>, <code>continue</code>, and <code>raise</code>) move control flow out of the current code block.
	Typically, any statements in a block that come after a jump are simply wasted keystrokes lying in wait to confuse the unwary.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
def fun(a):
  i = 10
  return i + a       # Noncompliant
  i += 1             # this is never executed
</pre>

<h2>Compliant Solution</h2>

<pre>
def fun(a):
  i = 10
  return i + a
</pre>
‡
python:InequalityUsage≈
pythonInequalityUsage*"<>" should not be used to test inequality"MAJOR*py:Ú<p>
The forms "<>" and "!=" are equivalent. In Python 2.7.3 the "<>" spelling is considered obsolescent.
</p>

<p>
The following code snippet illustrates this rule :
</p>

<pre>
return a <> b  # Non-Compliant
return a != b  # Compliant
</pre>
ö
python:S2772â
pythonS2772$"pass" should not be used needlessly"MAJOR*py:∆<p>
  The use of a <code>pass</code> statement where it's not required by the syntax is pure cruft and should be removed.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
def __init__(self, log="", who="", date=0, files=[]):
  self.log = log
  self.files = files
  self.who = who
  self.date = date
  pass    # Noncompliant

def lookup():
  pass    # Compliant; method can't be empty
</pre>

<h2>Compliant Solution</h2>

<pre>
def __init__(self, log="", who="", date=0, files=[]):
  self.log = log
  self.files = files
  self.who = who
  self.date = date

def lookup():
  pass
</pre>
ü
python:FileComplexityÖ
pythonFileComplexityFiles should not be too complex"MAJOR*py:æ<p>
The cyclomatic complexity of a file should not exceed a defined threshold.
Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.
</p>
Ú
python:S101‚
pythonS1012Class names should comply with a naming convention"MINOR*py:í<p>
Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. 
This rule allows to check that all class names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>
<p>With default provided regular expression: ^[A-Z_][a-zA-Z0-9]+$</p>

<pre>
class myClass:
	...
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass:
	...
</pre>
µ
python:S100•
pythonS1003Method names should comply with a naming convention"MINOR*py:‘<p>
Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. 
This rule allows to check that all method names match a provided regular expression.
</p>

<h2>Noncompliant Code Example</h2>

<p>With default provided regular expression: ^[a-z_][a-z0-9_]{2,30}$</p>

<pre>
class MyClass:
    def MyMethod(a,b):
        ...
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass:
    def my_method(a,b):
        ...
</pre>
æ
python:S1845≠
pythonS1845@Methods and field names should not differ only by capitalization"CRITICAL*py:À<p>
  Looking at the set of methods and fields in a <code>class</code> and finding two that differ only by
  capitalization is confusing to users of the class.
</p>

<p>
  This situation may simply indicate poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a field
  have the same name (with or without capitalization differences). However, renaming a public method could be disruptive to callers. Therefore renaming the member is the
  recommended action.
</p>

<h2>
  Noncompliant Code Example
</h2>

<pre>
class SomeClass:
  lookUp = false
  def lookup():       # Non-compliant; method name differs from field name only by capitalization
    pass
</pre>

<h2>Compliant Solution</h2>

<pre>
class SomeClass:
  lookUp = false
  def getLookUp():
    pass
</pre>
Ó
python:S2733›
pythonS2733="__exit__" should accept type, value, and traceback arguments"CRITICAL*py:˛<p>
  The <code>__exit__</code> method is invoked with four arguments: self, type, value and traceback. Leave one of these out of the method declaration
  and the result will be a <code>TypeError</code> at runtime.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
class MyClass:
  def __enter__(self):
    pass
  def __exit__(self, exc_type, exc_val):  # Noncompliant
    pass
</pre>
Ø
python:S1722û
pythonS1722 New-style classes should be used"MAJOR*py:ﬂ<p>
The new style of class creation, with the declaration of a parent class, created a unified object model in Python, 
so that the type of an instantiated class is equal to its class. In Python 2.2-2.7, this is not the case for old-style classes. 
In Python 3+ all classes are new-style classes. 
However, since the behavior can differ from 2.2+ to 3+, explicitly inheriting from <code>object</code> 
(if there is no better candidate) is recommended.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
class MyClass():
    pass
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass(object):
    pass
</pre>
¨
python:S2734õ
pythonS2734$"__init__" should not return a value"CRITICAL*py:’<p>
  By contract, every Python function returns something, even if it's the <code>None</code> value,
  which can be returned implicitly by omitting the <code>return</code> statement, or explicitly.
</p>

<p>
  The <code>__init__</code> method is required to return <code>None</code>.
  A <code>TypeError</code> will be raised if the <code>__init__</code> method either <code>yield</code>s or <code>return</code>s any expression other than <code>None</code>.
  Returning some expression that evaluates to <code>None</code> will not raise an error, but is considered bad practice.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
class MyClass(object):
  def __init__(self):
    self.message = 'Hello'
    return self  # Noncompliant
</pre>

<h2>Compliant Solution</h2>

<pre>
class MyClass(object):
  def __init__(self):
    self.message = 'Hello'
</pre>
ü
python:S1721é
pythonS17215Parentheses should not be used after certain keywords"MAJOR*py:∫<p>
Parentheses are not required after the 
<code>assert</code>, <code>del</code>, <code>elif</code>, <code>except</code>, <code>for</code>, <code>if</code>, 
<code>in</code>, <code>not</code>, <code>raise</code>, <code>return</code>, <code>while</code>, and <code>yield</code> 
keywords, and using them unnecessarily impairs readability. 
They should therefore be omitted.</p>

<h2>Noncompliant Code Example</h2>

<pre>
x = 1
while (x < 10):
    print "x is now %d" % (x)
    x += 1
</pre>

<h2>Compliant Solution</h2>

<pre>
x = 1
while x < 10:
    print "x is now %d" % (x)
    x += 1
</pre>

<p>
This rule is deprecated, use <a href='/coding_rules#rule_key=python:S1110'>S1110</a> instead.
</p>
ô
python:S139â
pythonS139:Comments should not be located at the end of lines of code"INFO*py:≤<p>
This rule verifies that single-line comments are not located at the end of a line of code. 
The main idea behind this rule is that in order to be really readable, 
trailing comments would have to be properly written and formatted 
(correct alignment, no interference with the visual structure of the code, not too long to be visible) 
but most often, automatic code formatters would not handle this correctly: the code would end up less readable. 
Comments are far better placed on the previous empty line
of code, where they will always be visible and properly formatted.
</p>

<h2>Noncompliant Code Example</h2>

<pre>
a = b + c # This is a trailing comment that can be very very long 
</pre>

<h2>Compliant Solution</h2>

<pre>
# This very long comment is better placed before the line of code
a = b + c 
</pre>